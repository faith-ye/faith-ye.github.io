<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CAS和ABA问题</title>
      <link href="/2023/04/11/cas-he-aba-wen-ti/"/>
      <url>/2023/04/11/cas-he-aba-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>CAS 的全称是 Compare-And-Swap，它是 CPU 并发原语，功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值</p><p>CAS 并发原语体现在 Java 语言中就是 sun.misc.Unsafe 类的各个方法。调用 UnSafe 类中的 CAS 方法，JVM 会帮我们实现出 CAS 汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作。由于 CAS 是一种系统原语，原语属于操作系统使用范畴，是由若干条指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，不会造成所谓的数据不一致的问题，是线程安全的。</p><h3 id="CAS代码及底层原理"><a href="#CAS代码及底层原理" class="headerlink" title="CAS代码及底层原理"></a>CAS代码及底层原理</h3><p>这里我们需要创建一个 <code>AtomicInteger</code> 示例并初始化，然后调用 <code>compareAndSet()</code> 方法来体验 CAS 操作，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这行代码可以执行成功，因为主内存存的数据为5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t current data: "</span> <span class="token operator">+</span> atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这行代码执行不成功，因为上一步操作将主内存存的数据改为1024</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t current data: "</span> <span class="token operator">+</span> atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们查看 <code>AtomicInteger</code> 源码（如下图所示）可以发现其实现中定义了一个 <code>Unsafe</code> 变量，<code>Unsafe</code> 是 CAS 的核心类，<code>Unsafe</code> 类的所有方法都是 <code>native</code> 修饰的，也就是说 <code>Unsafe</code> 类中的方法都直接调用操作系统底层资源执行相应的任务，保证了操作的<strong>原子性</strong>。此外源码中 <code>value</code> 变量用 <code>volatile</code> 进行修饰，保证了该变量的<strong>可见性</strong></p><img src="/2023/04/11/cas-he-aba-wen-ti/image-20230411171017940.png" class=""><p>接下来我们通过讲解 <code>AtomicInteger</code> 中 <code>getAndIncrement()</code> 方法来细说 CAS 具体实现原理，首先我们看该方法的定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码中 this 指的是当前对象，valueOffset 表示该变量值在内存中的偏移地址，Unsafe 是根据内存偏移地址获取数据的。上述代码的意思是先通过 valueOffset 获取内存偏移地址，再通过内存偏移地址获取到值，然后进行加1的操作</p><p>现在我们看看 <code>getAndAddInt()</code> 该方法的实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>var5：就是我们从主内存中拷贝到工作内存中的值</p><p>该代码的意思是每次都要从主内存拿到最新的值到自己的本地内存，然后执行 <code>compareAndSwapInt()</code> 方法和主内存的值进行比较，不同则返回 false，取非就是 true，就一直执行 while 方法，直到期望的值和真实值一样，然后执行加1操作。</p><h3 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h3><p>CAS 不加锁，保证原子性，但是需要多次比较，具有以下缺点：</p><ul><li><p>循环时间长，开销大</p></li><li><p>只能保证一个共享变量的原子操作</p><ul><li>当对一个共享变量执行操作时，我们可以通过循环 CAS 的方式（自旋）来保证原子操作</li><li>但是对于多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候只能用锁来保证原子性</li></ul></li><li><p>引出来 ABA 问题</p></li></ul><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>所谓 ABA（<a href="http://en.wikipedia.org/wiki/ABA_problem">见维基百科的ABA词条</a>），问题基本是这个样子：</p><ul><li>进程 P1 在共享变量中读到值为 A</li><li>P1 被抢占了，进程 P2 执行</li><li>P2 把共享变量里的值从A改成了 B，再改回到 A，此时被 P1 抢占</li><li>P1 回来看到共享变量里的值没有被改变，于是继续执行</li></ul><p>ABA 问题说的直白点就是在进行获取主内存值的时候，该内存值在我们写入主内存的时候，已经被修改了 N 次，但是最终又改成原来的值了</p><p>CAS 出现 ABA 问题的根本是在修改变量的时候，无法记录变量的状态，比如修改的次数，CAS 只管开头和结尾，也就是头和尾一样，就修改成功，但中间的这个过程可能会被人修改过</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>利用<code>AtomicStampedReference</code> （时间戳原子引用）来解决 ABA 问题，它解决 ABA 问题的原理是引入版本号，每次修改都会改相应的版本号（类似于乐观锁），同时每次更新的时候，不但比较期望值和当前值，还比较期望版本号和当前版本号</p><p>下面代码是 ABA 问题的产生以及用<code>AtomicStampedReference</code> 来解决 ABA 问题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicStampedReference</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABADemo</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 普通的原子引用包装类     */</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 传递两个值，一个是初始值，一个是初始版本号</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============以下是ABA问题的产生=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 把100 改成 101 然后在改成100，也就是ABA</span>            atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 睡眠一秒，保证t1线程，完成了ABA操作</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 把100 改成 101 然后在改成100，也就是ABA</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> atomicReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 睡眠一秒，保证t1线程，完成了ABA操作</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============以下是ABA问题的解决=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 第一次版本号"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 暂停t3一秒钟</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 传入4个值，期望值，更新值，期望版本号，更新版本号</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 第二次版本号"</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 第三次版本号"</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 第一次版本号"</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 暂停t4 3秒钟，保证t3线程也进行一次ABA问题</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2023</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 修改成功否："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"\t 当前最新实际版本号："</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 当前实际最新值"</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><img src="/2023/04/11/cas-he-aba-wen-ti/image-20230411194511326.png" class=""><p>我们能够发现，线程 t3，在进行 ABA 操作后，版本号变更成了 3，而线程 t4 在进行操作的时候，就出现操作失败了，因为版本号和当初拿到的不一样</p>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAS </tag>
            
            <tag> ABA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2023/04/10/mysql-suo-yin/"/>
      <url>/2023/04/10/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<p>索引（index）是帮助 MySQL 高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</p><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>由于 MySQL（5.5之后）默认的存储引擎是 InnoDB， 而 InnoDB 默认使用 B+Tree索引，所以这节主要讲述 B+Tree 索引，除此之外，还简要介绍一下 Hash，从而论述为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构?  </p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>在介绍 B+Tree 之前，我们先来了解一下 B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。<br>以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5个指针：  </p><img src="/2023/04/10/mysql-suo-yin/image-20230407185327945.png" class=""><p>我们可以通过一个数据结构可视化的网站来简单演示一下： <a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a>  </p><p>通过演示可以发现其插入数据满足的特点：</p><ul><li>5阶的B树，每一个节点最多存储4个key，对应5个指针</li><li>一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂</li><li>在B树中，非叶子节点和叶子节点都会存放数据</li></ul><h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一下其结构示意图：  </p><img src="/2023/04/10/mysql-suo-yin/image-20230407185620676.png" class=""><p>这里也可以通过一个数据结构可视化的网站来简单演示一下： <a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a>  </p><p>从两者演示和上述两张图中可以看出B树和B+树两者的异同：</p><ul><li><p>B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</p></li><li><p>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</p></li><li><p>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</p></li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能，利于排序</p>  <img src="/2023/04/10/mysql-suo-yin/image-20230407190215875.png" class=""><p>在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。</p><blockquote><p>MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“<strong>非聚簇索引（非聚集索引）</strong>”。</p><p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“<strong>聚簇索引（聚集索引）</strong>”，而其余的索引都作为 <strong>辅助索引</strong> ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂</p></blockquote><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决，如下图所示：</p> <img src="/2023/04/10/mysql-suo-yin/image-20230407191210308.png" class=""><p><strong>Hash索引的特点：</strong></p><ul><li>Hash索引只能用于对等比较(=，in)，不支持范围查询（between，&gt;，&lt; ，…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引</li></ul><p><strong>思考题： 为什么 InnoDB 存储引擎选择使用 B+tree 索引结构?</strong>  </p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对Hash索引，B+tree支持范围匹配及排序操作</li></ul><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="应用维度"><a href="#应用维度" class="headerlink" title="应用维度"></a>应用维度</h3><p>在 MySQL 数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引  </p><ul><li>主键索引：针对表中主键创建的索引（<strong>PRIMARY</strong>），加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个</li><li>唯一索引：避免同一个表中某数据列中的值重复（<strong>UNIQUE</strong>），加速查询 + 列值唯一（可以有 NULL）</li><li>普通索引：仅加速查询</li><li>全文索引：对文本的内容进行分词，进行搜索（<strong>FULLTEXT</strong>）。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替</li></ul><h3 id="底层存储方式"><a href="#底层存储方式" class="headerlink" title="底层存储方式"></a>底层存储方式</h3><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：  </p><ul><li>聚集索引：将数据存储与索引放到了一块，索引结构的叶子节点保存了<strong>行数据</strong>（必须有，而且只有一个）</li><li>二级索引：将数据与索引分开存储，索引结构的叶子节点关联的是对应的<strong>主键</strong>（可以存在多个）</li></ul><p><strong>聚集索引选取规则:</strong></p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则 InnoDB 会自动生成一个某一行的 id 作为隐藏的聚集索引</li></ul><p>接下来，我们可以通过下图了解当我们执行如下的 SQL 语句时，查找过程是什么样子的  </p><img src="/2023/04/10/mysql-suo-yin/image-20230407193242320.png" class=""><ul><li>聚集索引的叶子节点下挂的是这一行的数据 </li><li>二级索引的叶子节点下挂的是该字段值对应的主键值  </li><li>回表查询：先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式</li></ul><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><ul><li><p>创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><h3 id="SQL执行频率"><a href="#SQL执行频率" class="headerlink" title="SQL执行频率"></a>SQL执行频率</h3><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- session 是查看当前会话 ;</span><span class="token comment">-- global 是查询全局数据 ;</span><span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Com_______'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Com_delete: 删除次数</li><li>Com_insert: 插入次数</li><li>Com_select: 查询次数</li><li>Com_update: 更新次数</li></ul><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有 SQL 语句的日志。<br>MySQL 的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'show_query_log'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要开启慢查询日志，需要在 MySQL 的配置文件（/etc/my.cnf）中配置如下信息：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 开启MySQL慢日志查询开关</span>slow_query_log<span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span>long_query_time<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置完毕之后，通过以下指令重新启动 MySQL 服务器进行测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再次查看开关情况，慢查询日志就已经打开了</p><p>查看慢日志文件中记录的信息：<code>tail -f /var/lib/mysql/localhost-slow.log</code></p><h3 id="profile详情"><a href="#profile详情" class="headerlink" title="profile详情"></a>profile详情</h3><p>show profiles 能够在做 SQL 优化时帮助我们了解时间都耗费到哪里去了。通过 have_profiling 参数，能够看到当前 MySQL 是否支持 profile 操作：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@have_profiling</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL 是支持 profile 操作的，但是开关是关闭的，可以通过 set 语句在 session/global 级别开启profiling：  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行一系列的业务 SQL 的操作，可以通过如下指令查看指令的执行耗时：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看每一条SQL的耗时基本情况</span><span class="token keyword">show</span> profiles<span class="token punctuation">;</span><span class="token comment">-- 查看指定query_id的SQL语句各个阶段的耗时情况</span><span class="token keyword">show</span> profile <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span><span class="token comment">-- 查看指定query_id的SQL语句CPU的使用情况</span><span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序  </p><p>语法：<code>EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件; </code></p><p>Explain 执行计划中各个字段的含义:  </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，<strong>值越大，越先执行</strong>)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT/WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能<strong>由好到差</strong>的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL 认为必须要执行查询的行数，在 innodb 引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr></tbody></table><table><thead><tr><th>Extra</th><th>含义</th></tr></thead><tbody><tr><td>Using where; Using Index</td><td>查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</td></tr><tr><td>Using index condition</td><td>查找使用了索引，但是需要回表查询数据</td></tr></tbody></table><h2 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h2><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><p><strong>最左前缀法则</strong></p><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)  </p><p><strong>范围查询</strong></p><p>联合索引中，出现范围查询(&gt;,&lt;)，范围查询右侧的列索引失效，但使用(&gt;= ,&lt;=) 不会失效。因此，在业务允许的情况下，尽可能的使用类似于 &gt;= 或 &lt;= 这类的范围查询，而避免使用 &gt; 或 &lt;  </p><p><strong>索引列计算</strong></p><p>在索引列上进行运算操作， 索引将失效。如我们在 tb_user 这张表中 phone 字段建立了索引，当根据 phone 字段进行函数运算操作之后，索引失效，当我们执行以下语句时，发现 key 字段为 NULL，即索引失效</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> substring<span class="token punctuation">(</span>phone<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'15'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>字符串不加引号</strong></p><p>字符串类型字段使用时，不加引号，索引将失效，同上，当我们执行以下语句时，也会发现 key 字段为 NULL，索引失效</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token number">17799990015</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>模糊查询</strong></p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效</p><p><code>like '软件%' </code> 索引不失效，<code>like '%工程'</code>索引失效</p><p><strong>连接条件or</strong></p><p>用or分割开的条件， 如果 or 前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到，当我们使用 or 连接时，只有左右两侧字段都有索引时，索引才会生效  </p><p><strong>数据分布影响</strong></p><p>如果 MySQL 评估使用索引比全表更慢，则不使用索引  </p><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的  </p><p>use index ： 建议 MySQL 使用哪一个索引完成此次查询（仅仅是建议，mysql 内部还会再次进行评估）  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ignore index ： 忽略指定的索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>force index ： 强制使用索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">'软件工程'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><p>先介绍几个名词意思</p><p><strong>覆盖索引：</strong>指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到，查询时尽量使用覆盖索引，减少<code>select * </code></p><p><strong>前缀索引：</strong>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率 </p><p>如为 tb_user 表的 email 字段，建立长度为5的前缀索引：<code>create index idx_email_5 on tb_user(email(5));</code></p><p><strong>单列索引：</strong>即一个索引只包含单个列<br><strong>联合索引：</strong>即一个索引包含了多个列 </p><p>设计索引应满足的原则：</p><ul><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>黑马程序员 MySQL 数据库入门到精通</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMM内存模型和volatile关键字</title>
      <link href="/2023/04/07/jmm-nei-cun-mo-xing-he-volatile-guan-jian-zi/"/>
      <url>/2023/04/07/jmm-nei-cun-mo-xing-he-volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>JMM 的全称是 Java Memory Model，即 Java 内存模型。</p><p>一般来说，编程语言可以直接使用操作系统层面的内存模型。不过不同操作系统内存模型不同，如果直接使用操作系统层面的内存模型，就可能导致同样一套代码换了一个操作系统就无法执行了。而我们知道Java语言是跨平台的，因此它需要自己提供一套内存模型以屏蔽系统的差异，这也是 JMM 存在的其中一个原因。</p><p>JMM 实际上是一种抽象的概念，并不存在，你可以把它看作是<strong>Java定义并发编程相关的一组规范</strong>，除了<strong>抽象了线程和主内存之间的关系</strong>之外，还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。</p><h3 id="JMM是如何抽象线程和主内存之间的关系？"><a href="#JMM是如何抽象线程和主内存之间的关系？" class="headerlink" title="JMM是如何抽象线程和主内存之间的关系？"></a>JMM是如何抽象线程和主内存之间的关系？</h3><p>Java内存模型（JMM）抽象了线程和主内存之间的关系，在讲解这个概念之前我们先看Java内存模型的抽象示意图：</p><img src="/2023/04/07/jmm-nei-cun-mo-xing-he-volatile-guan-jian-zi/image-20230407170624334.png" class=""><p><strong>主内存：</strong>所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是方法中的本地变量(也称局部变量)</p><p><strong>本地内存：</strong>每个线程都有一个<strong>私有</strong>的本地内存来存储共享变量的副本，本地内存是 JMM 抽象出来的一个概念，存储了主内存中的共享变量副本</p><p>因此每个线程要对共享变量进行修改时，需先将共享变量拷贝到本地内存，再将修改过的共享变量副本的值同步到主内存中去。若上图线程 1 要与线程 2 进行通信的话，则需经历下面 2 个步骤：</p><p>①线程 1 把本地内存中修改过的共享变量副本的值同步到主内存中去；②线程 2 到主存中读取对应的共享变量的值</p><h3 id="JMM-的三大特性"><a href="#JMM-的三大特性" class="headerlink" title="JMM 的三大特性"></a>JMM 的三大特性</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>不可分割，完整性，也就是一次操作或者多次操作，要么所有的操作全部都得到执行并且不会受到任何因素的干扰而中断，要么都不执行</p><p>在 Java 中，可以借助<code>synchronized</code> 、各种 <code>Lock</code> 以及各种原子类实现原子性。</p><p><code>synchronized</code> 和各种 <code>Lock</code> 可以保证任一时刻只有一个线程访问该代码块，因此可以保障原子性。各种原子类是利用 CAS操作（可能也会用到 <code>volatile</code>或者<code>final</code>关键字）来保证原子操作</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当一个线程对共享变量进行了修改，那么其他的线程能够立即看到修改后的最新值</p><p>如果我们将变量声明为 <code>volatile</code> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>在介绍有序性之前，我们需先了解指令重排，指令重排简单来说就是<strong>在多线程的环境下</strong>，系统执行代码的顺序并不一定是按照你写的代码的顺序依次执行</p><p>Java源代码会经历<strong>编译器优化重排 —&gt; 指令并行重排 —&gt; 内存系统重排</strong> 的过程，最终才变成操作系统可执行的指令序列</p><p><strong>指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong> ，所以在多线程下，指令重排序可能会导致一些问题</p><p>而有序性就是禁止指令进行重排序优化，从而避免多线程环境下可能造成的问题，如在 Java 中，<code>volatile</code> 关键字可以禁止指令进行重排序优化。</p><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p><code>volatile </code>是Java虚拟机提供的轻量级的同步机制，说直白点就是轻量级的<code>synchronized</code>，<code>volatile </code>满足 JMM 三大特性中的两个：可见性和有序性，但并不保证原子性，<code>synchronized</code>三者都满足</p><h3 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a>保证可见性</h3><p>在 Java 中，如果我们将变量声明为 <code>volatile </code>，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取，这也就保证了变量的可见性</p><h3 id="保证有序性"><a href="#保证有序性" class="headerlink" title="保证有序性"></a>保证有序性</h3><p><code>volatile </code><strong>关键字除了可以保证变量的可见性，还有一个重要的作用就是防止 JVM 的指令重排序。</strong> 如果我们将变量声明为 <strong><code>volatile</code></strong> ，在对这个变量进行读写操作的时候，会通过插入特定的 <strong>内存屏障</strong> 的方式来禁止指令重排序，从而避免了<strong>多线程环境下</strong>程序出现乱序执行的现象。</p><p>下面我们通过<code>volatile </code>禁止指令重排这一特性实现一个单例模式，其实现应用了双重检验锁方式</p><p><strong>双重校验锁实现对象单例（线程安全）</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/t 我是构造方法Singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 类对象加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>               <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码 <code>instance</code> 如果没用 <code>volatile</code> 修饰，1000个线程只生成了一个<code>Singleton</code>对象，从结果上看是能够保证单例模式的正确性，但是还是存在问题</p><p>双重检验锁方式不一定是线程安全的，例如上述代码<code>instance = new Singleton();</code>其实是分以下三步执行的：</p><p>​    ①为 <code>instance</code> 分配内存空间</p><p>​    ②初始化 <code>instance</code></p><p>​    ③将 <code>instance</code> 指向分配的内存地址</p><p>但是由于 JVM 具有指令重排的特性，执行顺序会发生改变。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 ①和 ③，此时 T2 调用 <code>getinstance()</code> 后发现 <code>instance</code> 不为空，因此返回 <code>instance</code>，但此时 <code>instance</code> 还未被初始化，因此还是有必要加入<code>volatile</code>关键字，禁止指令重排</p><h3 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h3><p>在数据库事务四大特性 <strong>ACID</strong> 中也经常提到原子性</p><p><code>volatile</code>不保证原子性代码证明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileAtomicityDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">VolatileAtomicityDemo</span> volatileAtomicityDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileAtomicityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    volatileAtomicityDemo<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"t final number value is "</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的结果我们会发现，number 输出的值并不是 20000，而且每次运行的结果都不一致，这说明 <code>volatile</code> 修饰的变量不保证原子性</p><p>这里出现的原因是<code>number++</code>这个操作并不是原子性的，通过查看该代码的字节码文件可以发现<code>number++</code>实际上是一个复合操作，包含以下三步：</p><p>​    ①从主内存拿到原始number，并拷贝到本地内存</p><p>​    ②执行加1操作</p><p>​    ③把累加后的值写回主内存</p><p><code>volatile</code>是无法保证这三个操作是具有原子性的，有可能导致下面这种情况出现：</p><p>​    ①线程 1 对 <code>number</code> 进行读取操作之后，还未对其进行修改。线程 2 又读取了 <code>number</code>的值并对其进行修改（+1），再将<code>number</code> 的值写回内存。</p><p>​    ②线程 2 操作完毕后，线程 1 对 <code>number</code>的值进行修改（+1），再将<code>number</code> 的值写回内存。</p><p>这也就导致两个线程分别对 <code>inc</code> 进行了一次自增操作后，<code>number</code> 实际上只增加了 1。</p><p>其实，如果想要保证上面的代码运行正确也非常简单，利用 <code>synchronized</code> 、<code>Lock</code>或者<code>AtomicInteger</code>都可以。</p><ul><li>使用 <code>synchronized</code> 改进：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    inc<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>ReentrantLock</code> 改进：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        inc<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>synchronized</code> 和 <code>ReentrantLock</code> 虽然能够保证原子性，但是为了解决 <code>number++</code> 而引入重量级的同步机制，有种杀鸡焉用牛刀的感觉</p><p>除了引用 <code>synchronized</code> 、<code>Lock</code>外，还可以使用 JUC 下面的原子包装类，即刚刚的 <code>int</code> 类型的 <code>number</code> ，可以使用 <code>AtomicInteger</code> 来代替</p><ul><li>使用 <code>AtomicInteger</code> 改进：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span> inc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    inc<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaGuide（Java面试+学习指南）</li><li>尚硅谷Java大厂面试题第2季</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMM </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jmeter高并发测试</title>
      <link href="/2023/03/10/jmeter-gao-bing-fa-ce-shi/"/>
      <url>/2023/03/10/jmeter-gao-bing-fa-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>这里测试的场景是秒杀优惠券的抢购，总共有200张优惠券，1000个人同时抢购，测试系统高并发下的性能。由于我是新建的系统，所以本次测试分为两步进行，第一步是生产数据，也就是让1000个用户登录登录系统，然后再用jmeter进行测试。</p><h2 id="生产数据">生产数据</h2><p>该部分分成三步进行：</p><ul><li><p>随机号码生成</p></li><li><p>生成1000条用户信息</p></li><li><p>模拟登录获取token，并将1000条token保存到.txt文件中</p></li></ul><p>注意：这里只针对我设计的系统，发送验证码部分需要返回code，用于后面模拟登录，并且用户id需要连续，因为后面直接用了一个循环模拟登录，否则会报空指针异常</p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310161323414.png" class=""><h3 id="随机号码生成">随机号码生成</h3><p>这里需要实现一个工具类，用于实现手机号码的生成，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hmdp<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @author xiaoye * @date 2023/3/10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPhoneNumber</span> <span class="token punctuation">{</span>    <span class="token comment">//手机号前三位</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> PHONE_PREFIX <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"130"</span><span class="token punctuation">,</span> <span class="token string">"131"</span><span class="token punctuation">,</span> <span class="token string">"132"</span><span class="token punctuation">,</span><span class="token string">"133"</span><span class="token punctuation">,</span><span class="token string">"134"</span><span class="token punctuation">,</span> <span class="token string">"135"</span><span class="token punctuation">,</span> <span class="token string">"136"</span><span class="token punctuation">,</span> <span class="token string">"137"</span><span class="token punctuation">,</span> <span class="token string">"138"</span><span class="token punctuation">,</span> <span class="token string">"139"</span><span class="token punctuation">,</span><span class="token string">"145"</span><span class="token punctuation">,</span>            <span class="token string">"149"</span><span class="token punctuation">,</span><span class="token string">"150"</span><span class="token punctuation">,</span> <span class="token string">"151"</span><span class="token punctuation">,</span> <span class="token string">"152"</span><span class="token punctuation">,</span><span class="token string">"153"</span><span class="token punctuation">,</span><span class="token string">"155"</span><span class="token punctuation">,</span><span class="token string">"156"</span><span class="token punctuation">,</span> <span class="token string">"157"</span><span class="token punctuation">,</span> <span class="token string">"158"</span><span class="token punctuation">,</span> <span class="token string">"159"</span><span class="token punctuation">,</span>            <span class="token string">"182"</span><span class="token punctuation">,</span> <span class="token string">"183"</span><span class="token punctuation">,</span> <span class="token string">"184"</span><span class="token punctuation">,</span> <span class="token string">"187"</span><span class="token punctuation">,</span> <span class="token string">"188"</span><span class="token punctuation">,</span> <span class="token string">"178"</span><span class="token punctuation">,</span> <span class="token string">"147"</span><span class="token punctuation">,</span> <span class="token string">"172"</span><span class="token punctuation">,</span> <span class="token string">"198"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 生成手机号     *     * @param num 生成手机号数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span> <span class="token function">createMobile</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> phones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> mobile01 <span class="token operator">=</span> PHONE_PREFIX<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>PHONE_PREFIX<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp<span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>mobile01<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成手机号后8位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            phones<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> phones<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token function">createMobile</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成用户信息">生成用户信息</h3><p>进入Spring Boot下的测试类，定义一个测试方法，随后运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUserBy1000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> phones <span class="token operator">=</span> <span class="token class-name">RandomPhoneNumber</span><span class="token punctuation">.</span><span class="token function">createMobile</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> phone <span class="token operator">:</span> phones<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 1.创建用户</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span>USER_NICK_NAME_PREFIX <span class="token operator">+</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入数据库，看数据是否成功生成，我的结果如下：</p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310162020521.png" class=""><h3 id="模拟登录获取token">模拟登录获取token</h3><p>这里需要用到Spring Boot中MockMvc进行单元测试，实现了对Http请求的模拟。它能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。具体的使用可以网上搜相关代码，我设计的单元测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tokenBy1000</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 这里的路径设置为自己想要的地方</span>    <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\token.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟1000个用户登录</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        phone <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模仿通过手机号发送验证码</span>        <span class="token class-name">ResultActions</span> perform <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span>                                                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/code?phone="</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取Response的body信息</span>        <span class="token class-name">String</span> resultJson <span class="token operator">=</span> perform<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转为Result对象</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>resultJson<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证码</span>        code <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建登录表单</span>        <span class="token class-name">LoginFormDTO</span> loginFormDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginFormDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginFormDTO<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        loginFormDTO<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将表单转换为json格式的字符串</span>        <span class="token class-name">String</span> loginFormDtoJson <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>loginFormDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建虚拟请求，模拟登录</span>        <span class="token class-name">ResultActions</span> perform2 <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>                                                 <span class="token comment">//设置contentType表示为json信息</span>                                                 <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                                                 <span class="token comment">//放入json对象</span>                                                 <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>loginFormDtoJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resultJson2 <span class="token operator">=</span> perform2<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span> result2 <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>resultJson2<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获得token</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> result2<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写入</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>token<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 关闭输出流</span>    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：测试类外面需要使用@AutoConfigureMockMvc注解开启MockMvc</p><h2 id="jmeter测试配置">jmeter测试配置</h2><p>以上准备工作做好，我们就可以用jmeter进行测试</p><p><strong>线程组配置</strong></p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310162932282.png" class=""><p><strong>HTTP请求设置</strong></p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310163004048.png" class=""><p><strong>请求头设置</strong></p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310163101724.png" class=""><p><strong>CSV数据文件设置</strong></p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310163143921.png" class=""><p><strong>JSON断言设置</strong></p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310163259543.png" class=""><p>最后添加一些监听器，并进行测试，测试结果如下</p><img src="/2023/03/10/jmeter-gao-bing-fa-ce-shi/image-20230310163759345.png" class="">]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2023/02/09/linux-chang-yong-ming-ling/"/>
      <url>/2023/02/09/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><p><strong>ls</strong></p><p><strong>作用：</strong>显示指定目录下的内容</p><p><strong>语法：</strong>ls [-al] [dir]</p><ul><li>-a显示所有文件及目录（.开头的隐藏文件也会列出）</li><li>-l除文件名称外，同时将文件形态（d表示目录，-表示文件）、权限、拥有者、文件大小等信息详细列出</li><li>常用命令ls -l，简写为ll</li></ul><p><strong>cd</strong></p><p><strong>作用：</strong>用于切换当前工作目录</p><p><strong>语法：</strong>cd [dirName]</p><ul><li>~表示用户的home目录</li><li>.表示目前所在的目录</li><li>..表示目前目录位置的上级目录</li></ul><p><strong>pwd</strong></p><p><strong>作用：</strong>显示目前所在目录</p><p><strong>语法：</strong>pwd [-p]</p><ul><li>-p：显示出确实的路径，而非使用链接 (link) 路径</li></ul><p><strong>cat</strong></p><p><strong>作用：</strong>用于显示文件内容</p><p><strong>语法：</strong>cat [-n] fileName</p><ul><li>-n：由1开始对所有输出的行数编号</li></ul><p><strong>more</strong></p><p><strong>作用：</strong>以分页的形式显示文件内容</p><p><strong>语法：</strong>more fileName</p><ul><li>回车键：向下滚动一行</li><li>空格键：向下滚动一屏</li><li>b：返回上一屏</li><li>q或者Ctrl+C：退出more</li></ul><p><strong>tail</strong></p><p><strong>作用：</strong>查看文件末尾的内容</p><p><strong>语法：</strong>tail [-f] fileName</p><ul><li>-f：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</li></ul><p><strong>mkdir</strong></p><p><strong>作用：</strong>创建目录</p><p><strong>语法：</strong>mkdir [-p] dirName</p><ul><li>-p：确保目录名称存在，不存在就创建一个。通过此选项，可以实现多层目录同时创建</li></ul><p><strong>rmdir</strong></p><p><strong>作用：</strong>删除空目录</p><p><strong>语法：</strong>rmdir [-p] dirName</p><ul><li>-p：当子目录被删除后使父目录为空目录的话，则一并删除</li></ul><p><strong>rm</strong></p><p><strong>作用：</strong>删除文件或者目录</p><p><strong>语法：</strong>rm [-rf] name</p><ul><li>-r：将目录及目录中所有文件逐一删除</li><li>-f：无需确定，直接删除</li></ul><h2 id="拷贝移动命令cp"><a href="#拷贝移动命令cp" class="headerlink" title="拷贝移动命令cp"></a>拷贝移动命令cp</h2><p><strong>作用：</strong>用于复制文件或者目录</p><p><strong>语法：</strong>cp [-r] source dest</p><ul><li>-r：如果复制的是目录，需要使用此选项，此时将复制该目录下所有的子目录和文件</li></ul><p><strong>mv</strong></p><p><strong>作用：</strong>为文件、目录改名或移动到其他位置</p><p><strong>语法：</strong>mv source dest</p><h2 id="打包压缩命令tar"><a href="#打包压缩命令tar" class="headerlink" title="打包压缩命令tar"></a>打包压缩命令tar</h2><p><strong>作用：</strong>对文件进行打包、解包、压缩、解压</p><p><strong>语法：</strong>tar [-zcxvf] fileName [files]</p><p>包文件后缀为.tar表示只是完成了打包，并没有压缩</p><p>包文件后缀为.tar.gz表示打包的同时还进行了压缩</p><ul><li>-z：z代表的是gzip，对文件压缩或者解压</li><li>-c：c代表的是create，即创建新的包文件</li><li>-x：x代表的是extract，实现从包文件中还原文件</li><li>-v：v代表的是verbose，显示命令的执行过程</li><li>-f：f代表的是file，用于指定包文件的名称</li></ul><h2 id="文本编辑命令vi-x2F-vim"><a href="#文本编辑命令vi-x2F-vim" class="headerlink" title="文本编辑命令vi/vim"></a>文本编辑命令vi/vim</h2><p><strong>作用：</strong>vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑</p><p><strong>语法：</strong>vi fileName</p><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h2><p><strong>作用：</strong>提供了查找、安装、删除某一个、一组甚至全部软件包的命令</p><p><strong>语法：</strong>yum [options] [command] [package …]</p><ul><li>options：可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</li><li>command：要进行的操作。</li><li>package：安装的包名</li></ul><p><strong>yum常用命令</strong></p><ul><li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>更新所有软件命令：<strong>yum update</strong></li><li>仅安装指定的软件命令：<strong>yum install <package_name></package_name></strong></li><li>仅更新指定的软件命令：<strong>yum update <package_name></package_name></strong></li><li>列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>删除软件包命令：<strong>yum remove <package_name></package_name></strong></li><li>查找软件包命令：<strong>yum search &lt;keyword&gt;</strong></li><li>清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul><h2 id="apt命令"><a href="#apt命令" class="headerlink" title="apt命令"></a>apt命令</h2><p><strong>作用：</strong>提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令</p><p><strong>语法：</strong>apt [options] [command] [package …]</p><ul><li>options：可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等</li><li>command：要进行的操作</li><li>package：安装的包名</li></ul><p><strong>apt常用命令</strong></p><ul><li><p>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></p></li><li><p>升级软件包：<strong>sudo apt upgrade</strong></p><p>列出可更新的软件包及版本信息：<strong>apt list –upgradeable</strong></p><p>升级软件包，升级前先删除需要更新软件包：<strong>sudo apt full-upgrade</strong></p></li><li><p>安装指定的软件命令：<strong>sudo apt install <package_name></package_name></strong></p><p>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></package_3></package_2></package_1></strong></p></li><li><p>更新指定的软件命令：<strong>sudo apt update <package_name></package_name></strong></p></li><li><p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></package_name></strong></p></li><li><p>删除软件包命令：<strong>sudo apt remove <package_name></package_name></strong></p></li><li><p>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></p></li><li><p>移除软件包及配置文件: <strong>sudo apt purge <package_name></package_name></strong></p></li><li><p>查找软件包命令： <strong>sudo apt search &lt;keyword&gt;</strong></p></li><li><p>列出所有已安装的包：<strong>apt list –installed</strong></p></li><li><p>列出所有已安装的包的版本信息：<strong>apt list –all-versions</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合缓存</title>
      <link href="/2022/12/05/springboot-zheng-he-huan-cun/"/>
      <url>/2022/12/05/springboot-zheng-he-huan-cun/</url>
      
        <content type="html"><![CDATA[<p>​        springboot提供了对市面上几乎所有的缓存技术进行整合的方案，这里主要记录两个——Redis和jetcache。这章的代码是基于<a href="https://faith-ye.github.io/2022/12/01/springboot-nei-zhi-huan-cun/">SpringBoot内置缓存</a>中手机验证码案例进行修改。</p><h2 id="SpringBoot整合Redis缓存"><a href="#SpringBoot整合Redis缓存" class="headerlink" title="SpringBoot整合Redis缓存"></a>SpringBoot整合Redis缓存</h2><p><strong>步骤①</strong>：导入redis的坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：配置缓存技术实现使用redis</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        到这里springboot整合Redis就做完了，可以发现一点，原始代码没有任何修改，仅仅是加了一组配置就可以变更缓存供应商了，这也是springboot提供了统一的缓存操作接口的优势，变更实现并不影响原始代码的书写。</p><p>​        如果需要对redis作为缓存进行配置，注意不是对原始的redis进行配置，而是配置redis作为缓存使用相关的配置，隶属于spring.cache.redis节点下，注意不要写错位置了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">use-key-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> sms_      <span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot整合jetcache缓存"><a href="#SpringBoot整合jetcache缓存" class="headerlink" title="SpringBoot整合jetcache缓存"></a>SpringBoot整合jetcache缓存</h2><p>​        目前jetcache支持的缓存方案本地缓存支持两种，远程缓存支持两种，分别如下：</p><ul><li>本地缓存（Local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（Remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul><h3 id="纯远程方案"><a href="#纯远程方案" class="headerlink" title="纯远程方案"></a>纯远程方案</h3><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter，当前坐标默认使用的远程方案是redis</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：远程方案基本配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其中poolConfig是必配项，否则会报错</p><p><strong>步骤③</strong>：启用缓存，在引导类上方标注注解@EnableCreateCacheAnnotation配置springboot程序中可以使用注解的形式创建缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot20JetCacheApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot20JetCacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤④</strong>：创建缓存对象Cache，并使用注解@CreateCache标记当前缓存的信息，然后使用Cache对象的API操作缓存，put写缓存，get读缓存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>        <span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> jetCache<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        jetCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tele<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> jetCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        通过上述jetcache使用远程方案连接redis可以看出，jetcache操作缓存时的接口操作更符合开发者习惯，使用缓存就先获取缓存对象Cache，放数据进去就是put，取数据出来就是get，更加简单易懂。并且jetcache操作缓存时，可以为某个缓存对象设置过期时间，将同类型的数据放入缓存中，方便有效周期的管理。</p><p>​        上述方案中使用的是配置中定义的default缓存，其实这个default是个名字，可以随便写，也可以随便加。例如再添加一种缓存解决方案，参照如下配置进行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">sms</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果想使用名称是sms的缓存，需要再创建缓存时指定参数area，声明使用对应缓存即可</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@CreateCache(area="sms",name="jetCache_",expire = 10,timeUnit = TimeUnit.SECONDS)private Cache&lt;String ,String&gt; jetCache;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="纯本地方案"><a href="#纯本地方案" class="headerlink" title="纯本地方案"></a>纯本地方案</h3><p>​        远程方案中，配置中使用remote表示远程，换成local就是本地，只不过类型不一样而已。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">etcache</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> linkedhashmap      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        为了加速数据获取时key的匹配速度，jetcache要求指定key的类型转换器。简单说就是，如果你给了一个Object作为key的话，我先用key的类型转换器给转换成字符串，然后再保存。等到获取数据时，仍然是先使用给定的Object转换成字符串，然后根据字符串匹配。由于jetcache是阿里的技术，这里推荐key的类型转换器使用阿里的fastjson。</p><p>​        本地方案其实和远程方案类似，变动的只有两处，一是配置文件，将remote改成local；第二个就是创建缓存对象Cache时，需要标准当前使用本地缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>cacheType <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span>LOCAL<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> jetCache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        cacheType控制当前缓存使用本地缓存还是远程缓存，配置cacheType=CacheType.LOCAL即使用本地缓存</p><h3 id="本地-远程方案"><a href="#本地-远程方案" class="headerlink" title="本地+远程方案"></a>本地+远程方案</h3><p>​        本地和远程方法都有了，两种方案一起使用如何配置呢？其实就是将两种配置合并到一起就可以了。</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">jetcache:  local:    default:      type: linkedhashmap      keyConvertor: fastjson  remote:    default:      type: redis      host: localhost      port: 6379      poolConfig:        maxTotal: 50    sms:      type: redis      host: localhost      port: 6379      poolConfig:        maxTotal: 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在创建缓存的时候，配置cacheType为BOTH，则本地缓存与远程缓存同时使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>cacheType <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> jetCache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        cacheType如果不进行配置，默认值是REMOTE，即使用远程缓存方案。关于jetcache的配置，参考以下信息</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>jetcache.statIntervalMinutes</td><td>0</td><td>统计间隔，0表示不统计</td></tr><tr><td>jetcache.hiddenPackages</td><td>无</td><td>自动生成name时，隐藏指定的包名前缀</td></tr><tr><td>jetcache.[local|remote].${area}.type</td><td>无</td><td>缓存类型，本地支持linkedhashmap、caffeine，远程支持redis、tair</td></tr><tr><td>jetcache.[local|remote].${area}.keyConvertor</td><td>无</td><td>key转换器，当前仅支持fastjson</td></tr><tr><td>jetcache.[local|remote].${area}.valueEncoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.valueDecoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.limit</td><td>100</td><td>仅local类型的缓存需要指定，缓存实例最大元素数</td></tr><tr><td>jetcache.[local|remote].${area}.expireAfterWriteInMillis</td><td>无穷大</td><td>默认过期时间，毫秒单位</td></tr><tr><td>jetcache.local.${area}.expireAfterAccessInMillis</td><td>0</td><td>仅local类型的缓存有效，毫秒单位，最大不活动间隔</td></tr></tbody></table><p>​        以上方案仅支持手工控制缓存，但是springcache方案中的方法缓存特别好用，给一个方法添加一个注解，方法就会自动使用缓存。jetcache也提供了对应的功能，即方法缓存</p><p><strong>方法缓存</strong></p><p>​        jetcache提供了方法缓存方案，只不过名称变更了而已。在对应的操作接口上方使用注解@Cached即可</p><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：配置缓存</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> linkedhashmap      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson      <span class="token key atrule">valueEncode</span><span class="token punctuation">:</span> java      <span class="token key atrule">valueDecode</span><span class="token punctuation">:</span> java      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">sms</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        由于redis缓存中不支持保存对象，因此需要对redis设置当Object类型数据进入到redis中时如何进行类型转换。需要配置keyConvertor表示key的类型转换方式，同时标注value的转换类型方式，值进入redis时是java类型，标注valueEncode为java，值从redis中读取时转换成java，标注valueDecode为java。</p><p>​        注意，为了实现Object类型的值进出redis，需要保障进出redis的Object类型的数据必须实现序列化接口。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Datapublic class Book implements Serializable {    private Integer id;    private String type;    private String name;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤③</strong>：启用缓存时开启方法缓存功能，并配置basePackages，说明在哪些包中开启方法缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token comment">//开启方法注解缓存</span><span class="token annotation punctuation">@EnableMethodCache</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"cn.edu.hust"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot20JetCacheApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot20JetCacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤④</strong>：使用注解@Cached标注当前方法使用缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Cached</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"book_"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#id"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">,</span>cacheType <span class="token operator">=</span> <span class="token class-name">CacheType</span><span class="token punctuation">.</span>REMOTE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远程方案的数据同步"><a href="#远程方案的数据同步" class="headerlink" title="远程方案的数据同步"></a>远程方案的数据同步</h3><p>​        由于远程方案中redis保存的数据可以被多个客户端共享，这就存在了数据同步问题。jetcache提供了3个注解解决此问题，分别在更新、删除操作时同步缓存数据，和读取缓存时定时刷新数据</p><p><strong>更新缓存</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@CacheUpdate(name="book_",key="#book.id",value="#book")public boolean update(Book book) {    return bookDao.updateById(book) &gt; 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除缓存</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@CacheInvalidate(name="book_",key = "#id")public boolean delete(Integer id) {    return bookDao.deleteById(id) &gt; 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定时刷新缓存</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Cached(name="book_",key="#id",expire = 3600,cacheType = CacheType.REMOTE)@CacheRefresh(refresh = 5)public Book getById(Integer id) {    return bookDao.selectById(id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h3><p>​        jetcache还提供有简单的数据报表功能，帮助开发者快速查看缓存命中信息，只需要添加一个配置即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">statIntervalMinutes</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        设置后，每1分钟在控制台输出缓存数据命中信息</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> jetcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot内置缓存</title>
      <link href="/2022/12/01/springboot-nei-zhi-huan-cun/"/>
      <url>/2022/12/01/springboot-nei-zhi-huan-cun/</url>
      
        <content type="html"><![CDATA[<p>​        以后做系统开发其实主要做的就是信息处理，而当我们读取数据时，如果应用程序直接与数据库打交道的话，受数据库的访问效率的影响，系统整体性能偏低。为了改善上述现象，开发者通常会在应用程序与数据库之间建立一种临时的数据存储机制，该区域中的数据在内存中保存，读写速度较快，可以有效解决数据库访问效率低下的问题。这一块临时存储数据的区域就是缓存。</p><img src="/2022/12/01/springboot-nei-zhi-huan-cun/image-20221201164625584.png" class=""><p>​        缓存是什么？缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。此外缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间。而 springboot 提供了对市面上几乎所有的缓存技术进行整合的方案，在学习 springboot 整合其他缓存技术之前，我们先一起学习如何使用 springboot 的内置缓存。</p><h2 id="SpringBoot-内置缓存解决方案"><a href="#SpringBoot-内置缓存解决方案" class="headerlink" title="SpringBoot 内置缓存解决方案"></a>SpringBoot 内置缓存解决方案</h2><p>​        springboot 技术提供有内置的缓存解决方案，可以帮助开发者快速开启缓存技术，并使用缓存技术进行数据的快速操作，如读取缓存数据和写入数据到缓存。内置缓存实现如下：</p><p><strong>步骤①：</strong>导入 springboot 提供的缓存技术对应的starter</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②：</strong>启用缓存，在 springboot 程序引导类上方标注注解 @EnableCaching</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启缓存功能</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot12CacheApplication</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Springboot12CacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤③：</strong>设置操作的数据是否使用缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"cacheSpace"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        上例中 value 属性描述缓存的存储位置，可以理解为是一个存储空间名，key 属性描述了缓存中保存数据的名称，使用 #id 读取形参中的 id 值作为缓存名称。使用 @Cacheable 注解后，执行当前操作，如果发现对应名称在缓存中没有数据，就正常读取数据，然后放入缓存；如果对应名称在缓存中有数据，就终止当前业务方法执行，直接返回缓存中的数据。</p><p>​        这一过程可以用 HashMap 开启一个缓存实现，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>book <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Book</span> queryBook <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> queryBook<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queryBook<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手机验证码案例"><a href="#手机验证码案例" class="headerlink" title="手机验证码案例"></a>手机验证码案例</h2><p>​        在学习其他缓存技术之前，我们先用springboot内置缓存实现一个手机验证码的案例，模拟使用缓存保存手机验证码的过程。手机验证码需求如下：</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户（页面模拟）</li><li>输入手机号和验证码验证结果</li></ul><p>为了实现这个案例，我们需要制作一个接口，接口中定义两个方法，由对应的实现类实现。其中一个方法是用来模拟发送短信的过程，其实就是根据用户提供的手机号生成一个验证码，然后放入缓存，另一个用来模拟验证码校验过程，并返回校验的结果。下面是制作该案例的模拟代码：</p><p>​        前面两个步骤和前面一样，首先导入 springboot 提供缓存技术对应的 starter，然后启用缓存，这里就不作叙述。</p><p><strong>步骤③：</strong>制作验证码对应的实体类，封装手机号与验证码两个属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tele<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤④：</strong>定义本案例的业务层接口与实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SMSCodeService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CodeUtils</span> codeUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"smsCode"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#tele"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//取出内存中的验证码与传递过来的验证码比对，如果相同，返回true</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cacheCode <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        注意这里不能用 @Cacheable 注解，因为 @Cacheable 注解是缓存中没有值则放入值，缓存中有值则取值。而验证码有一定的时效性，当验证码失效时必须重新获取验证码，所以这个注解不能用，应该使用仅具有向缓存中保存数据的功能，这里使用 @CachePut 注解即可。</p><p>​        这里生成验证码和校验验证码的功能建议放入专门的工具类中实现。</p><p><strong>步骤⑤：</strong>定义验证码的生成策略与根据手机号读取验证码的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> patch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"000000"</span><span class="token punctuation">,</span><span class="token string">"00000"</span><span class="token punctuation">,</span><span class="token string">"0000"</span><span class="token punctuation">,</span><span class="token string">"000"</span><span class="token punctuation">,</span><span class="token string">"00"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> tele<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> encryption <span class="token operator">=</span> <span class="token number">20206666</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> hash <span class="token operator">^</span> encryption<span class="token punctuation">;</span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">^</span> nowTime<span class="token punctuation">;</span>        <span class="token keyword">long</span> code <span class="token operator">=</span> result <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        code <span class="token operator">=</span> code <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>code <span class="token operator">:</span> code<span class="token punctuation">;</span>        <span class="token class-name">String</span> codeStr <span class="token operator">=</span> code <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> codeStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> patch<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">+</span> codeStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"smsCode"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#tele"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤⑥</strong>：定义验证码功能的web层接口，一个方法用于提供手机号获取验证码，一个方法用于提供手机号和验证码进行校验</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sms"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SMSCodeService</span> smsCodeService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> tele<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> smsCodeService<span class="token punctuation">.</span><span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span><span class="token class-name">SMSCode</span> smsCode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> smsCodeService<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot热部署</title>
      <link href="/2022/11/22/springboot-re-bu-shu/"/>
      <url>/2022/11/22/springboot-re-bu-shu/</url>
      
        <content type="html"><![CDATA[<p><strong>热部署的定义：</strong>简单来说就是当你程序改了，不用重启服务器，服务器会自己把更新后的程序给重新加载一遍</p><h2 id="手动启动热部署"><a href="#手动启动热部署" class="headerlink" title="手动启动热部署"></a>手动启动热部署</h2><p><strong>步骤①：</strong>导入开发者工具对应坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②：</strong>构建项目</p><img src="/2022/11/22/springboot-re-bu-shu/image-20221121172244751.png" class=""><p>​        对应的快捷键：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">&lt;Ctrl&gt;+&lt;F9&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        以上过程就可以实现 springboot 工程的热部署，过程很简单，下面简单说一下它的底层原理</p><p><strong>重启和重载</strong></p><p>一个 springboot 项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成 base 类加载器与 restart 类加载器</p><ul><li>base 类加载器：用来加载 jar 包中的类，jar 包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化</li><li>restart 类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><p>​        当 springboot 项目启动时，base 类加载器执行，加载 jar 包中的信息后，restart 类加载器执行，加载开发者制作的内容。当执行构建项目后，由于 jar 中的信息不会变化，因此 base 类加载器无需再次执行，所以仅仅运行 restart 类加载器即可，所以说热部署的过程实际上是重新加载 restart 类加载器中的信息。</p><h2 id="自动启动热部署"><a href="#自动启动热部署" class="headerlink" title="自动启动热部署"></a>自动启动热部署</h2><p>以下方法只对 IDEA 有效</p><p><strong>步骤①：</strong>设置自动构建项目</p><p>​        打开【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】</p><img src="/2022/11/22/springboot-re-bu-shu/image-20221121173837609.png" class=""><p><strong>步骤②：</strong>允许在程序运行时自动构建</p><p>​        使用快捷键【Ctrl】+【Alt】+【Shit】+【/】打开维护面板，选择第1项【Registry…】</p><img src="/2022/11/22/springboot-re-bu-shu/image-20221121174026964.png" class=""><p>在选项中搜索 compile ，然后勾选对应选项即可</p><h2 id="参与热部署监控的文件范围配置"><a href="#参与热部署监控的文件范围配置" class="headerlink" title="参与热部署监控的文件范围配置"></a>参与热部署监控的文件范围配置</h2><p>​        通过修改项目中的文件，你可以发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>​        以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过 application.yml 文件进行设定哪些文件不参与热部署操作</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token comment"># 设置不参与热部署的文件或文件夹</span>      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/<span class="token important">**</span><span class="token punctuation">,</span>public/<span class="token important">**</span><span class="token punctuation">,</span>config/application.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭热部署"><a href="#关闭热部署" class="headerlink" title="关闭热部署"></a>关闭热部署</h2><p>​        线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class SSMPApplication {    public static void main(String[] args) {        System.setProperty("spring.devtools.restart.enabled","false");        SpringApplication.run(SSMPApplication.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统下关于端口的一些命令</title>
      <link href="/2022/11/04/windows-xi-tong-xia-guan-yu-duan-kou-de-yi-xie-ming-ling/"/>
      <url>/2022/11/04/windows-xi-tong-xia-guan-yu-duan-kou-de-yi-xie-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>这部分知识可以用于解决在 DOS 环境下启动 SpringBoot 工程时，会遇到端口占用的问题</p><ul><li>查询端口</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询指定端口</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -ano |findstr "端口号"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据进程 PID 查询进程名称</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tasklist |findstr "进程PID号"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据 PID 杀死任务</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">taskkill /F /PID "进程PID号"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据进程名称杀死任务</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">taskkill -f -t -im "进程名称"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决mybatisplus分页插件getTotal，getPage全部为0</title>
      <link href="/2022/11/03/jie-jue-mybatisplus-fen-ye-cha-jian-gettotal-getpage-quan-bu-wei-0/"/>
      <url>/2022/11/03/jie-jue-mybatisplus-fen-ye-cha-jian-gettotal-getpage-quan-bu-wei-0/</url>
      
        <content type="html"><![CDATA[<p>首先看一下测试的内容和运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testGetPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">IPage</span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bookDao<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/11/03/jie-jue-mybatisplus-fen-ye-cha-jian-gettotal-getpage-quan-bu-wei-0/image-20221103145113104.png" class=""><p>getTotal 和 getPage 对应输出的是图中红框中的内容，为什么会出现这样的情况呢？这个主要源于 mybatisplus 内部的机制。对于 MySQL 的分页操作使用 limit 关键字进行，而并不是所有的数据库都使用 limit 关键字实现的，这个时候 mybatisplus 为了制作的兼容性强，将分页操作设置为基础查询操作的升级版。</p><p>基础操作中有查询全部的功能，而在这个基础上只需要升级一下就可以得到分页操作。所以 mybatisplus 将分页操作做成了一个开关，这个开关是通过MP的拦截器的形式存在的，具体设置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MPConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码第一行是创建MP的拦截器栈，这个时候拦截器栈中没有具体的拦截器，第二行是初始化了分页拦截器，并添加到拦截器栈中。如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</p><p>现在看一下控制台分页查询的执行情况，问题就已经解决了，这里需要注意将方法定义为一个Bean，同时将对应的类设为配置类，用注解<code>@Configuration</code></p><img src="/2022/11/03/jie-jue-mybatisplus-fen-ye-cha-jian-gettotal-getpage-quan-bu-wei-0/image-20221103150103886.png" class="">]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatisplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础配置</title>
      <link href="/2022/11/03/springboot-ji-chu-pei-zhi/"/>
      <url>/2022/11/03/springboot-ji-chu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h2><p>SpringBoot 除了支持 properties 格式的配置文件，还支持另外两种格式的配置文件。分别如下:</p><ul><li>properties 格式</li><li>yml 格式</li><li>yaml 格式</li></ul><p>这三种不同文件格式以配置服务器端口为例，如下：</p><ul><li>application.properties（properties格式）</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>application.yml（yml格式）</li></ul><pre class="line-numbers language-YML" data-language="YML"><code class="language-YML">server:  port: 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>application.yaml（yaml格式）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>仔细看会发现 yml 格式和 yaml 格式完全一样，所以可以合并成一种格式来看。对于这三种格式，以后基本上都是用 yml 格式，以后企业开发过程中用这个格式的机会也最多，要重点掌握。</p><p><strong>补充知识</strong></p><ul><li>配置文件间的加载优先级    properties（最高）&gt;  yml  &gt;  yaml（最低）</li><li>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</li></ul><h2 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h2><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul><li>.yml格式（主流）</li><li>.yaml格式</li></ul><p>对于文件自身在书写时，具有严格的语法格式要求，具体如下：</p><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ul><p>上述规则不要死记硬背，其中核心的一条规则要记住，<font color="#ff0000"><b>数据前面要加空格与冒号隔开</b></font></p><p>这里列举几种常见的数据书写格式：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">boolean: TRUE   # TRUE,true,True,FALSE,false，False均可float: 3.14     # 6.8523015e+5  #支持科学计数法int: 123        # 0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制null: ~         # 使用~表示nullstring: HelloWorld       # 字符串可以直接书写string2: "Hello World"   # 可以使用双引号包裹特殊字符date: 2018-02-17         # 日期必须使用yyyy-MM-dd格式datetime: 2018-02-17T15:02:31+08:00  # 时间和日期之间使用T连接，最后使用+代表时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，yaml 格式中也可以表示数组，在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">subject</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Java<span class="token punctuation">-</span> 前端<span class="token punctuation">-</span> 大数据<span class="token key atrule">enterprise</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> faith<span class="token punctuation">-</span>ye    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">22</span>    <span class="token key atrule">subject</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> Java        <span class="token punctuation">-</span> 大数据<span class="token key atrule">likes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>王者荣耀<span class="token punctuation">,</span>刺激战场<span class="token punctuation">]</span><span class="token comment">#数组书写缩略格式</span><span class="token key atrule">users</span><span class="token punctuation">:</span> <span class="token comment">#对象数组格式一</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Tom   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Jerry    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token key atrule">users</span><span class="token punctuation">:</span> <span class="token comment">#对象数组格式二</span>  <span class="token punctuation">-</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> Tom    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token punctuation">-</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> Jerry    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">users2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span>Tom <span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">4</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span>Jerry <span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">5</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token comment">#对象数组缩略格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="yaml数据读取"><a href="#yaml数据读取" class="headerlink" title="yaml数据读取"></a>yaml数据读取</h2><p>对于 yaml 文件中的数据，其实你就可以想象成这就是一个小型的数据库，里面保存有若干数据，每个数据都有一个独立的名字，如果你想读取里面的数据，肯定是支持的，下面就介绍3种读取数据的方式</p><h3 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h3><p>yaml 中保存的单个数据，可以使用 Spring 中的注解直接读取，使用 @Value 可以读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p><img src="/2022/11/03/springboot-ji-chu-pei-zhi/image-20221103093755467.png" class=""><h3 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h3><p>读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot 提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做 Environment，使用自动装配注解可以将所有的 yaml 数据封装到这个对象中。获取属性时，通过Environment的接口操作进行，具体方法是 getProperties（String），参数填写属性名即可</p><img src="/2022/11/03/springboot-ji-chu-pei-zhi/image-20221103093857314.png" class=""><h3 id="读取对象数据"><a href="#读取对象数据" class="headerlink" title="读取对象数据"></a>读取对象数据</h3><p>SpringBoot 也提供了可以将一组 yaml 对象数据封装一个Java对象的操作，首先定义一个对象，并将该对象纳入 Spring 管控的范围，也就是定义成一个 bean，然后使用注解 @ConfigurationProperties 指定该对象加载哪一组 yaml 中配置的信息。</p><img src="/2022/11/03/springboot-ji-chu-pei-zhi/image-20221103094109389.png" class=""><p>下面列举一个常见配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">main</span><span class="token punctuation">:</span>    <span class="token key atrule">banner-mode</span><span class="token punctuation">:</span> off    <span class="token comment"># 关闭SpringBoot启动图标(banner)</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">banner</span><span class="token punctuation">:</span> off    <span class="token comment"># 关闭mybatisplus启动图标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="yaml文件中数据引用"><a href="#yaml文件中数据引用" class="headerlink" title="yaml文件中数据引用"></a>yaml文件中数据引用</h2><p>如果你在书写 yaml 数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">center</span><span class="token punctuation">:</span><span class="token key atrule">dataDir</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/usr/local/file/data    <span class="token key atrule">tmpDir</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/usr/local/file/tmp    <span class="token key atrule">logDir</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/usr/local/file/log    <span class="token key atrule">msgDir</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/usr/local/file/msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候你可以使用引用格式来定义数据，其实就是搞了个变量名，然后引用变量了，格式如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">baseDir</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/usr/local/file<span class="token key atrule">center</span><span class="token punctuation">:</span>    <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>/data    <span class="token key atrule">tmpDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>/tmp    <span class="token key atrule">logDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>/log    <span class="token key atrule">msgDir</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>baseDir<span class="token punctuation">}</span>/msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个注意事项，在书写字符串时，如果里面存在转义字符，需要使用双引号将其包裹起来</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">lesson: "Spring\tboot\nlesson"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda常用命令</title>
      <link href="/2022/10/26/anaconda-chang-yong-ming-ling/"/>
      <url>/2022/10/26/anaconda-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>具体参考下面这篇博客</p><p><a href="https://www.cnblogs.com/wind-chaser/p/11325733.html">Anaconda常用命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令行</title>
      <link href="/2022/10/18/git-ming-ling-xing/"/>
      <url>/2022/10/18/git-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><p><strong>## 环境配置</strong></p><p>安装Git后首先要做的事情是设置用户名称和email地址，这是非常重要的，因为每次Git提交都会使用该用户信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#设置用户信息    git config --global user.name “itcast”   git config --global user.email “itcast@itcast.cn”#查看配置信息   git config --list   git config user.name#通过上面的命令设置的信息会保存在~/.gitconfig文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## 初始化本地仓库</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 初始化仓库带工作区git init# 初始化仓库不带工作区git init --bare <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## 克隆 clone</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 从远程仓库克隆git clone 远程Git仓库地址 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>##  查看状态 status</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看状态git status #查看状态 使输出信息更加简洁git status –s <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## add</strong> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将未跟踪的文件加入暂存区git add  &lt;文件名&gt; # 将暂存区的文件取消暂存 (取消 add )git reset  &lt;文件名&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## commit</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># git commit 将暂存区的文件修改提交到本地仓库git commit -m "日志信息"  &lt;文件名&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>## 删除 rm</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 从本地工作区 删除文件git rm &lt;文件名&gt;  # 如果本工作区库误删, 想要回退git checkout head &lt;文件名&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git远程仓库操作"><a href="#git远程仓库操作" class="headerlink" title="git远程仓库操作"></a>git远程仓库操作</h2><p><strong>## 查看远程</strong> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看远程  列出指定的每一个远程服务器的简写git remote # 查看远程 , 列出简称和地址git remote  -v  # 查看远程仓库详细地址git remote show  &lt;仓库简称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## 添加/移除远测仓库</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 添加远程仓库git remote add &lt;shortname&gt; &lt;url&gt;# 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)git remote rm &lt;shortname&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>## 从远程仓库获取代码</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 从远程仓库克隆git clone &lt;url&gt;# 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)git fetch  &lt;shortname&gt;  &lt;分支名称&gt;# 手动合并  把某个版本的某个分支合并到当前工作区git merge &lt;shortname&gt;/&lt;分支名称&gt;# 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+mergegit pull  &lt;shortname&gt;  &lt;分支名称&gt;git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将本地仓库推送至远程仓库的某个分支git push [remote-name] [branch-name]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="命令行–-分支"><a href="#命令行–-分支" class="headerlink" title="命令行– 分支"></a>命令行– 分支</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 默认 分支名称为 master# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 创建分支git branch &lt;分支名&gt;# 切换分支 git checkout &lt;分支名&gt;# 删除分支(如果分支已经修改过,则不允许删除)git branch -d  &lt;分支名&gt;# 强制删除分支git branch -D  &lt;分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 提交分支至远程仓库git push &lt;仓库简称&gt; &lt;分支名称&gt;# 合并分支 将其他分支合并至当前工作区git merge &lt;分支名称&gt;# 删除远程仓库分支git push origin –d branchName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行-–tag"><a href="#命令行-–tag" class="headerlink" title="命令行 –tag"></a>命令行 –tag</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 列出所有taggit tag# 查看tag详细信息 git show [tagName]# 新建一个taggit tag [tagName]# 提交指定tag$ git push [仓库简称] [tagName]# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]# 删除本地tag$ git tag -d [tag]# 删除远程tag (注意 空格)$ git push origin :refs/tags/[tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记四：JDBC练习</title>
      <link href="/2022/09/29/bi-ji-si-jdbc-lian-xi/"/>
      <url>/2022/09/29/bi-ji-si-jdbc-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>完成商品品牌数据的增删改查操作</p><ul><li>查询：查询所有数据</li><li>添加：添加品牌</li><li>修改：根据id修改</li><li>删除：根据id删除</li></ul><h2 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>创建数据库表 <code>tb_brand</code></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除tb_brand表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> tb_brand<span class="token punctuation">;</span><span class="token comment">-- 创建tb_brand表</span><span class="token keyword">create</span> <span class="token keyword">table</span> tb_brand <span class="token punctuation">(</span>    <span class="token comment">-- id 主键</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token comment">-- 品牌名称</span>    brand_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 企业名称</span>    company_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 排序字段</span>    ordered <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment">-- 描述信息</span>    description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 状态：0：禁用  1：启用</span>    <span class="token keyword">status</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'三只松鼠'</span><span class="token punctuation">,</span> <span class="token string">'三只松鼠股份有限公司'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'好吃不上火'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'华为'</span><span class="token punctuation">,</span> <span class="token string">'华为技术有限公司'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span> <span class="token string">'小米科技有限公司'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'are you ok'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在pojo包下实现实体类 Brand</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>               <span class="token comment">// id 主键</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brandName<span class="token punctuation">;</span>         <span class="token comment">// 品牌名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> companyName<span class="token punctuation">;</span>       <span class="token comment">// 企业名称</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> ordered<span class="token punctuation">;</span>          <span class="token comment">// 排序字段</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>       <span class="token comment">// 描述信息</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>           <span class="token comment">// 状态：0：禁用 1：启用</span>    <span class="token keyword">public</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> brandName<span class="token punctuation">,</span> <span class="token class-name">String</span> companyName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> ordered<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordered <span class="token operator">=</span> ordered<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrandName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> brandName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrandName</span><span class="token punctuation">(</span><span class="token class-name">String</span> brandName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCompanyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> companyName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompanyName</span><span class="token punctuation">(</span><span class="token class-name">String</span> companyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getOrdered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ordered<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrdered</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> ordered<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ordered <span class="token operator">=</span> ordered<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Brand{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", brandName='"</span> <span class="token operator">+</span> brandName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", companyName='"</span> <span class="token operator">+</span> companyName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", ordered="</span> <span class="token operator">+</span> ordered <span class="token operator">+</span>                <span class="token string">", description='"</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", status="</span> <span class="token operator">+</span> status <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 查询参数     * 1.SQL：select * from tb_brand;     * 2.参数：不需要     * 3.结果：List&lt;Brand&gt;     */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 加载配置文件</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取连接池对象</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取数据库连接 Connection</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tb_brand;"</span><span class="token punctuation">;</span>        <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理结果 List&lt;Brand&gt; 封装Brand对象，装载List集合</span>    <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 获取数据</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> brandName <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"brand_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> companyName <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"company_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ordered <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"ordered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 封装Brand对象</span>        brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> brandName<span class="token punctuation">,</span> companyName<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 装载集合</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 添加     * 1.SQL：insert into tb_brand(brand_name, company_name, ordered, description, status) values(?,?,?,?,?);     * 2.参数：需要，除了id之外的所有信息     * 3.结果：boolean     */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 接收页面提交的参数</span>    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">"绕地球一圈"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 加载配置文件</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取连接池对象</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取数据库连接 Connection</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into tb_brand(brand_name, company_name, ordered, description, status) values(?,?,?,?,?);"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置参数</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 影响的行数</span>    <span class="token comment">// 处理结果</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 修改     * 1.SQL：        update tb_brand               set brand_name  = ?,               company_name= ?,               ordered     = ?,               description = ?,               status      = ?           where id = ?     * 2.参数：需要，所有信息     * 3.结果：boolean     */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 接收页面提交的参数</span>    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">"绕地球三圈"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 加载配置文件</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取连接池对象</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取数据库连接 Connection</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">" update tb_brand\n"</span> <span class="token operator">+</span>        <span class="token string">"         set brand_name  = ?,\n"</span> <span class="token operator">+</span>        <span class="token string">"         company_name= ?,\n"</span> <span class="token operator">+</span>        <span class="token string">"         ordered     = ?,\n"</span> <span class="token operator">+</span>        <span class="token string">"         description = ?,\n"</span> <span class="token operator">+</span>        <span class="token string">"         status      = ?\n"</span> <span class="token operator">+</span>        <span class="token string">"     where id = ?"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置参数</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 影响的行数</span>    <span class="token comment">// 处理结果</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 删除     * 1.SQL： delete from tb_brand where id = ?     * 2.参数：需要，id     * 3.结果：boolean     */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 接收页面提交的参数</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 加载配置文件</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取连接池对象</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取数据库连接 Connection</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">" delete from tb_brand where id = ?"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取pstmt对象</span>    <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置参数</span>    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行sql</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 影响的行数</span>    <span class="token comment">// 处理结果</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记三：JDBC</title>
      <link href="/2022/09/29/bi-ji-san-jdbc/"/>
      <url>/2022/09/29/bi-ji-san-jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><p>在开发中我们使用的是 Java 语言，那么势必要通过Java语言操作数据库中的数据，因此就会用到 JDBC。</p><p><strong>JDBC概念</strong></p><p>JDBC 就是使用 Java 语言操作关系型数据库的一套 API，全称为 Java DataBase Connectivity，Java 数据库连接。</p><p>JDBC 中定义了所有操作关系型数据库的规则，众所周知 JDBC 接口是无法直接使用的，我们需要使用接口的实现类，而这套实现类（称之为：驱动）就由各自的数据库厂商给出</p><p><strong>JDBC本质</strong></p><ul><li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li></ul><p><strong>JDBC好处</strong></p><ul><li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发</li><li>可随时替换底层数据库，访问数据库的Java代码基本不变</li></ul><h2 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h2><p>先看看通过Java操作数据库的流程</p><img src="/2022/09/29/bi-ji-san-jdbc/image-20220928151829976.png" class=""><p>第一步：编写Java代码</p><p>第二步：Java代码将SQL发送到MySQL服务端</p><p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p><p>第四步：将SQL语句执行的结果返回给Java代码</p><h3 id="编写代码步骤"><a href="#编写代码步骤" class="headerlink" title="编写代码步骤"></a>编写代码步骤</h3><ul><li>创建工程，导入驱动jar包</li></ul><img src="/2022/09/29/bi-ji-san-jdbc/image-20220928152033258.png" class=""><ul><li><p>注册驱动</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java代码需要发送SQL给MySQL服务端，就需要先建立连接</p></li><li><p>定义SQL语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">String <span class="token keyword">sql</span> <span class="token operator">=</span>  “<span class="token keyword">update</span>…” <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取执行SQL对象</p><p>执行SQL语句需要SQL执行对象，而这个执行对象就是Statement对象</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">stmt<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>处理返回结果</p></li><li><p>释放资源</p></li></ul><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>首先创建一个新的项目以及模块，然后将mysql的驱动包放在模块下的lib目录（自己创建）下，并将该jar包添加为库文件，最后创建类，并编写代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取连接</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db1?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 定义sql</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update account set money = 2000 where id = 1"</span><span class="token punctuation">;</span>        <span class="token comment">//4. 获取执行sql的对象 Statement</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5. 执行sql</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//受影响的行数</span>        <span class="token comment">//6. 处理结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7. 释放资源</span>        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>DriverManager（驱动管理类）作用：</p><ul><li>注册驱动</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>static void registerDriver(Driver driver)</td><td>用于注册驱动</td></tr></tbody></table><p>registerDriver方法是用于注册驱动的，但是我们之前做的入门案例并不是这样写的。而是如下实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们查询MySQL提供的Driver类，看它是如何实现的，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该类中的静态代码块中已经执行了 <code>DriverManager</code> 对象的 <code>registerDriver()</code> 方法进行驱动的注册了，那么我们只需要加载 <code>Driver</code> 类，该静态代码块就会执行。而 <code>Class.forName("com.mysql.jdbc.Driver");</code> 就可以加载 <code>Driver</code> 类。</p><blockquote><p>注意：</p><ul><li>MySQL 5之后的驱动包，可以省略注册驱动的步骤</li><li>自动加载jar包中META-INF/services/java.sql.Driver文件中的驱动类</li></ul></blockquote><ul><li>获取数据库连接</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>static Connection getConnection(String url, String user, String password)</td><td>尝试建立与给定数据库URL的连接</td></tr></tbody></table><p>参数说明：</p><ul><li><p>url ： 连接路径</p><blockquote><p>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称?参数键值对1&amp;参数键值对2…</p><p>示例：jdbc:mysql://127.0.0.1:3306/db1</p><p>==细节：==</p><ul><li><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称?参数键值对</p></li><li><p>配置 useSSL=false 参数，禁用安全连接方式，解决警告提示</p></li></ul></blockquote></li><li><p>user ：用户名</p></li><li><p>poassword ：密码</p></li></ul><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>Connection（数据库连接对象）作用：</p><ul><li>获取执行 SQL 的对象</li><li>管理事务</li></ul><p><strong>获取执行对象</strong></p><ul><li><p>普通执行 SQL 对象</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Statement createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>预编译 SQL 的执行 SQL 对象：防止 SQL 注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">PreparedStatement prepareStatement<span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行存储过程的对象，不常用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CallableStatement prepareCall<span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>事务管理</strong></p><p>MySQL 事务管理的操作：</p><ul><li>开启事务 ： BEGIN; 或者 START TRANSACTION;</li><li>提交事务 ： COMMIT;</li><li>回滚事务 ： ROLLBACK;</li></ul><blockquote><p>MySQL默认是自动提交事务</p></blockquote><p>JDBC 事务管理：Connection接口中定义了3个对应的方法</p><ul><li>开启事务 ： setAutoCommit(boolean autoCommit)：true为自动提交事务；false为手动提交事务，即为开启事务</li><li>提交事务 ： commit()</li><li>回滚事务 ： rollback()</li></ul><p>具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo3_Connection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 注册驱动</span>        <span class="token comment">//Class.forName("com.mysql.jdbc.Driver");</span>        <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 定义sql</span>        <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"update account set money = 3000 where id = 1"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"update account set money = 3000 where id = 2"</span><span class="token punctuation">;</span>        <span class="token comment">//4. 获取执行sql的对象 Statement</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// ============开启事务==========</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5. 执行sql</span>            <span class="token keyword">int</span> count1 <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//受影响的行数</span>            <span class="token comment">//6. 处理结果</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//5. 执行sql</span>            <span class="token keyword">int</span> count2 <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//受影响的行数</span>            <span class="token comment">//6. 处理结果</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ============提交事务==========</span>            <span class="token comment">//程序运行到此处，说明没有出现任何问题，则需求提交事务</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// ============回滚事务==========</span>            <span class="token comment">//程序在出现异常时会执行到这个地方，此时就需要回滚事务</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//7. 释放资源</span>        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>Statement对象的作用就是用来执行SQL语句。而针对不同类型的SQL语句使用的方法也不一样。</p><ul><li>执行DDL、DML语句</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int executeUpdate(String sql)</td><td>执行给定的SQL语句</td></tr></tbody></table><blockquote><p>开发很少使用Java代码操作DDL语句</p></blockquote><ul><li>执行DQL语句，这个一会说</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ResultSet executeQuery(String sql)</td><td>执行给定的SQL语句，该语句返回单个ResultSet对象</td></tr></tbody></table><p><strong>执行DML语句代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">//1. 注册驱动</span>    <span class="token comment">//Class.forName("com.mysql.jdbc.Driver");</span>    <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update account set money = 3000 where id = 1"</span><span class="token punctuation">;</span>    <span class="token comment">//4. 获取执行sql的对象 Statement</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5. 执行sql</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行完DML语句，受影响的行数</span>    <span class="token comment">//6. 处理结果</span>    <span class="token comment">//System.out.println(count);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改失败~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7. 释放资源</span>    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>ResultSet（结果集对象）作用：</p><ul><li>封装了SQL查询语句的结果</li></ul><p><code>ResultSet</code> 对象提供了操作查询结果数据的方法，如下：</p><blockquote><p>boolean  next()</p><ul><li>将光标从当前位置向前移动一行 </li><li>判断当前行是否为有效行</li></ul><p>方法返回值说明：</p><ul><li>true  ： 有效航，当前行有数据</li><li>false ： 无效行，当前行没有数据</li></ul></blockquote><blockquote><p>xxx  getXxx(参数)：获取数据</p><ul><li>xxx : 数据类型；如： int getInt(参数) ；String getString(参数)</li><li>参数<ul><li>int类型的参数：列的编号，从1开始</li><li>String类型的参数： 列的名称</li></ul></li></ul></blockquote><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">//1. 注册驱动</span>    <span class="token comment">//Class.forName("com.mysql.jdbc.Driver");</span>    <span class="token comment">//2. 获取连接：如果连接的是本机mysql并且端口是默认的 3306 可以简化书写</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db1?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 定义sql</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from account"</span><span class="token punctuation">;</span>    <span class="token comment">//4. 获取statement对象</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5. 执行sql</span>    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6. 处理结果， 遍历rs中的所有数据</span>    <span class="token comment">// 6.1 光标向下移动一行，并且判断当前行是否有数据</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//6.2 获取数据  getXxx()</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7. 释放资源</span>    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><ul><li><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p></li><li><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p></li><li><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p></li><li><p>好处</p><ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li></ul></blockquote><p>连接池是在一开始就创建好了一些连接（Connection）对象存储起来。用户需要连接数据库时，不需要自己创建连接，而只需要从连接池中获取一个连接进行使用，使用完毕后再将连接对象归还给连接池；这样就可以起到资源重用，也节省了频繁创建连接销毁连接所花费的时间，从而提升了系统响应的速度。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>标准接口：==DataSource==</p><p>官方(SUN) 提供的数据库连接池标准接口，由第三方组织实现此接口。该接口提供了获取连接的功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么以后就不需要通过 <code>DriverManager</code> 对象获取 <code>Connection</code> 对象，而是通过连接池（DataSource）获取 <code>Connection</code> 对象。</p></li><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul><p>我们现在使用更多的是Druid，它的性能比其他两个会好一些。</p></li><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><p><strong>Driud使用</strong></p><blockquote><ul><li>导入jar包 druid-1.1.12.jar</li><li>定义配置文件</li><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ul></blockquote><p>现在通过代码实现，首先需要先将druid的jar包放到项目下的lib下并添加为库文件</p><p>项目结构如下：</p><img src="/2022/09/29/bi-ji-san-jdbc/image-20220929094056885.png" class=""><p>编写配置文件如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///db1?useSSL=false&amp;useServerPrepStmts=true</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">****      # 这是你数据库的密码，对应填上</span><span class="token comment"># 初始化连接数量</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment"># 最大连接数</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment"># 最大等待时间</span><span class="token attr-name">maxWait</span><span class="token punctuation">=</span><span class="token attr-value">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用druid的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>driud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1.导入jar包</span>        <span class="token comment">//2.定义配置文件</span>        <span class="token comment">//3. 加载配置文件</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc-demo/src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 获取连接池对象</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5. 获取数据库连接 Connection</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取到了连接后就可以继续做其他操作了</span>        <span class="token comment">//System.out.println(System.getProperty("user.dir"));</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven仓库安装配置及使用</title>
      <link href="/2022/09/27/maven-cang-ku-an-zhuang-pei-zhi-ji-shi-yong/"/>
      <url>/2022/09/27/maven-cang-ku-an-zhuang-pei-zhi-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>亲测下面这个链接有用，大家按照这个博主写的配置就好</p><p><a href="https://www.cnblogs.com/desireyang/p/12787480.html">Maven仓库安装配置及使用</a></p><p>需要补充的地方是 jdk 版本的设置，在你解压文件路径下进入conf文件下找到settings.xml 文件，将其打开找到 jdk 版本相关配置，可以看出它默认配置的是 jdk-1.4 ，默认这个版本的话使用 maven 编译会显示<font color="red">【ERROR】不再支持源选项5。请使用7或更高版本</font>这个错误。</p><p>这里解决的方法是在里面新建一个子标签，添加 jdk 版本的说明，这里需要根据自己的 jdk 版本进行相应修改</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记二：MySQL语法上</title>
      <link href="/2022/09/22/bi-ji-er-mysql-yu-fa-shang/"/>
      <url>/2022/09/22/bi-ji-er-mysql-yu-fa-shang/</url>
      
        <content type="html"><![CDATA[<p>这里可以通过进入终端或者使用一些软件进行学习，软件的话推荐<code>Navicat</code>。终端的话，通过win+R进入终端后输入<code>mysql -u root -p</code>后按回车输入前面安装时的密码就可以进入mysql下进行操作，退出 mysql可以使用 exit 命令</p><h2 id="数据库和数据表"><a href="#数据库和数据表" class="headerlink" title="数据库和数据表"></a>数据库和数据表</h2><p>下面是对数据库的三个基本操作：</p><ul><li>创建MySQL数据库：<code>CREATE DATABASE 数据库名;</code></li><li>删除MySQL数据库：<code>DROP DATABASE 数据库名;</code></li><li>选择MySQL数据库：<code>USE 数据库名;</code></li></ul><p>选定数据库之后就可以创建相应的数据表，创建MySQL数据表需要的信息：表名、表字段名和定义每个表字段</p><ul><li>创建MySQL数据表：<code>CREATE TABLE table_name (column_name column_type);</code></li></ul><p>以下是一个基本示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE IF NOT EXISTS `runoob_tbl`(   `runoob_id` INT UNSIGNED AUTO_INCREMENT,   `runoob_title` VARCHAR(100) NOT NULL,   `runoob_author` VARCHAR(40) NOT NULL,   `submission_date` DATE,   PRIMARY KEY ( `runoob_id` ))ENGINE=InnoDB DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例解析：</p><ul><li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li><li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul><p>对应的也有删除数据表的命令：</p><ul><li>删除MySQL数据表：<code>DROP TABLE table_name;</code></li></ul><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>创建好数据表之后就可以使用通用的<strong>INSERT INTO</strong> SQL语法插入数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO table_name ( field1, field2,...fieldN )                       VALUES                       ( value1, value2,...valueN );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>MySQL 数据库使用SQL SELECT语句来查询数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT column_name,column_nameFROM table_name[WHERE Clause][LIMIT N][ OFFSET M];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件</li><li>SELECT 命令可以读取一条或者多条记录</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件</li><li>你可以使用 LIMIT 属性来设定返回的记录数</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0</li></ul><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE table_name SET field1=new-value1, field2=new-value2[WHERE Clause];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>你可以同时更新一个或多个字段</li><li>你可以在 WHERE 子句中指定任何条件</li><li>你可以在一个单独表中同时更新数据</li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM table_name [WHERE Clause];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录</li></ul><h2 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h2><p>用于获取某个字段中含有特定字符的所有记录，SQL LIKE 子句中使用百分号 <strong>%</strong> 字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****。如果没有使用百分号 **%**， LIKE 子句与等号 <strong>=</strong> 的效果是一样的</p><p>以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT field1, field2,...fieldN FROM table_nameWHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索</li><li>你可以使用 AND 或者 OR 指定一个或多个条件</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件</li></ul><h2 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><p>MySQL UNION 操作符语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions]UNION [ALL | DISTINCT]SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</li><li><strong>tables:</strong> 要检索的数据表。</li><li><strong>WHERE conditions:</strong> 可选， 检索条件。</li><li><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>可以使用 MySQL 的 <strong>ORDER BY</strong> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p><p>以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果</li><li>你可以设定多个字段来排序</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列</li><li>你可以添加 WHERE…LIKE 子句来设置条件</li></ul><h2 id="GROUP-BY语句"><a href="#GROUP-BY语句" class="headerlink" title="GROUP BY语句"></a>GROUP BY语句</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组，在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><p>对应语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT column_name, function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如：<code>SELECT name, COUNT(*) FROM employee_tbl GROUP BY name;</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记一：MySQL安装及数据类型</title>
      <link href="/2022/09/22/bi-ji-yi-mysql-an-zhuang-ji-shu-ju-lei-xing/"/>
      <url>/2022/09/22/bi-ji-yi-mysql-an-zhuang-ji-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><p>所有平台的MySQL下载地址为： <a href="https://dev.mysql.com/downloads/mysql/">MySQL 下载</a>。挑选你需要的 <em>MySQL Community Server</em> 版本及对应的平台。</p><p>这里我们主要是介绍Windows系统下MySQL安装，使用的是.msi安装形式，安装请参考这篇文章：<a href="https://zhuanlan.zhihu.com/p/188416607">MySQL安装</a></p><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>下表显示了MySQL每个数值类型的存储和范围</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符</p></li><li><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换</p></li><li><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值</p></li><li><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同</p></li><li><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记十：IO流</title>
      <link href="/2022/09/20/bi-ji-shi-io-liu/"/>
      <url>/2022/09/20/bi-ji-shi-io-liu/</url>
      
        <content type="html"><![CDATA[<p><strong>定义：</strong>I表示intput，把硬盘文件中的数据读入到内存的过程，称之输入，负责读；lO表示output，把内存中的数据写出到硬盘文件的过程，称之输出，负责写。</p><p><strong>IO流的分类</strong></p><img src="/2022/09/20/bi-ji-shi-io-liu/image-20220907170330470.png" class=""><p><strong>总结流的四大类</strong></p><ul><li><p>字节输入流：以内存为基准，来自磁盘文件/网络中的数据<font color="Red">以字节的形式读入到内存</font>中去的流称为字节输入流。</p></li><li><p>字节输出流：以内存为基准，把内存中的数据<font color="Red">以字节写出到磁盘文件或者网络</font>中去的流称为字节输出流。</p></li><li><p>字符输入流：以内存为基准，来自磁盘文件/网络中的数据<font color="Red">以字符的形式读入到内存</font>中去的流称为字符输入流。</p></li><li><p>字符输出流：以内存为基准，把内存中的数据<font color="Red">以字符写出到磁盘文件或者网络介质</font>中去的流称为字符输出流。</p></li></ul><img src="/2022/09/20/bi-ji-shi-io-liu/image-20220914172125552.png" class=""><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p><strong>文件字节输入流：FileInputStream</strong></p><p><strong>作用：</strong>以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public  FileInputStream(File file)</td><td>创建字节输入流管道与源文件对象接通</td></tr><tr><td>public  FileInputStream(String pathname)</td><td>创建字节输入流管道与源文件路径接通</td></tr></tbody></table><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public int  read()</td><td>每次读取一个字节返回，如果字节已经没有可读的返回-1</td></tr><tr><td>public int  read(byte[] buffer)</td><td>每次读取一个字节数组返回，如果字节已经没有可读的返回-1</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1、创建一个文件字节输入流管道与源文件连通</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"文件相对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2、定义一个字节数组，用于读取字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String rs = new String(buffer, 0, len);  读取多少倒出多少</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//前三个字节代表的内容</span><span class="token comment">// 3、改进使用循环，每次读取一个字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件字节输出流：FileOutputStream</strong></p><p><strong>作用：</strong>以内存为基准，把内存中的数据以字节的形式写出到磁盘文件中去的流</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public FileOutputStream(File file)</td><td>创建字节输出流管道与源文件对象接通</td></tr><tr><td>public FileOutputStream(File file，boolean append)</td><td>创建字节输出流管道与源文件对象接通，<font color="Red">可追加数据 </font></td></tr><tr><td>public FileOutputStream(String filepath)</td><td>创建字节输出流管道与源文件路径接通</td></tr><tr><td>public FileOutputStream(String filepath，boolean append)</td><td>创建字节输出流管道与源文件路径接通，<font color="Red">可追加数据 </font></td></tr></tbody></table><p> <strong>写数据出去的API</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public void write(int a)</td><td>写一个字节出去</td></tr><tr><td>public void write(byte[] buffer)</td><td>写一个字节数组出去</td></tr><tr><td>public void write(byte[] buffer , int pos , int len)</td><td>写一个字节数组的一部分出去。</td></tr></tbody></table><ul><li>换行：<code>os.write(“\r\n”.getBytes())</code></li></ul><p><strong>流的关闭和刷新</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>flush()</td><td>刷新流，还可以继续写数据</td></tr><tr><td>close()</td><td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table><p><strong>资源释放的方式</strong></p><p><strong>try-catch-finally</strong></p><ul><li><p>finally：放在try-catch后面的，无论是正常执行还是异常执行代码，最后一定要执行，除非JVM退出。</p></li><li><p>作用：一般用于进行最后的资源释放操作（专业级做法）</p></li><li><p>格式</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment">// 即使上面有return语句执行，也必须执行完这里才可以！</span>    <span class="token comment">// 开发中不建议在这加return，加了永远是返回这里的数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JDK 7和JDK9中都简化了资源释放操作</strong></p><img src="/2022/09/20/bi-ji-shi-io-liu/image-20220914164230804.png" class=""><p><strong>综合案例：文件拷贝</strong></p><p><strong>需求：</strong>把某个视频复制到其他目录下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 1、创建一个字节输入流管道与原视频接通</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\原始视频.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2、创建一个字节输出流管道与目标文件接通</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\new.wmv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3、定义一个字节数组来转移数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>  <span class="token comment">// 记录每次读取的字节数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、关闭流</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment">// 无论代码是正常结束，还是出现异常都要最后执行这里</span>            <span class="token comment">// 4、关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>os <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ul><li>读取中文输出，字符流更合适，因为字节流读取中文输出会乱码，或者内存溢出</li></ul><p><strong>文件字符输入流：Reader</strong></p><ul><li>作用：以内存为基准，把磁盘文件中的数据以字符的形式读取到内存中去</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public FileReader(File file)</td><td>创建字符输入流管道与源文件对象接通</td></tr><tr><td>public FileReader(String  pathname)</td><td>创建字符输入流管道与源文件路径接通</td></tr></tbody></table><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public int read()</td><td>每次读取一个字符返回，如果字符已经没有可读的返回-1</td></tr><tr><td>public int  read(char[] buffer)</td><td>每次读取一个字符数组，返回读取的字符个数，如果字符已经没有可读的返回-1</td></tr></tbody></table><p><strong>文件字符输出流：FileWriter</strong></p><ul><li>作用：以内存为基准，把内存中的数据以字符的形式写出到磁盘文件中去的流</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public FileWriter(File file)</td><td>创建字符输出流管道与源文件对象接通</td></tr><tr><td>public FileWriter(File file，boolean append)</td><td>创建字符输出流管道与源文件对象接通，可追加数据</td></tr><tr><td>public FileWriter(String filepath)</td><td>创建字符输出流管道与源文件路径接通</td></tr><tr><td>public FileWriter(String filepath，boolean append)</td><td>创建字符输出流管道与源文件路径接通，可追加数据</td></tr></tbody></table><p><strong>写数据出去的API</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void  write(int c)</td><td>写一个字符</td></tr><tr><td>void  write(char[] cbuf)</td><td>写入一个字符数组</td></tr><tr><td>void  write(char[] cbuf, int off, int len)</td><td>写入字符数组的一部分</td></tr><tr><td>void  write(String str)</td><td>写一个字符串</td></tr><tr><td>void  write(String str, int off, int len)</td><td>写一个字符串的一部分</td></tr></tbody></table><p><strong>流的关闭和刷新</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>flush()</td><td>刷新流，还可以继续写数据</td></tr><tr><td>close()</td><td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><ul><li>缓冲流也称为高效流、或者高级流。之前学习的字节流可以称为原始流</li><li>作用：<font color="Red">缓冲流自带缓冲区、可以提高原始字节流、字符流读写数据的性能</font></li></ul><p><strong>字节缓冲流性能优化原理</strong></p><ul><li>字节缓冲输入流自带了<font color="Red">8KB缓冲池</font>，以后我们直接从缓冲池读取数据，所以性能较好</li><li>字节缓冲输出流自带了<font color="Red">8KB缓冲池</font>，数据就直接写入到缓冲池中去，写数据性能极高了</li></ul><p><strong>字节缓冲流</strong></p><ul><li><p>字节缓冲输入流：BufferedInputStream，提高字节输入流读取数据的性能</p></li><li><p>字节缓冲输出流：BufferedOutputStream，提高字节输出流读取数据的性能</p></li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public BufferedInputStream(InputStream is)</td><td>可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能</td></tr><tr><td>public BufferedOutputStream(OutputStream os)</td><td>可以把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高写数据的性能</td></tr></tbody></table><p><strong>字符缓冲流</strong></p><ul><li>字符缓冲输入流：BufferedReader，提高字符输入流读取数据的性能，除此之外多了<font color="Red">按照行读取数据</font>的功能</li><li>字符缓冲输出流：BufferedWriter，提高字符输出流写取数据的性能，除此之外多了<font color="Red">换行</font>功能</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public  BufferedReader(Reader r)</td><td>可以把低级的字符输入流包装成一个高级的缓冲字符输入流管道，从而提高字符输入流读数据的性能</td></tr><tr><td>public BufferedWriter(Writer  w)</td><td>可以把低级的字符输出流包装成一个高级的缓冲字符输出流管道，从而提高字符输出流写数据的性能</td></tr></tbody></table><p><strong>字符缓冲流新增功能</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public  String readLine()</td><td>读取一行数据返回，如果读取没有完毕，无行可读返回<font color="Red">null </font></td></tr><tr><td>public  void newLine()</td><td>换行操作</td></tr></tbody></table><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ul><li>作用：解决不同编码读取乱码的问题</li><li>字符输入转换流：InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public InputStreamReader(InputStream is)</td><td>可以把原始的字节流按照代码默认编码转换成字符输入流，<font color="Red">几乎不用</font>，与默认的FileReader一样。</td></tr><tr><td>public InputStreamReader(InputStream is ，String charset)</td><td>可以把原始的字节流按照<font color="Red">指定编码</font>转换成字符输入流，这样字符流中的字符就不乱码了</td></tr></tbody></table><ul><li>字符输入转换流：OutputStreamWriter，可以把字节输出流按照指定编码转换成字符输出流</li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public OutputStreamWriter(OutputStream os)</td><td>可以把原始的字节输出流按照代码默认编码转换成字符输出流，几乎不用。</td></tr><tr><td>public OutputStreamWriter(OutputStream os，String  charset)</td><td>可以把原始的字节输出流按照<font color="Red">指定编码</font>转换成字符输出流</td></tr></tbody></table><h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><p><strong>对象序列化</strong></p><ul><li>作用：以内存为基准，把内存中的<font color="Red">对象</font>存储到磁盘文件中去，称为对象序列化</li><li>使用到的流是对象字节输出流：<font color="Red">ObjectOutputStream</font></li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectOutputStream(OutputStream  out)</td><td>把低级字节输出流包装成高级的对象字节输出流</td></tr></tbody></table><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public final void writeObject(Object obj)</td><td>把对象写出去到对象序列化流的文件中去</td></tr></tbody></table><p><strong>对象反序列化</strong></p><ul><li>作用：以内存为基准，把存储到磁盘文件中去的<font color="Red">对象数据</font>恢复成内存中的对象，称为对象反序列化</li><li>使用到的流是对象字节输入流：<font color="Red">ObjectInputStream</font></li></ul><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectInputStream(InputStream  out)</td><td>把低级字节输如流包装成高级的对象字节输入流</td></tr></tbody></table><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  Object readObject()</td><td>把存储到磁盘文件中去的对象数据恢复成内存中的对象返回</td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li>对象如果要序列化，必须实现<font color="Red">Serializable</font>序列化接口</li><li>transient修饰的成员变量不会参与序列化，这样可以避免泄露敏感信息</li><li>使用<code>private static final long serialVersionUID = 1</code>来申明序列化的版本号码，这样序列化的版本号与反序列化的版本号必须一致才不会出错</li></ul><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><ul><li><p>作用：打印流可以实现<font color="Red">方便、高效的打印数据到文件</font>中去。打印流一般是指：PrintStream，PrintWriter两个类</p></li><li><p>可以实现打印什么数据就是什么数据，例如打印整数97写出去就是97，打印boolean的true，写出去就是true</p></li></ul><p><strong>PrintStream</strong></p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream os)</td><td>打印流直接通向字节输出流管道</td></tr><tr><td>public PrintStream(File f)</td><td>打印流直接通向文件对象</td></tr><tr><td>public PrintStream(String filepath)</td><td>打印流直接通向文件路径</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void print(Xxx  xx)</td><td>打印任意类型的数据出去</td></tr></tbody></table><p><strong>PrintWriter</strong></p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public PrintWriter(OutputStream os)</td><td>打印流直接通向字节输出流管道</td></tr><tr><td>public PrintWriter (Writer w)</td><td>打印流直接通向字符输出流管道</td></tr><tr><td>public PrintWriter (File f)</td><td>打印流直接通向文件对象</td></tr><tr><td>public PrintWriter (String filepath)</td><td>打印流直接通向文件路径</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void print(Xxx  xx)</td><td>打印任意类型的数据出去</td></tr></tbody></table><p><strong>PrintStream和PrintWriter的区别</strong></p><ul><li><p>打印数据功能上是一模一样的，都是使用方便，性能高效（核心优势）</p></li><li><p>PrintStream继承自字节输出流OutputStream，支持写字节数据的方法</p></li><li><p>PrintWriter继承自字符输出流Writer，支持写字符数据出去</p></li></ul><p><strong>输出语句重定向</strong></p><ul><li>属于打印流的一种应用，可以把输出语句的打印位置改到文件</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"文件地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>其实就是一个Map集合，但是我们一般不会当集合使用，因为HashMap更好用</li></ul><p><strong>Properties核心作用</strong></p><ul><li><p>Properties代表的是一个<font color="Red">属性文件</font>，可以把自己对象中的键值对信息存入到一个属性文件中去</p></li><li><p>属性文件：后缀是.properties结尾的文件，里面的内容都是<font color="Red"> key=value</font>，后续做系统配置信息的</p></li></ul><p><strong>Properties和IO流结合的方法(API)</strong></p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>void load(InputStream inStream)</td><td>从输入字节流读取属性列表（键和元素对）</td></tr><tr><td>void  load(Reader reader)</td><td>从输入字符流读取属性列表（键和元素对）</td></tr><tr><td>void  store(OutputStream out, String comments)</td><td>将此属性列表（键和元素对）写入此  Properties表中，以适合于使用 load(InputStream)方法的格式写入输出字节流</td></tr><tr><td>void  store(Writer writer, String comments)</td><td>将此属性列表（键和元素对）写入此  Properties表中，以适合使用 load(Reader)方法的格式写入输出字符流</td></tr><tr><td>public Object setProperty(String  key, String value)</td><td>保存键值对（put）</td></tr><tr><td>public String getProperty(String  key)</td><td>使用此属性列表中指定的键搜索属性值  (get)</td></tr><tr><td>public Set&lt;String&gt; stringPropertyNames()</td><td>所有键的名称的集合 (keySet())</td></tr></tbody></table><h2 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h2><p><strong>commons-io概述</strong></p><ul><li><p>commons-io是apache开源基金组织提供的一组有关IO操作的类库，可以提高IO功能开发的效率</p></li><li><p>commons-io工具包提供了很多有关io操作的类。有两个主要的类FileUtils，IOUtils</p></li></ul><p><strong>FileUtils主要有如下方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>String  readFileToString(File  file, String encoding)</td><td>读取文件中的数据, 返回字符串</td></tr><tr><td>void  copyFile(File  srcFile, File destFile)</td><td>复制文件。</td></tr><tr><td>void  copyDirectoryToDirectory(File  srcDir,  File destDir)</td><td>复制文件夹。</td></tr></tbody></table><p><strong>案例：导入commons-io-2.6.jar做开发</strong></p><p>需求：使用commons-io简化io流读写</p><p>具体步骤：</p><ul><li>在项目中创建一个文件夹：lib</li><li>将commons-io-2.6.jar文件复制到lib文件夹</li><li>在jar文件上点右键，选择 Add as Library -&gt; 点击OK</li><li>在类中导包使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记九：File类和方法递归</title>
      <link href="/2022/09/14/bi-ji-jiu-file-lei-he-fang-fa-di-gui/"/>
      <url>/2022/09/14/bi-ji-jiu-file-lei-he-fang-fa-di-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><ul><li>File类的对象代表操作系统的文件（文件、文件夹），File类在java.io.File包下</li><li>File类提供了诸如：创建文件对象代表文件，获取文件信息（大小、修改时间）、删除文件、创建文件（文件夹）等功能</li></ul><p><strong>File类创建对象</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  File(String pathname)</td><td>根据文件路径创建文件对象</td></tr><tr><td>public File(String  parent, String child)</td><td>根据父路径名字符串和子路径名字符串创建文件对象</td></tr><tr><td>public File(File parent, String child)</td><td>根据父路径对应文件对象和子路径名字符串创建文件对象</td></tr></tbody></table><p><strong>绝对路径和相对路径</strong></p><ul><li><p>绝对路径：从盘符开始，如<code>File file1 = new File(“D:\\study\\a.txt”);</code></p></li><li><p>相对路径：不带盘符，默认直接到当前工程下的目录寻找文件，如<code>File file3 = new File(“模块名\\a.txt”);</code></p></li></ul><p><strong>File类的判断文件类型、获取文件信息功能</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  boolean isDirectory()</td><td>判断此路径名表示的File是否为文件夹</td></tr><tr><td>public  boolean isFile()</td><td>判断此路径名表示的File是否为文件</td></tr><tr><td>public  boolean  exists()</td><td>判断此路径名表示的File是否存在</td></tr><tr><td>public long  length()</td><td>返回文件的大小（字节数量）</td></tr><tr><td>public  String getAbsolutePath()</td><td>返回文件的绝对路径</td></tr><tr><td>public  String getPath()</td><td>返回定义文件时使用的路径</td></tr><tr><td>public  String getName()</td><td>返回文件的名称，带后缀</td></tr><tr><td>public  long lastModified()</td><td>返回文件的最后修改时间（时间毫秒值）</td></tr></tbody></table><p><strong>File类创建文件的功能</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建一个新的空的文件</td></tr><tr><td>public boolean mkdir()</td><td>只能创建<font color="Red">一级</font>文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>可以创建<font color="Red">多级</font>文件夹</td></tr></tbody></table><p><strong>File类删除文件的功能</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  boolean delete()</td><td>删除由此抽象路径名表示的文件或空文件夹</td></tr></tbody></table><p><strong>注意：</strong>delete方法默认只能删除文件和<font color="Red">空文件夹</font>，delete方法直接删除不走回收站</p><p><strong>File类的遍历功能</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public String[] list()</td><td>获取当前目录下所有的“一级文件名称”到一个字符串数组中去返回。</td></tr><tr><td>public File[] listFiles()(常用)</td><td>获取当前目录下所有的“一级文件对象”到一个文件对象数组中去返回（重点）</td></tr></tbody></table><p><strong>listFiles方法注意事项：</strong></p><ul><li><p>当文件不存在时或者代表文件时，返回null</p></li><li><p>当文件对象代表一个空文件夹时，返回一个长度为0的数组</p></li><li><p>当文件对象是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回</p></li><li><p>当文件对象是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包含隐藏文件</p></li><li><p>当没有权限访问该文件夹时，返回null</p></li></ul><h2 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h2><p><strong>定义：</strong>方法调用自身的形式称为递归（recursion），递归做为一种算法在程序设计语言中广泛应用</p><p><strong>形式</strong></p><ul><li>直接递归：方法自己调用自己</li><li>间接递归：方法调用其他方法，其他方法又回调方法自己</li></ul><p><strong>存在的问题：</strong>递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出现象</p><h3 id="案例1：递归求1-n的和"><a href="#案例1：递归求1-n的和" class="headerlink" title="案例1：递归求1-n的和"></a>案例1：递归求1-n的和</h3><img src="/2022/09/14/bi-ji-jiu-file-lei-he-fang-fa-di-gui/image-20220905172641759.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例2：文件搜索"><a href="#案例2：文件搜索" class="headerlink" title="案例2：文件搜索"></a>案例2：文件搜索</h3><p><strong>需求：</strong>从某路径下搜索出某个文件名称并输出绝对路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">searchFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 3、判断dir是否为目录</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 4、提取当前目录下的一级文件对象</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null []</span>        <span class="token comment">// 5、判断一级文件夹是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>files <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 6、判断当前遍历的一级文件对象是文件还是目录</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// 7、是不是要找的，是把其路径输出</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了："</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment">// 8、是文件夹，需要继续递归寻找</span>                    <span class="token function">searchFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，当前搜索的位置不是文件夹！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例3：啤酒问题"><a href="#案例3：啤酒问题" class="headerlink" title="案例3：啤酒问题"></a>案例3：啤酒问题</h3><p><strong>需求：</strong>啤酒2元1瓶，4个盖子可以换一瓶，2个空瓶可以换一瓶，请问10元钱可以喝多少瓶酒，剩余多少空瓶和盖子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义一个静态的成员变量用于存储可以买的酒数量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> totalNumber<span class="token punctuation">;</span>           <span class="token comment">// 总数量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> lastBottleNumber<span class="token punctuation">;</span>      <span class="token comment">// 记录每次剩余的瓶子个数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> lastCoverNumber<span class="token punctuation">;</span>       <span class="token comment">// 记录每次剩余的盖子个数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、拿钱买酒</span>        <span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总数："</span> <span class="token operator">+</span> totalNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"剩余盖子数："</span> <span class="token operator">+</span> lastCoverNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"剩余瓶子数："</span> <span class="token operator">+</span> lastBottleNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 2、看可以立马买多少瓶</span>        <span class="token keyword">int</span> buyNumber <span class="token operator">=</span> money <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>        totalNumber <span class="token operator">+=</span> buyNumber<span class="token punctuation">;</span>        <span class="token comment">// 3、把盖子和瓶子换成钱</span>        <span class="token comment">// 统计本轮总的盖子数和瓶子数</span>        <span class="token keyword">int</span> coverNumber <span class="token operator">=</span> lastCoverNumber <span class="token operator">+</span> buyNumber<span class="token punctuation">;</span>        <span class="token keyword">int</span> bottleNumber <span class="token operator">=</span> lastBottleNumber <span class="token operator">+</span> buyNumber<span class="token punctuation">;</span>        <span class="token comment">// 4、更新每次剩余的盖子数和瓶子数</span>        lastCoverNumber <span class="token operator">=</span> coverNumber <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        lastBottleNumber <span class="token operator">=</span> bottleNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// 5、判断是否够换成钱</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>coverNumber <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> bottleNumber <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 够，计算出能换成多少钱，并重新迭代</span>            <span class="token keyword">int</span> allMoney <span class="token operator">=</span> <span class="token punctuation">(</span>coverNumber <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> bottleNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">buy</span><span class="token punctuation">(</span>allMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><ul><li><p>计算机底层不可以直接存储字符的，计算机底层只能存储二进制</p></li><li><p>计算机可以给人类字符进行编号存储，这套编号规则就是字符集</p></li><li><p>字符集（Character Set）是多个字符的集合</p></li><li><p>常见字符集有ASCII字符集、GBK字符集以及Unicode（UTF-8）字符集等</p></li></ul><p><strong>ASCII字符集</strong></p><ul><li>ASCII(American Standard Code for Information Interchange，美国信息交换标准代码)：包括了数字、英文、符号</li><li>ASCII使用<font color="Red">一个字节</font>存储一个字符，一个字节是8位，总共可以表示128个字符信息，对于表示英文、数字来说是够用</li></ul><p><strong>GBK</strong></p><ul><li><p>GBK是中国的码表，包含了几万个汉字等字符，同时也要兼容ASCII编码</p></li><li><p>GBK编码中一个中文字符一般以<font color="Red">两个字节</font>的形式存储</p></li></ul><p><strong>Unicode字符集</strong></p><ul><li><p>统一码，也叫万国码。是计算机科学领域里的一项业界标准</p></li><li><p>UTF-8是Unicode的一种常见编码方式，一般以<font color="Red">三个字节</font>的形式存储，同时也要兼容ASCII编码表，英文和数字在任何国家的编码中都不会乱码</p></li></ul><p><strong>注意：</strong>技术人员都应该使用UTF-8的字符集编码，编码器前和编码后的字符集要一致，否则会出现中文乱码。</p><p><strong>String编码</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>byte[] getBytes()</td><td>使用平台的默认字符集将该  String编码为一系列字节，将结果存储到新的字节数组中</td></tr><tr><td>byte[] getBytes(String charsetName)</td><td>使用指定的字符集将该 String编码为一系列字节，将结果存储到新的字节数组中</td></tr></tbody></table><p><strong>String解码</strong></p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>String(byte[] bytes)</td><td>通过使用平台的默认字符集解码指定的字节数组来构造新的  String</td></tr><tr><td>String(byte[] bytes, String charsetName)</td><td>通过指定的字符集解码指定的字节数组来构造新的 String</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记八：异常处理和日志框架</title>
      <link href="/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/"/>
      <url>/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><strong>定义：</strong>异常是程序在“编译”或者“执行”的过程中可能出现的问题，<font color="Red">注意：</font>语法错误不算在异常体系中</p><p><strong>为什么学习异常？</strong></p><ul><li><p>异常一旦出现了，如果没有提前处理，程序就会退出JVM虚拟机而终止</p></li><li><p>研究异常并且避免异常，然后提前处理异常，体现的是程序的安全, 健壮性</p></li></ul><p><strong>异常体系</strong></p><img src="/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/image-20220819160737831.png" class=""><ul><li><p><strong>Error</strong>：系统级别问题、JVM退出等，代码无法控制</p></li><li><p><strong>Exception</strong>：java.lang包下，称为异常类，它表示程序本身可以处理的问题</p><ul><li><p><strong>RuntimeException及其子类</strong>：运行时异常，编译阶段不会报错。 (空指针异常，数组索引越界异常) </p></li><li><p><strong>除RuntimeException之外所有的异常</strong>：编译时异常，编译期必须处理的，否则程序不能通过编译。 (日期格式化异常)。</p></li></ul></li></ul><p><strong>编译时异常和运行时异常</strong></p><img src="/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/image-20220819161140864.png" class=""><p>简单来说：编译时异常就是在编译的时候出现的异常，运行时异常就是在运行时出现的异常。</p><p><strong>运行时异常示例</strong></p><ul><li><p>数组索引越界异常: ArrayIndexOutOfBoundsException</p></li><li><p>空指针异常 : NullPointerException，直接输出没有问题，但是调用空指针的变量的功能就会报错。</p></li><li><p>数学操作异常：ArithmeticException</p></li><li><p>类型转换异常：ClassCastException</p></li><li><p>数字转换异常： NumberFormatException</p></li></ul><p><strong>编译时异常：</strong>是担心程序员的技术不行，在编译阶段就爆出一个错误, 目的在于提醒不要出错</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">// 编译时异常示例，使用parse时会出现日期解析异常：ParseExceptionString date = "2015-01-12 10:23:21";SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");Date d = sdf.parse(date);System.out.println(d);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异常的默认处理流程</strong></p><p>①默认会在出现异常的代码那里<font color="Red">自动的创建一个异常对象：ArithmeticException</font></p><p>②异常会从方法中出现的点这里抛出给<font color="Red">调用者</font>，调用者最终抛出给<font color="Red">JVM虚拟机</font></p><p>③虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据</p><p>④直接从当前执行的异常点干掉当前程序</p><p>⑤后续代码没有机会执行了，因为程序已经死亡</p><p><strong>编译时异常的处理形式有三种：</strong></p><ul><li><p>出现异常直接抛出去给调用者，调用者也继续抛出去</p></li><li><p>出现异常自己捕获处理，不麻烦别人</p></li><li><p>前两者结合，出现异常直接抛出去给调用者，调用者捕获处理</p></li></ul><p><strong>异常处理方式1——throws</strong></p><ul><li><p>throws：用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理</p></li><li><p>这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将引起程序死亡</p></li></ul><p><strong>异常处理方式2——try…catch…</strong></p><ul><li><p>监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理。</p></li><li><p>这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 建议格式</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment">// 可能出现异常的代码！</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接打印异常栈信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异常处理方式3——前两者结合</strong></p><ul><li><p>方法直接将异通过throws抛出去给调用者，调用者收到异常后直接捕获处理</p></li><li><p>在开发中按照规范来说第三种方式是最好的：底层的异常抛出去给最外层，最外层集中捕获处理</p></li></ul><p><strong>运行时异常的处理形式</strong></p><ul><li>运行时异常编译阶段不会出错，是运行时才可能出错的，所以编译阶段不处理也可以</li><li>按照规范建议还是处理：建议在最外层调用处集中捕获处理即可</li></ul><p><strong>自定义异常</strong></p><ul><li><p>Java无法为这个世界上全部的问题提供异常类。</p></li><li><p>如果企业想通过异常的方式来管理自己的某个业务问题，就需要自定义异常类了</p></li></ul><p><strong>自定义异常的好处：</strong></p><ul><li><p>可以使用异常的机制管理业务问题，如提醒程序员注意。</p></li><li><p>同时一旦出现bug，可以用异常的形式清晰的指出出错的地方</p></li></ul><p><strong>注意：</strong></p><ul><li>throw：在方法内部直接创建一个异常对象，并从此点抛出</li><li>throws：用在方法申明上的，抛出方法内部的异常</li></ul><p><strong>自定义编译时异常</strong>    </p><ul><li><p>定义一个异常类继承Exception，重写构造器</p></li><li><p>在出现异常的地方用throw new 自定义对象抛出</p></li></ul><p>作用：编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理！！</p><p><strong>自定义运行时异常</strong></p><ul><li><p>定义一个异常类继承RuntimeException，重写构造器</p></li><li><p>在出现异常的地方用throw new 自定义对象抛出</p></li></ul><p>作用：提醒不强烈，编译阶段不报错！！运行时才可能出现！！</p><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p><strong>日志：</strong>用来记录程序运行过程中的信息，并可以永久进行存储。</p><p><strong>日志技术具备的优势</strong></p><ul><li><p>可以将系统执行的信息，方便的记录到指定的位置（控制台、文件中、数据库中）</p></li><li><p>可以随时以开关的形式控制是日志的记录和取消，无需侵入到源代码中去进行修改</p></li></ul><p><strong>体系结构</strong></p><img src="/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/image-20220826095402939.png" class=""><ul><li><p><strong>日志接口：</strong>一些规范，提供给日志的实现框架设计的标准。</p></li><li><p><strong>日志框架：</strong>牛人或者第三方公司已经做好的实现代码，后来者直接可以拿去使用</p></li><li><p>因为对Commons Logging接口不满意，有人就搞了SLF4J。因为对Log4j的性能不满意，有人就搞了Logback</p></li></ul><p><strong>Logback日志框架</strong></p><ul><li>Logback是基于slf4j的日志规范实现的框架，它是由log4j创始人设计的另一个开源日志组件，性能要比log4j要好</li><li>官方网站：<code>https://logback.qos.ch/index.html</code></li></ul><p><strong>Logback主要分为三个技术模块：</strong></p><ul><li><p>logback-core： 该模块为其他两个模块提供基础代码，必须有</p></li><li><p>logback-classic：完整实现了slf4j API的模块，必须有</p></li><li><p>logback-access 模块与 Tomcat 和 Jetty 等 Servlet 容器集成，以提供 HTTP 访问日志功能</p></li></ul><p>注意：想使用Logback日志框架，至少需要在项目中整合三个模块：<code>slf4j-api、logback-core、logback-classic</code></p><p><strong>Logback日志框架实现步骤：</strong></p><p>①：导入Logback框架到项目中去。在项目下新建文件夹lib，导入Logback的jar包到该文件夹下</p><img src="/2022/09/05/bi-ji-ba-yi-chang-chu-li-he-ri-zhi-kuang-jia/image-20220826100730792.png" class=""><p>②：将存放jar文件的lib文件夹添加到项目依赖库中去。</p><p>③：将Logback的核心配置文件logback.xml直接拷贝到src目录下（必须是src下）。</p><p>④：创建Logback框架提供的Logger日志对象，后续使用其方法记录系统的日志信息。<code>public static final Logger LOGGER = LoggerFactory.getLogger(“类名");</code></p><p><strong>Logback配置详解</strong></p><p><strong>Logback日志输出位置、格式设置：</strong></p><ul><li><p>通过logback.xml 中的&lt;append&gt;标签可以设置输出位置。</p></li><li><p>通常可以设置2个日志输出位置：一个是控制台、一个是系统文件中</p></li></ul><p><strong>输出到控制台的配置标志</strong></p><p><code>&lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt;</code></p><p><strong>输出到系统文件的配置标志</strong></p><p><code>&lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;</code></p><p><strong>日志级别</strong></p><ul><li><p>ALL  和 OFF分别是打开、及关闭全部日志信息。</p></li><li><p>除此之外，日志级别还有： TRACE &lt;  DEBUG &lt;  INFO &lt; WARN &lt; ERROR ; 默认级别是DEBUG，对应其方法</p></li><li><p>作用：当在logback.xml文件中设置了某种日志级别后，系统将<font color="Red">只输出当前级别，以及高于当前级别的日志</font></p></li><li><p>具体在&lt;root level=”INFO”&gt;标签的level属性中设置指定系统的日志级别</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记七：Stream流</title>
      <link href="/2022/09/05/bi-ji-qi-stream-liu/"/>
      <url>/2022/09/05/bi-ji-qi-stream-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p><strong>定义：</strong>在Java8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念，它可以<font color="Red">用于简化集合和数组操作的API</font>。</p><p><strong>核心思想：</strong>先得到集合或者数组的Stream流，把元素放上去，然后就用这个Stream流简化的API来方便的操作元素。</p><p><strong>集合获取Stream流的方式：</strong>可以使用Collection接口中的默认方法<code>stream()</code>生成流</p><p><strong>数组获取Stream流的方式：</strong><code>Arrays.stream(arrs)</code>或<code>Stream.of(arrs)</code></p><p><strong>常用API（中间操作方法）</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Stream&lt;T&gt;  filter(Predicate&lt;?  super  T&gt;  predicate)</td><td>用于对流中的数据进行过滤</td></tr><tr><td>Stream&lt;T&gt;  limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream&lt;T&gt;  skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream&lt;T&gt;  distinct()</td><td>去除流中重复的元素。依赖(hashCode和equals方法)</td></tr><tr><td>static &lt;T&gt; Stream&lt;T&gt; concat(Stream  a, Stream b)</td><td>合并a和b两个流为一个流</td></tr></tbody></table><p><strong>注意：</strong>中间方法也称非终结方法，调用完成后返回新的Stream流可以继续使用，支持链式编程。且在Stream流中<font color="Red">无法直接修改集合、数组中的数组。</font></p><p><strong>Stream流的常见终结操作方法</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>void  forEach(Consumer action)</td><td>对此流的每个元素执行遍历操作</td></tr><tr><td>long count()</td><td>返回此流中的元素数</td></tr></tbody></table><p><strong>注意：</strong>终结操作方法，调用完成后流就无法继续使用了，原因是不会返回Stream了。</p><p><strong>Stream流的收集操作</strong></p><p>就是把Stream流操作后的结果数据转回到集合或者数组中去。这样做的原因是Stream是方便操作集合/数组的手段，而集合/数组才是开发中的目的。</p><p><strong>Stream流的收集方法</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>R collect(Collector collector)</td><td>开始收集Stream流，指定收集器</td></tr></tbody></table><p><strong>Collectors工具类提供了具体的收集方式</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>public static &lt;T&gt; Collector toList()</td><td>把元素收集到List集合中</td></tr><tr><td>public static &lt;T&gt; Collector toSet()</td><td>把元素收集到Set集合中</td></tr><tr><td>public static Collector toMap(Function keyMapper  , Function valueMapper)</td><td>把元素收集到Map集合中</td></tr></tbody></table><p><strong>例子：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"周芷若"</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">,</span> <span class="token string">"张超"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以使用以下形式，但生成的是不可变集合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记六：Map集合</title>
      <link href="/2022/08/19/bi-ji-liu-map-ji-he/"/>
      <url>/2022/08/19/bi-ji-liu-map-ji-he/</url>
      
        <content type="html"><![CDATA[<p><strong>定义：</strong>Map集合是一种双列集合，每个元素都包含两个数据。其每个元素的格式：key=value（键值对元素），因此Map集合也被称为“<font color="Red">键值对集合</font>”</p><p><strong>整体格式：</strong></p><ul><li>Collection集合的格式： [元素1,元素2,元素3..]</li><li>Map集合的完整格式：{key1=value1 , key2=value2 , key3=value3 , …}</li></ul><p>**特点： **</p><ul><li><p>Map集合的特点都是由键决定的</p></li><li><p>Map集合的<font color="Red">键</font>是无序，不重复的，无索引的，值不做要求（可以重复）</p></li><li><p>Map集合后面重复的键对应的值会覆盖前面重复键的值</p></li><li><p>Map集合的键值对都可以为null</p></li></ul><p><strong>几个实现类特点：</strong></p><ul><li>HashMap：元素按照键是无序，不重复，无索引，值不做要求，Map集合中使用最多</li><li>LinkedHashMap：元素按照键是<font color="Red">有序</font>，不重复，无索引，值不做要求</li><li>TreeMap：元素按照建是排序，不重复，无索引的，值不做要求。</li></ul><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>V  put(K key,V value)</td><td>添加元素</td></tr><tr><td>V  remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void  clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int  size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><ul><li>方式一：键找值的方式遍历：先获取Map集合全部的键，再根据遍历键找值</li><li>方式二：键值对的方式遍历，把“键值对“看成一个整体，难度较大</li><li>方式三：JDK 1.8开始之后的新技术：Lambda表达式。</li></ul><p><strong>键找值：</strong>先获取Map集合的全部键的Set集合，然后遍历键的Set集合，然后通过键提取对应值。需涉及到的API如下：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>Set&lt;K&gt; keySet()</td><td>获取所有键的集合</td></tr><tr><td>V get(Object key)</td><td>根据键获取值</td></tr></tbody></table><p><strong>键值对：</strong>先把Map集合转换为Set集合，Set集合中每个元素都是键值对实体类型，然后遍历Set集合，提取键以及对应的值。需涉及到的API如下：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>获取所有键值对对象的集合</td></tr><tr><td>K getKey()</td><td>获得键</td></tr><tr><td>V getValue()</td><td>获取值</td></tr></tbody></table><p><strong>Lambda表达式：</strong>简单、直接的遍历集合的方式。使用的API：<code>default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)</code>，结合lambda遍历Map集合</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">maps.forEach((k , v) -&gt; {    System.out.println(k +"-----&gt;" + v);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul><li><p>HashMap是Map里面的一个实现类。特点都是由键决定的：无序、不重复、无索引</p></li><li><p>依赖hashCode方法和equals方法保证键的唯一。</p></li><li><p>如果键要存储的是自定义对象，需要重写hashCode和equals方法</p></li><li><p>HashMap跟HashSet底层原理是一模一样的，都是哈希表结构，只是HashMap的每个元素包含两个值而已</p></li></ul><p>实际上：Set系列集合的底层就是Map实现的，只是Set集合中的元素只要键数据，不要值数据而已</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><ul><li><p>由键决定：有序、不重复、无索引。</p></li><li><p>这里的有序指的是保证存储和取出的元素顺序一致</p></li><li><p>原理：底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序。</p></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>由键决定特性：不重复、无索引、可排序</li><li>可排序：按照键数据的大小默认升序（有小到大）排序。只能对键排序。</li><li>注意：TreeMap集合是一定要排序的，可以默认排序，也可以将键按照指定的规则进行排序</li><li>TreeMap跟TreeSet一样底层原理是一样的。</li></ul><p><strong>自定义排序规则有2种：</strong>①类实现Comparable接口，重写比较规则。②集合自定义Comparator比较器对象，重写比较规则。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记五：Collection集合</title>
      <link href="/2022/08/06/bi-ji-wu-collection-ji-he/"/>
      <url>/2022/08/06/bi-ji-wu-collection-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合包含Collection集合和Map集合，Collection是单列集合，每个元素（数据）只包含一个值。Map是双列集合，每个元素包含两个值（键值对）。这里我们主要掌握<font color="Red">Collection集合体系的使用</font>。</p><h3 id="与数组之间的比较"><a href="#与数组之间的比较" class="headerlink" title="与数组之间的比较"></a>与数组之间的比较</h3><ul><li>不像数组一样，集合的类型和长度都不固定</li><li>适合元素个数不确定，且需要做元素的增删操作的场景</li><li>集合提供的种类特别丰富，功能也是十分强大，开发中集合用的更多</li></ul><h3 id="Collection集合特点"><a href="#Collection集合特点" class="headerlink" title="Collection集合特点"></a>Collection集合特点</h3><ul><li><p><font color="Red">List系列集合</font>：添加的元素是有序、可重复、有索引。</p><ul><li>如ArrayList、LinekdList ：有序、可重复、有索引。</li></ul></li><li><p><font color="Red">Set系列集合</font>：添加的元素是无序、不重复、无索引。</p><ul><li>HashSet: 无序、不重复、无索引</li><li>LinkedHashSet: <font color="Red">有序</font>、不重复、无索引。</li><li>TreeSet：<font color="Red">按照大小默认升序排序</font>、不重复、无索引。</li></ul></li></ul><p><strong>注意：</strong></p><ul><li>集合都是泛型的形式，可以在编译阶段约束集合只能操作某种数据类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JDK 1.7开始后面的泛型类型申明可以省略不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>集合和泛型都只能支持<font color="Red">引用数据类型</font>，不支持基本数据类型，所以集合中存储的元素都认为是对象，如果集合中要存储基本数据类型，就必须使用包装类，也就是基本数据类型对应的引用数据类型</li></ul><h3 id="Collection常用API"><a href="#Collection常用API" class="headerlink" title="Collection常用API"></a>Collection常用API</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  boolean add(E e)</td><td>把给定的对象添加到当前集合中</td></tr><tr><td>public  void clear()</td><td>清空集合中所有的元素</td></tr><tr><td>public  boolean remove(E e)</td><td>把给定的对象在当前集合中删除</td></tr><tr><td>public  boolean contains(Object obj)</td><td>判断当前集合中是否包含给定的对象</td></tr><tr><td>public  boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>public  int size()</td><td>返回集合中元素的个数。</td></tr><tr><td>public  Object[] toArray()</td><td>把集合中的元素，存储到数组中</td></tr></tbody></table><h3 id="Collection集合的遍历方式"><a href="#Collection集合的遍历方式" class="headerlink" title="Collection集合的遍历方式"></a>Collection集合的遍历方式</h3><p>①<font color="Red">迭代器</font>遍历</p><ul><li>遍历就是一个一个的把容器中的元素访问一遍</li><li>迭代器在Java中的代表是<font color="Red">Iterator</font>，迭代器是集合的专用的遍历方式</li></ul><p>获取迭代器：<code>Iterator&lt;\E&gt;  iterator() </code>，  返回集合中的迭代器对象，该迭代器对象默认指向当前集合的0索引  </p><p>Iterator中的常用方法：<code>boolean hasNext()</code>，询问当前位置是否有元素存在，存在返回true ，不存在返回false；<code>E next()</code>，获取当前位置的元素，并同时将迭代器对象移向下一个位置，注意防止取出越界，否则会出现<code>NoSuchElementException</code>异常</p><p>②<font color="Red">增强for循环</font>：既可以遍历集合也可以遍历数组</p><p>使用格式如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">for(元素数据类型 变量名 : 数组或者Collection集合) {         //在此处使用变量即可，该变量就是元素}// 举例：Collection&lt;String&gt; list = new ArrayList&lt;&gt;();...for(String str : list) {    System.out.println(str);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③<font color="Red">Lambda表达式</font>遍历集合</p><p>方法：<code>default void forEach(Consumer&lt;? super T&gt; action): </code>，结合Lambda遍历集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上面可以用Lambda表达式简化为：</span>lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进一步可以简化为： </span>lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Collection集合存储自定义类型的对象"><a href="#Collection集合存储自定义类型的对象" class="headerlink" title="Collection集合存储自定义类型的对象"></a>Collection集合存储自定义类型的对象</h3><p>以一个电影对象为例子，代码如下：</p><p>①定义一个Movie类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> acotr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> <span class="token class-name">String</span> acotr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acotr <span class="token operator">=</span> acotr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ... getter + setter}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②定义一个Movie类型的Collection集合，调用遍历方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Collection</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Movie</span><span class="token punctuation">&gt;</span></span> movies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>“《肖生克的救赎》”<span class="token punctuation">,</span> <span class="token number">9.7</span> <span class="token punctuation">,</span>  “罗宾斯”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>“《霸王别姬》”<span class="token punctuation">,</span> <span class="token number">9.6</span> <span class="token punctuation">,</span>  “张国荣、张丰毅”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span>“《阿甘正传》”<span class="token punctuation">,</span> <span class="token number">9.5</span> <span class="token punctuation">,</span>  “汤姆、汉克斯”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Movie</span> movie <span class="token operator">:</span> movies<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"片名："</span> <span class="token operator">+</span> movie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"评分："</span> <span class="token operator">+</span> movie<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主演："</span> <span class="token operator">+</span> movie<span class="token punctuation">.</span><span class="token function">getAcotr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>定义：</strong>数据结构是<font color="Red">计算机底层存储、组织数据</font>的方式。是指数据相互之间是以什么方式排列在一起的。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率</p><p><strong>常见的数据结构：</strong>栈、队列、数组、链表、二叉树、二叉查找树、平衡二叉树、红黑树……</p><ul><li>队列：先进先出，后进后出</li><li>栈：后进先出，先进后出</li><li>数组：内存连续区域，<font color="Red">查询快，增删慢</font></li><li>链表：元素是游离的，<font color="Red">查询慢，首尾操作极快</font></li><li>二叉树：永远只有一个根节点, 每个结点不超过2个子节点的树</li><li>查找二叉树：<font color="Red">小的左边，大的右边</font>，但是可能树很高，查询性能变差</li><li>平衡查找二叉树：让树的高度差不大于1，增删改查都提高了</li><li>红黑树（就是基于红黑规则实现了自平衡的排序二叉树）</li></ul><h2 id="List系列集合"><a href="#List系列集合" class="headerlink" title="List系列集合"></a>List系列集合</h2><p><strong>特点：</strong>ArrayList、LinekdList ：<font color="Red">有序，可重复，有索引</font></p><ul><li>ArrayList底层是基于<font color="Red">数组</font>实现的，查询元素快，增删相对慢</li><li>LinkedList底层基于<font color="Red">双链表</font>实现的，查询元素慢，增删首尾元素是非常快的</li></ul><p><strong>特有方法：</strong>List集合因为支持索引，所以多了很多<font color="Red">索引操作的独特API</font>，其他Collection的功能List也都继承了</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(int  index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int  index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E  element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int  index)</td><td>返回指定索引处的元素</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>由于List集合存在索引，因此List集合的遍历方式在Collection集合遍历方式的基础上多了<font color="Red">for循环</font></li><li>LinkedList集合由于底层数据结构是双链表，所以多了很多<font color="Red">首尾操作的特有API</font></li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public  void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public  void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public  E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public  E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public  E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public  E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set集合功能上基本与Collection的API一致，它的<font color="Red">特点</font>是添加的元素是无序、不重复、无索引。</p><ul><li>HashSet: 无序、不重复、无索引</li><li>LinkedHashSet: <font color="Red">有序</font>、不重复、无索引，这里的有序指的是保证存储和取出的元素顺序一致</li><li>TreeSet：<font color="Red">按照大小默认升序排序</font>、不重复、无索引</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p><strong>底层原理：</strong>HashSet集合底层采取<font color="Red">哈希表</font>存储的数据，哈希表是一种对于增删改查数据性能都较好的结构。</p><p><strong>哈希表的组成：</strong>JDK8之前的，底层使用<font color="Red">数组+链表</font>组成；JDK8开始后，底层采用<font color="Red">数组+链表+红黑树</font>组成。</p><p>在了解哈希表之前需要先理解哈希值的概念，<strong>哈希值</strong>是JDK根据对象的<font color="Red">地址</font>，按照某种规则算出来的int类型的<font color="Red">数值</font>。对应Object类的API：<code>public int hashCode()</code>，返回对象的哈希值</p><p><strong>对象哈希值的特点：</strong>同一个对象对此调用hashCode()方法返回的哈希值是相同的。默认情况下，不同对象的哈希值是不同的</p><p><strong>哈希表的详细流程：</strong></p><p>①创建一个默认长度16，默认加载因为0.75的数组，数组名table</p><p>② 根据元素的哈希值跟数组的长度计算出应存入的位置（哈希算法）</p><p>③ 判断当前位置是否为null，如果是null直接存入，如果位置不为null，表示有元素， 则调用equals方法比较属性值，如果一样，则不存，如果不一样，则存入数组。</p><p>④ 当数组存满到16*0.75=12时，就自动扩容，每次扩容原先的两倍</p><p><strong>注意：</strong>哈希表是一种对于增删改查数据性能都较好的结构。从JDK8开始后，当链表长度超过<font color="Red">8</font>的时候，自动转换为<font color="Red">红黑树</font>，红黑树的引入进一步提高了操作数据的性能。</p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p><strong>底层原理：</strong>底层数据结构依然是哈希表，只是每个元素又额外多了一个双链表的机制记录存储的顺序</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p><strong>底层原理：</strong>底层是基于<font color="Red">红黑树的数据结构</font>实现排序的，增删改查性能都较好。TreeSet集合是一定要<font color="Red">排序</font>的，可以将元素按照指定的规则进行排序</p><p><strong>默认的规则：</strong></p><ul><li><p>对于数值类型：Integer , Double，官方默认按照大小进行升序排序</p></li><li><p>对于字符串类型：默认按照首字符的编号升序排序</p></li><li><p>对于自定义类型如Student对象，TreeSet无法直接排序。想要存储自定义类型，<font color="Red">必须自己制定排序规则</font></p></li></ul><p>TreeSet集合存储对象的的时候有<font color="Red">2种方式</font>可以设计自定义比较规则</p><p>①让自定义的类实现<font color="Red">Comparable</font>接口重写里面的<code>compareTo</code>方法来定制比较规则</p><p>②TreeSet集合有参数构造器，可以设置<font color="Red">Comparator</font>接口对应的比较器对象，来定制比较规则</p><p>以上两种方式关于返回值的规则如下：</p><ul><li><p>如果认为第一个元素大于第二个元素返回正整数即可。</p></li><li><p>如果认为第一个元素小于第二个元素返回负整数即可。</p></li><li><p>如果认为第一个元素等于第二个元素返回0即可，此时Treeset集合只会<font color="Red">保留一个元素</font>，认为两者重复</p></li><li><p>如果TreeSet集合存储的对象有实现比较规则，集合也自带比较器，默认使用集合自带的比较器排序</p></li></ul><h2 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h2><p><strong>作用：</strong>Collections并不属于集合，是用来操作集合的工具类</p><p><strong>常用API：</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static &lt;T&gt; boolean  addAll(Collection&lt;? super T&gt; c, T… elements)</td><td>给集合对象批量添加元素</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>打乱List集合元素的顺序</td></tr></tbody></table><p><strong>排序相关API：</strong>只能对List集合进行排序</p><ul><li>排序方式1：<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>，将集合中元素按照默认规则排序。该方式不可以直接对<font color="Red">自定义类型的List集合排序</font>，除非自定义类型实现了比较规则Comparable接口</li><li>排序方式2：<code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; c)</code>，将集合中的元素按照指定规则排序</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记四：包装类和Lambda表达式</title>
      <link href="/2022/07/20/bi-ji-si-bao-zhuang-lei-he-lambda-biao-da-shi/"/>
      <url>/2022/07/20/bi-ji-si-bao-zhuang-lei-he-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul><li>Date类代表当前所在系统的日期时间信息</li></ul><p><strong>获取时间毫秒值</strong></p><ul><li><p>无参构造器：<code>public Date()</code>，创建一个Data对象，代表的是系统当前时刻的日期时间</p></li><li><p>调用方法：<code>public long getTime()</code>，返回从<font color="Red">1970年1月1日00:00:00</font>走到此刻的总的毫秒数</p></li></ul><p><strong>时间毫秒值到日期</strong></p><ul><li>有参构造器：<code>public Date(long time)</code>，把时间毫秒值转换成Date日期对象</li><li>使用无参构造器对象的方法：<code>public long setTime()</code>，设置日期对象的时间为当前时间毫秒值对应的时间</li></ul><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><ul><li>代表简单日期格式化，可以用来把日期时间格式化成为我们想要的形式，也可以把字符串的时间形式解析成Date日期对象</li></ul><p><strong>格式化</strong></p><ul><li>构造器：<code>public SimpleDateFormat(String pattern)</code>，创建简单日期格式化对象，并封装格式化的形式信息，对应设置pattern的格式如下</li></ul><p><code>2020-11-11 13:27:06 </code>$\Rightarrow$<code>yyyy-MM-dd HH:mm:ss </code></p><p><code>2020年11月11日 13:27:06 </code>$\Rightarrow$<code>yyyy年MM月dd日 HH:mm:ss </code></p><ul><li>常用方法：①<code>public final String format(Date date)</code>，将日期格式化成日期/时间字符串；②<code>public final String format(Object time)</code>，将时间毫秒值格式化成日期/时间字符串</li></ul><p><strong>解析方法：</strong><code>public Date parse(String source)</code>，从给定字符串的开始解析文本以生成日期，字符串的格式要和定义的pattern相同，否则会报错</p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p><strong>定义：</strong>Calendar代表了系统此刻日期对应的日历对象。Calendar是一个<font color="Red">抽象类</font>，不能直接创建对象。Calendar是可变日期对象，一旦修改后其对象本身表示的时间将产生变化</p><p><strong>创建日历对象的方法：</strong><code>public static Calendar getInstance()--&gt;Calendar cal = Calendar.getInstance()</code>，获取当前日历对象</p><p><strong>常用方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>取日期中的某个字段信息。</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息。</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加/减少指定的值</td></tr><tr><td>public final Date getTime()</td><td>拿到此刻日期对象。</td></tr><tr><td>public long getTimeInMillis()</td><td>拿到此刻时间毫秒值</td></tr></tbody></table><h3 id="JDK8新增日期类"><a href="#JDK8新增日期类" class="headerlink" title="JDK8新增日期类"></a>JDK8新增日期类</h3><p>从<font color="Red">Java 8</font>开始，java.time包提供了新的日期和时间API，主要涉及的类型有以下几个，具体使用请查找Java API文档。</p><img src="/2022/07/20/bi-ji-si-bao-zhuang-lei-he-lambda-biao-da-shi/image-20220720104711148.png" class=""><p>新增的API严格区分了时刻、本地日期、本地时间，并且，对日期和时间进行运算更加方便。其次，新API的类型几乎全部是不变类型（和String的使用类似），可以放心使用不必担心被修改。</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p><strong>定义：</strong>包装类其实就是8种基本数据类型对应的引用数据类型</p><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p><strong>提供包装类的原因：</strong></p><ul><li><p>Java为了实现一切皆对象，为8种基本类型提供了对应的引用类型</p></li><li><p>后面的<font color="Red">集合和泛型</font>其实也只能支持包装类型，不支持基本数据类型</p></li></ul><p><strong>自动装箱：</strong>基本类型的数据和变量可以直接赋值给包装类型的变量</p><p><strong>自动拆箱：</strong>包装类型的变量可以直接赋值给基本数据类型的变量</p><p><strong>包装类特有功能：</strong>①包装类的变量的默认值可以是<font color="Red">null</font>，容错率更高。②可以把基本类型的数据转换成字符串类型(用处不大)。③可以把字符串类型的数值转换成真实的数据类型</p><ul><li><strong>方法：</strong>调用<code>toString()</code>方法得到字符串结果，也调用<code>Integer.toString(基本类型的数据)</code>；调用<code>Integer.parseInt()</code>得到“字符串类型的整数”；调用<code>Double.parseDouble()</code>得到“字符串类型的小数”。</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>作用：</strong>可以用一些规定的字符来制定规则，并用来校验数据格式的合法性</p><p><strong>字符串对象提供了匹配正则表达式的方法：</strong><code>public boolean matches(String regex)</code>，判断是否匹配正则表达式，匹配返回true，不匹配返回false</p><p><strong>语法：</strong>这里就列举一些常用的，具体可以查看<a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html">API文档</a></p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>只能是a, b, 或c</td></tr><tr><td>[^abc]</td><td>除了a, b, c之外的任何字符</td></tr><tr><td>[a-zA-Z]</td><td>a到z A到Z，包括（范围）</td></tr><tr><td>[a-d[m-p]]</td><td>a到d，或m通过p：（[a-dm-p]联合）</td></tr><tr><td>[a-z&amp;&amp;[def]]</td><td>d, e, 或f(交集)</td></tr><tr><td>[a-z&amp;&amp;[^bc]]</td><td>a到z，除了b和c</td></tr><tr><td>.</td><td>任何字符</td></tr><tr><td>\d</td><td>一个数字：[0-9]</td></tr><tr><td>\D</td><td>非数字：[^0-9]</td></tr><tr><td>\s</td><td>一个空白字符：[ \t\n\x0B\f\r]</td></tr><tr><td>\S</td><td>非空白字符：[^\s]</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9] 英文、数字、下划线</td></tr><tr><td>\W</td><td>[^\w] 一个非单词字符</td></tr><tr><td>X?</td><td>X , 一次或根本不</td></tr><tr><td>X*</td><td>X，零次或多次</td></tr><tr><td>X+</td><td>X , 一次或多次</td></tr><tr><td>X {n}</td><td>X，正好n次</td></tr><tr><td>X {n, }</td><td>X，至少n次</td></tr><tr><td>X {n,m}</td><td>X，至少n但不超过m次</td></tr></tbody></table><p><strong>如：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println("a".matches("[abc]"));    // trueSystem.out.println("z".matches("[abc]"));    // falseSystem.out.println("ab".matches("[abc]"));   // falseSystem.out.println("ab".matches("[abc]+"));  // true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正则表达式在字符串方法中的使用：</strong></p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public String replaceAll(String regex,String newStr)</td><td align="left">按照正则表达式匹配的内容进行替换</td></tr><tr><td align="left">public String[] split(String regex)：</td><td align="left">按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组</td></tr></tbody></table><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p><strong>定义：</strong><font color="Red">数组操作工具类</font>，专门用于操作数组元素的</p><p><strong>Arrays类的常用API：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(类型[] a)</td><td>返回数组的内容（字符串形式）</td></tr><tr><td>public  static void sort(类型[] a)</td><td>对数组进行默认升序排序</td></tr><tr><td>public  static &lt;T&gt; void sort(类型[] a, Comparator&lt;?  super T&gt; c)</td><td>使用比较器对象自定义排序</td></tr><tr><td>public  static int binarySearch(int[] a,  int key)</td><td>二分搜索数组中的数据，存在返回索引，不存在返回-1，使用该方法数组需先排好序</td></tr></tbody></table><p><strong>自定义排序规则：</strong>设置Comparator接口对应的比较器对象，来定制比较规则</p><ul><li><p>如果认为左边数据 大于 右边数据 返回正整数</p></li><li><p>如果认为左边数据 小于 右边数据 返回负整数</p></li><li><p>如果认为左边数据 等于 右边数据 返回0</p></li></ul><h2 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>思想：</strong>每次依次从数组第一个位置开始比较，若当前位置大于后一个位置则交换数据，依次进行到后面，这样每次结束后都将最大值放到数组的后面去。</p><p><strong>规则：</strong>假定数组长度为n</p><ul><li>总共需要做多少轮：n-1</li><li>比较的总次数：$(n-1)+(n-2)+…+1=\frac{n(n-1)}{2}$</li></ul><img src="/2022/07/20/bi-ji-si-bao-zhuang-lei-he-lambda-biao-da-shi/image-20220720152813271.png" class=""><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>思想：</strong>每轮选择当前位置，开始找出后面的更小值与该位置交换</p><p><strong>规则：</strong>假定数组长度为n</p><ul><li>总共需要做多少轮：n-1</li><li>控制每轮从以前位置为基准，与后面元素选择几次</li></ul><img src="/2022/07/20/bi-ji-si-bao-zhuang-lei-he-lambda-biao-da-shi/image-20220720152832927.png" class=""><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><strong>需求：</strong>用于数组元素的基本查询，查询数组中的元素在哪个索引</p><p><strong>规则：</strong></p><ul><li>二分查找性能好，二分查找的前提是必须是排好序的数据</li><li>二分查找相当于每次去掉一半的查找范围</li></ul><p><strong>实现步骤：</strong></p><ul><li><p>定义变量记录左边和右边位置。</p></li><li><p>使用while循环控制查询（条件是左边位置&lt;=右边位置）</p></li><li><p>循环内部获取中间元素索引</p></li><li><p>判断当前要找的元素如果大于中间元素，左边位置=中间索引+1</p></li><li><p>判断当前要找的元素如果小于中间元素，右边位置=中间索引-1</p></li><li><p>判断当前要找的元素如果等于中间元素，返回当前中间元素索引</p></li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><strong>定义：</strong>Lambda表达式是JDK 8开始后的一种新语法形式</p><p><strong>作用：</strong>简化匿名内部类的代码写法</p><p><strong>简化格式：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">(匿名内部类被重写方法的形参列表) -&gt; {    被重写方法的方法体代码;}// 注：-&gt; 是语法形式，无实际含义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>Lambda表达式只能简化<font color="Red">函数式接口的匿名内部类的写法形式</font></p><p><strong>函数式接口：</strong>首先必须是<font color="Red">接口</font>，其次接口中有且仅有<font color="Red">一个抽象方法</font>的形式</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class LambdaDemo1 {    public static void main(String[] args) {                goSwimming( new Swimming() {            @Override            public void swim() {                System.out.println("铁汁, 我们去游泳吧~");            }        } );    }    public static void goSwimming(Swimming swimming) {        swimming.swim();    }}// 使用Lambda表达式之后，可以看出代码更少，关注点更加明确了public class LambdaDemo1 {    public static void main(String[] args) {                goSwimming( () -&gt; {System.out.println("铁汁, 我们去游泳吧~")         } );            }    public static void goSwimming(Swimming swimming) {        swimming.swim();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进一步在Lambda表达式的基础上继续简化：</strong></p><ul><li><p><font color="Red">参数类型</font>可以省略不写。</p></li><li><p>如果只有一个参数，参数类型可以省略，同时()也可以省略。</p></li><li><p>如果Lambda表达式的方法体代码只有<font color="Red">一行代码</font>。可以省略大括号不写,同时要省略分号！</p></li><li><p>如果Lambda表达式的方法体代码只有<font color="Red">一行代码</font>。可以省略大括号不写。此时，如果这行代码是return语句，必须省略return不写，同时也必须省略”;”不写</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记三：接口和内部类</title>
      <link href="/2022/07/20/bi-ji-san-jie-kou-he-nei-bu-lei/"/>
      <url>/2022/07/20/bi-ji-san-jie-kou-he-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>定义：</strong>接口其实就是代码的一种规范。JDK8之前接口中只能是抽象方法和常量，没有其他成分了。接口不能实例化，接口中的成员都是public修饰，写不写都是，因为规范的目的是为了公开化。</p><p><strong>格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口用关键字interface来定义</span><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名 <span class="token punctuation">{</span>       <span class="token comment">// 常量</span>       <span class="token comment">// 抽象方法</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用法：</strong>接口是用来被类实现（<code>implements</code>）的，实现接口的类称为<font color="Red">实现类</font>。实现类可以理解成所谓的子类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现的关键字：implements</span>修饰符 <span class="token keyword">class</span> 实现类 <span class="token keyword">implements</span> 接口<span class="token number">1</span><span class="token punctuation">,</span> 接口<span class="token number">2</span><span class="token punctuation">,</span> 接口<span class="token number">3</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>    <span class="token comment">// 重写抽象方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从上面可以看出，接口可以被类单实现，也可以被类多实现，<font color="Red">接口不能创建对象</font></li></ul><p><strong>类、接口之间的关系：</strong></p><ul><li>类和类之间的关系：单继承</li><li>类和接口之间的关系：多实现</li><li><font color="Red">接口和接口之间的关系：多继承，一个接口可以同时继承多个接口</font></li></ul><p><strong>接口多继承的作用：</strong>规范合并，整合多个接口为同一个接口，便于子类实现</p><p><strong>JDK8开始接口新增的方法</strong></p><p><strong>作用：</strong>防止项目开发时需要对接口丰富，加入新的抽象方法。此时若没有新增的方法就要所有实现类实现这些方法，而引入新增的方法可以在丰富接口功能的同时又不对子类代码进行更改。</p><p><strong>默认方法</strong>：类似之前写的普通<font color="Red">实例方法</font>：必须用default修饰。默认会用public修饰，<font color="Red">需要用接口实现类的对象来调用</font></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">default void run(){    System.out.println("--开始跑--");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>静态方法：</strong>默认会public修饰，必须static修饰。<font color="Red">接口的静态方法必须用本身的接口名来调用</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们在学习Java!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>私有方法：</strong>私有的实例方法，必须用private修饰，从<font color="Red">JDK 1.9才开始有的</font>，只能<font color="Red">接口中</font>被其他默认方法或者私有方法访问。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void go(){    System.out.println("--准备--");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JDK8新增的3种方法我们自己在开发中很少使用，通常是<font color="Red">Java源码</font>涉及到的，我们需要理解、识别语法、明白调用关系即可</p><p><strong>注意事项：</strong></p><ul><li>一个类实现接口，必须<font color="Red">重写</font>完全部接口的全部抽象方法，否则这个类需要定义成抽象类</li><li>一个类实现多个接口，多个接口的规范不能冲突</li><li>一个类实现多个接口，多个接口中有同样的静态方法不冲突。</li><li>一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用<font color="Red">父类</font>的。</li><li>一个类实现了多个接口，多个接口中存在同名的默认方法，可以不冲突，这个类重写该方法即可。</li><li>一个接口继承多个接口，是没有问题的，如果多个接口中存在<font color="Red">规范冲突</font>则不能多继承。</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><strong>定义：</strong>内部类就是定义在一个类里面的类，里面的类可以理解成”寄生“，外部类可以理解成”宿主“</p><p><strong>使用场景：</strong>当一个事物的内部还有一个部分需要一个完整的结构进行描述时</p><p><strong>基本作用：</strong></p><ul><li><p>内部类通常可以方便访问外部类的成员，包括私有的成员。</p></li><li><p>内部类提供了更好的封装性，内部类本身就可以用private ，protectecd等修饰，封装性可以做更多控制</p></li></ul><p><strong>类别：</strong>静态内部类、成员内部类、局部内部类、<font color="Red">匿名内部类（重点）</font></p><p><strong>静态内部类</strong></p><p><strong>定义：</strong>有static修饰，属于外部类本身。它的特点和使用与普通类是完全一样的，类有的成分他都有，只是位置在别人里面而已。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Outer{        // 静态成员内部类    public static class Inner{    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建对象的格式：</strong><code>外部类名.内部类名 对象名 = new 外部类名.内部类构造器();</code>如：<code>Outer.Inner in =  new Outer.Inner();</code></p><p><strong>注意：</strong></p><ul><li>静态内部类中<font color="Red">可以直接</font>访问外部类的静态成员，因为外部类的静态成员只有一份可以被共享访问。</li><li>但<font color="Red">不能直接访问外部类的实例成员</font>，因为外部类的实例成员必须用外部类的对象访问</li></ul><p><strong>成员内部类</strong></p><p><strong>定义：</strong>无static修饰，属于外部类的对象。JDK16之前，成员内部类中不能定义静态成员，JDK16开始也可以定义静态成员了。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Outer {    // 成员内部类    public class Inner {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建对象的格式：<code>外部类名.内部类名 对象名 = new 外部类构造器.new 内部类构造器();</code>如：<code>Outer.Inner in =  new Outer().new Inner();</code></p><p><strong>注意：</strong></p><ul><li>成员内部类中<font color="Red">可以直接</font>访问外部类的静态成员，因为外部类的静态成员只有一份可以被共享访问。</li><li>成员内部类的实例方法中<font color="Red">也可以直接</font>访问外部类的实例成员，因为成员内部类必须先有外部类对象，才能有成员内部类对象，因此能访问。</li><li>在成员内部类中访问所在外部类对象，格式：<code>外部类名.this</code>，<font color="Red">如下面代码</font></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> heartbeat <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> heartbeat <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> heartbeat <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 78</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heartbeat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 110</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>heartbeat<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 150</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>局部内部类：</strong>放在<font color="Red">方法、代码块、构造器等</font>执行体中。局部内部类的类文件名为：<code>外部类$N内部类.class</code></p><p><font color="Red"><strong>匿名内部类（重点）</strong></font></p><p><strong>定义：</strong>本质上是一个没有名字的局部内部类。</p><p><strong>作用：</strong>方便创建子类对象，最终目的是为了<font color="Red">简化代码编写</font></p><p><strong>格式：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">new 类|抽象类名|或者接口名() {    重写方法;};// 如：Employee a = new Employee() {    public void work() {    }};a. work();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ul><li><p>匿名内部类是一个没有名字的内部类，同时也代表一个<font color="Red">对象</font></p></li><li><p>匿名内部类产生的对象 类型，相当于是当前new类型的子类类型</p></li><li><p>匿名内部类通常是在开发中<font color="Red">调用别人的方法时，别人需要我们写的时候</font>才会定义出来使用</p></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><strong>定义：</strong>API的全称是Application Programming Interface，应用程序编程接口。其实就是Java写好的功能代码，可以直接调用</p><p><strong>Object类</strong></p><ul><li><p>一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的<font color="Red">祖宗类</font></p></li><li><p>Object作为所有类的父类，提供了很多常用的方法给每个子类对象拿来使用</p></li></ul><p><strong>常用方法：</strong></p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public String toString()</td><td align="left">默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</td></tr><tr><td align="left">public boolean equals(Object o)</td><td align="left">默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>父类toString()方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息</li><li>父类equals()方法存在的意义也是为了被子类重写，以便子类自己来定制比较规则（如比较对象内容）</li></ul><p><strong>Objects</strong></p><ul><li>Objects是一个工具类，提供了一些方法去完成一些功能</li></ul><p><strong>常用方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public  static boolean equals(Object a,  Object b)</td><td>比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行equals比较</td></tr><tr><td>public  static boolean isNull(Object obj)</td><td>判断变量是否为null  ,为null返回true  ,反之</td></tr></tbody></table><p><strong>注意：</strong>官方在进行字符串比较时，没有用字符串对象的的equals方法，而是选择了Objects的equals方法来比较，因为<font color="Red">使用Objects的equals方法在进行对象的比较会更安全。</font></p><p><strong>StringBuilder</strong></p><ul><li>StringBuilder是一个可变的字符串的操作类，我们可以把它看成是一个对象容器</li><li>使用StringBuilder的核心作用：操作字符串的性能比String要更高（如拼接、修改等）</li><li>最终要用<code>toString()</code>方法转为String类型</li></ul><p><strong>构造器</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>public  StringBuilder()</td><td>创建一个空白的可变的字符串对象，不包含任何内容</td></tr><tr><td>public  StringBuilder(String str)</td><td>创建一个指定字符串内容的可变字符串对象</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据并返回StringBuilder对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>将对象的内容反转</td></tr><tr><td>public int length()</td><td>返回对象内容长度</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转换为String</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记二：包和多态</title>
      <link href="/2022/07/18/bi-ji-er-bao-he-duo-tai/"/>
      <url>/2022/07/18/bi-ji-er-bao-he-duo-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p><strong>定义：</strong>包是用来分门别类的管理各种不同类的，类似于文件夹、建包利于程序的管理和维护。</p><ul><li><p>建包的语法格式：<code>package 公司域名倒写.技术名称</code>。包名建议全部英文小写，且具备意义</p></li><li><p>建包语句必须在第一行，一般IDEA工具会帮助创建</p></li><li><p>相同包下的类可以直接访问，不同包下的类必须导包，才可以使用！导包格式：<code>import 包名.类名</code>;</p></li><li><p>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问。</p></li></ul><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><strong>定义：</strong>是用来控制一个成员能够被访问的范围。可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制。</p><p><strong>分类和具体作用范围：</strong></p><table><thead><tr><th align="center"><strong>修饰符</strong></th><th align="center"><strong>同一 个类中</strong></th><th align="center"><strong>同一个包中其他类</strong></th><th align="center"><strong>不同包下的子类</strong></th><th align="center"><strong>不同包下的无关类</strong></th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">缺省</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p><strong>自己定义成员（方法，成员变量，构造器等）一般需要满足如下要求：</strong></p><ul><li><p>成员变量一般私有，方法一般公开。</p></li><li><p>如果该成员只希望本类访问，使用private修饰。</p></li><li><p>如果该成员只希望本类，同一个包下的其他类和子类访问，使用protected修饰。</p></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><strong>作用：</strong></p><ul><li><p>final 关键字是最终的意思，可以修饰类、方法、变量。</p></li><li><p>修饰类：表明该类是最终类，<font color="Red">不能被继承</font>。</p></li><li><p>修饰方法：表明该方法是最终方法，<font color="Red">不能被重写</font>。</p></li><li><p>修饰变量：表示该变量第一次赋值后，<font color="Red">不能再次被赋值</font>(有且仅能被赋值一次)。</p></li></ul><p><strong>修饰变量需注意：</strong></p><ul><li>final修饰的变量是基本类型：那么变量存储的<font color="Red">数据值</font>不能发生改变。</li><li>final修饰的变量是引用类型：那么变量存储的<font color="Red">地址值</font>不能发生改变，但是地址指向的对象内容是可以发生变化的。</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>定义：</strong>常量是使用了<code>public static final</code>修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变</p><p><strong>命名规范：</strong>英文单词全部大写，多个单词下划线连接起来</p><p><strong>作用：</strong><font color="Red">通常用来记录系统的配置数据</font></p><p><strong>常量做信息配置的原理、优势</strong></p><ul><li><p>在编译阶段会进行“宏替换”：把使用常量的地方全部替换成真实的字面量。</p></li><li><p>维护系统容易，可读性更好。</p></li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举是Java中的一种特殊类型</p><p><strong>作用：</strong>是为了做信息的标志和信息的分类</p><p><strong>格式：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">修饰符 enum 枚举名称{第一行都是罗列枚举类实例的名称;}// 如：enum Season{    SPRING, SUMMER, AUTUMN, WINTER;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反编译后枚举的特征：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Compiled from "Season.java"public final class Season extends java.lang.Enum&lt;Season&gt; {    public static final Season SPRING = new Season();    public static final Season SUMMER = new Season();    public static final Season AUTUMN = new Season();    public static final Season WINTER = new Season();    public static Season[] values();    public static Season valueOf(java.lang.String);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特征：</strong></p><ul><li><p>枚举类都是继承了枚举类型：java.lang.Enum</p></li><li><p>枚举都是最终类，不可以被继承</p></li><li><p>构造器都是私有的，枚举对外不能创建对象</p></li><li><p>枚举类的第一行默认都是罗列枚举对象的名称的</p></li><li><p>枚举类相当于是多例模式</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>定义：</strong>在Java中abstract是抽象的意思，可以修饰类、成员方法。<font color="Red">abstract</font>修饰类，这个类就是抽象类；修饰方法，这个方法就是抽象方法。</p><p><strong>格式：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">修饰符 abstract class 类名{ 修饰符 abstract 返回值类型 方法名称(形参列表);}//如：public abstract class Animal{    public abstract void run();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><ul><li><p>抽象方法只有方法签名，不能声明方法体。</p></li><li><p>一个类中如果定义了抽象方法，这个类必须声明成抽象类，否则报错</p></li></ul><p><strong>使用场景：</strong></p><ul><li><p>抽象类可以理解成不完整的设计图，一般作为父类，让子类来继承。</p></li><li><p>当父类知道子类一定要完成某些行为，但是<font color="Red">每个子类该行为的实现又不同</font>，于是该父类就把该行为定义成抽象方法的形式，具体实现交给子类去完成。此时这个类就可以声明成抽象类。</p></li></ul><p><strong>特征：</strong></p><ul><li><p>类有的成员（成员变量、方法、构造器）抽象类都具备</p></li><li><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p></li><li><p>一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</p></li><li><p>不能用abstract修饰<font color="Red">变量、代码块、构造器</font>。</p></li><li><p><strong>最重要的特征：</strong>得到了抽象方法，失去了创建对象的能力</p></li></ul><p><strong>与final间：</strong></p><ul><li><p>abstract定义的抽象类作为模板让子类继承，final定义的类不能被继承。</p></li><li><p>抽象方法定义通用功能让子类重写，final定义的方法子类不能重写</p></li></ul><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><strong>使用场景：</strong>当系统中出现同一功能多处在开发，而该功能中大部分代码是一样的，只有其中部分可能不同的时候</p><p><strong>实现步骤：</strong></p><p>①定义一个抽象类</p><p>②定义2个方法，一个是模板方法：把相同代码放里面去，不同代码定义成抽象方法</p><p>③子类继承抽象类，重写抽象方法。</p><p><strong>使用final修饰会更专业的原因：</strong></p><p>模板方法是给子类直接使用的，不是让子类重写的，一旦子类重写了模板方法，则模板方法就失效了，因此，加上final后可以防止子类重写了模板方法，这样更安全、专业。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>定义：</strong>指对象可以有多种形态</p><p><strong>形式：</strong><code>父类类型 对象名称 = new 子类构造器;</code></p><p><strong>多态中成员访问特点：</strong></p><ul><li><p>方法调用：编译看左边，运行看右边。</p></li><li><p>变量调用：编译看左边，运行也看<font color="Red">左边</font>。</p></li></ul><p><strong>多态的前提：</strong>有继承/实现关系；有父类引用指向子类对象；<font color="Red">有方法重写</font>。</p><p><strong>优势：</strong></p><ul><li>在多态形式下，右边对象可以实现解耦合，便于扩展和维护</li><li>定义方法的时候，使用父类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展性与便利</li></ul><p><strong>劣势：</strong>多态下不能使用子类的独有功能</p><p><strong>类型转换问题：</strong></p><p>自动类型转换：从子到父，如：<code>Animal c = new Cat();</code></p><p>强制类型转换：从父到子，必须使用强制类型转换：<code>子类 对象变量 = (子类)父类类型的变量;</code></p><ul><li><strong>作用：</strong>可以解决多态下的劣势，可以实现调用子类独有的功能</li><li><strong>注意：</strong>有继承/实现关系的类就可以在编译阶段进行强制类型转换；但是，如果转型后的类型和对象真实对象的类型不是同一种类型，那么在运行代码时，就会出现ClassCastException，如：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span> <span class="token comment">// 出现异常 ClassCastException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><font color="Red">Java建议强转转换前使用<code>instanceof</code>判断当前对象的真实类型，再进行强制转换</font></li></ul><p>如：<code>变量名 instanceof 真实类型</code>，判断关键字左边的变量指向的对象的真实类型，是否是<font color="Red">右边的类型或者是其子类类型</font>，是则返回true，反之返回false。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记一：static和继承</title>
      <link href="/2022/07/14/bi-ji-yi-static-he-ji-cheng/"/>
      <url>/2022/07/14/bi-ji-yi-static-he-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="static静态关键字"><a href="#static静态关键字" class="headerlink" title="static静态关键字"></a>static静态关键字</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ul><li>static是静态的意思，可以修饰成员变量和成员方法</li><li>static修饰成员变量之后称为静态成员变量（类变量），修饰方法之后称为静态方法（类方法）</li><li>static修饰后的成员变量，可以<font color="Red">被类的所有对象共享</font>（访问、修改)。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员变量的分类：</strong></p><ul><li>静态成员变量（有static修饰，属于类，内存中加载一次）：常表示如在线人数信息等需要被共享的信息，可以被共享访问</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token comment">// 静态成员变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> onlineNumber <span class="token operator">=</span> <span class="token number">161</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问方式：①类名.静态成员变量（<font color="Red">推荐</font>） ②对象．静态成员变量（不推荐）</p><ul><li>实例成员变量（无static修饰，存在于每个对象中）：常表示姓名、年龄等属于每个对象的信息</li></ul><p>访问方式：对象.实例成员变量</p><p><strong>成员方法的分类：</strong></p><ul><li>静态成员方法（有static修饰，归属于类），<font color="Red">建议</font>用类名访问，也可以用对象访问</li><li>实例成员方法（无static修饰，归属于对象），只能用对象触发访问</li></ul><p><strong>注意：</strong></p><ul><li>同一个类中，访问静态变量和静态方法，类名可以<font color="Red">省略</font>不写</li><li>静态方法只能访问静态成员，不能直接访问实例成员</li><li>实例方法可以访问静态成员，也可以访问实例成员</li><li>静态方法不可以出现<font color="Red">this</font>关键字，this只能代表当前对象</li></ul><p><strong>两种方法的使用场景：</strong></p><ul><li>表示对象自己的行为的，且方法中需要访问实例成员的，则该方法必须申明成实例方法</li><li>如果该方法是以执行一个共用功能为目的，则可以申明成静态方法</li></ul><h3 id="static工具类"><a href="#static工具类" class="headerlink" title="static工具类"></a>static工具类</h3><p><strong>定义：</strong>类中都是一些静态方法，每个方法都是以完成一个共用的功能为目的，这个类用来给系统开发人员共同使用的。</p><p><strong>优点：</strong>使用工具类使得调用方便，还提高了代码复用。</p><ul><li><font color="Red">工具类的方法不用实例方法做</font>，这是因为实例方法需要创建对象调用，而工具类只是为了调用方法，创建对象只会浪费内存</li></ul><p><strong>要求：</strong>由于工具里面都是静态方法，直接用类名即可访问，因此，工具类无需创建对象，建议<font color="Red">将工具类的构造器进行私有</font></p><h3 id="static代码块"><a href="#static代码块" class="headerlink" title="static代码块"></a>static代码块</h3><p><strong>定义：</strong>代码块是类的5大成分之一（成员变量、构造器，方法，代码块，内部类），定义在类中方法外。在Java类下，使用 { } 括起来的代码被称为代码块 。</p><p><strong>分类：</strong></p><p><strong>①静态代码块：</strong></p><ul><li>格式：<code>static{}</code></li><li>特点：需要通过static关键字修饰，随着<font color="Red">类</font>的加载而加载，并且自动触发、只执行一次</li><li>使用场景：在类加载的时候做一些静态数据初始化的操作，以便后续使用。</li></ul><p><strong>②构造代码块（少见）：</strong></p><ul><li>格式：<code>{}</code></li><li>特点：每次创建对象，调用<font color="Red">构造器</font>执行时，都会执行该代码块中的代码，并且在构造器执行前执行</li><li>使用场景：初始化实例资源</li></ul><h3 id="static单例设计模式"><a href="#static单例设计模式" class="headerlink" title="static单例设计模式"></a>static单例设计模式</h3><p><strong>什么是设计模式（Design pattern）</strong></p><ul><li>开发中经常遇到一些问题，一个问题通常有n种解法的，但其中肯定有一种解法是最优的，这个最优的解法被人总结出来了，称之为设计模式</li><li>设计模式有20多种，对应20多种软件开发中会遇到的问题</li><li>学设计模式主要是学2点：①这种模式用来解决什么问题；②遇到这种问题了，该模式是怎么写的，他是如何解决这个问题的</li></ul><p><strong>单例模式</strong>：可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间。</p><ul><li><strong>分类：</strong>单例模式分为饿汉单例设计模式和懒汉单例设计模式</li></ul><p><strong>饿汉单例设计模式：</strong>在用类获取对象的时候，对象已经提前为你创建好了</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** a、定义一个单例类 */public class SingleInstance {      /** c.定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */    public static SingleInstance instance = new SingleInstance ();        /** b.单例必须私有构造器*/    private SingleInstance (){        System.out.println("创建了一个对象");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>懒汉单例设计模式：</strong>在真正需要该对象的时候，才去创建一个对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** 定义一个单例类 */class SingleInstance{    /** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */    public static SingleInstance instance ; // null        /** 单例必须私有构造器*/    private SingleInstance(){}        /** 必须提供一个方法返回一个单例对象  */    public static SingleInstance getInstance(){        if(instance == null){            instance = new SingleInstance();        }        return instance;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><p><strong>定义：</strong>Java中提供了一个关键词<font color="Red">extends</font>，用这个关键字，我们可以让一个类和另一个类建立起父子关系，如：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Student extends People {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码中Student称为子类（派生类），People称为父类（基类）。这样书写的话，子类就可以直接使用父类公共的属性和方法，提高了代码的复用性。</p><p><strong>继承设计规范：</strong>子类们相同特征（共性属性，共性方法）放在父类中定义，子类独有的的属性和行为应该定义在子类自己里面。</p><p><strong>继承的特点：</strong></p><ul><li>子类可以继承父类的属性和行为，但是子类不能继承父类的构造器</li><li>Java是单继承模式：一个类只能继承一个直接父类</li><li>Java不支持多继承、但是支持多层继承</li><li>Java中所有的类都是Object类的子类</li></ul><p>在子类方法中访问成员满足：<font color="Red">就近原则</font>，即先子类局部范围找，再在子类成员范围找，最后在父类成员范围找，如果父类范围还没有找到则报错。</p><p>可以通过<font color="Red">super</font>关键字，指定访问父类的成员，格式：<code>super.父类成员变量/父类成员方法</code></p><h3 id="继承后方法重写"><a href="#继承后方法重写" class="headerlink" title="继承后方法重写"></a>继承后方法重写</h3><p><strong>定义</strong>：在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法</p><p><strong>应用场景：</strong></p><ul><li>当子类需要父类的功能，但父类的该功能不完全满足自己的需求时</li><li>子类可以重写父类中的方法<code>super.父类成员方法</code></li></ul><p><strong>Override重写注释</strong></p><ul><li>@Override是放在重写后的方法上，作为重写是否正确的校验注解</li><li>加上该注解后如果重写错误，编译阶段会出现错误提示</li><li>建议重写方法都加<font color="Red">@Override</font>注解，代码安全，优雅！</li></ul><p><strong>方法重写注意事项和要求</strong></p><ul><li>重写方法的名称、形参列表必须与被重写方法的名称和参数列表<font color="Red">一致</font></li><li><font color="Red">私有方法以及静态方法</font>不能被重写</li><li>子类重写父类方法时，访问权限必须大于或者等于父类 （暂时了解 ：缺省 &lt; protected &lt; public）</li></ul><h3 id="继承后子类构造器的特点"><a href="#继承后子类构造器的特点" class="headerlink" title="继承后子类构造器的特点"></a>继承后子类构造器的特点</h3><p>子类中所有的构造器默认都会先访问父类中无参的构造器，再执行自己。这是因为:</p><ul><li>子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据</li><li>子类初始化之前，一定要调用父类构造器先完成父类数据空间的初始化</li><li>在代码中，子类构造器的第一行语句默认都是：<code>super()</code>，不写也存在</li></ul><p><strong><code>super</code>调用父类有参数构造器的作用</strong>：初始化继承自父类的数据</p><ul><li><p>如果父类中没有无参数构造器，只有有参构造器，会报错，这是因为子类默认的是调用父类无参构造器。</p></li><li><p>子类构造器中可以通过书写<code>super(...)</code>，自动调用父类的有参数构造器</p></li></ul><h3 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h3><ul><li>this代表本类对象的引用；super代表父类存储空间的标识</li></ul><table><thead><tr><th><strong>关键字</strong></th><th><strong>访问成员变量</strong></th><th><strong>访问成员方法</strong></th><th><strong>访问构造方法</strong></th></tr></thead><tbody><tr><td><strong>this</strong></td><td>this.成员变量  访问本类成员变量</td><td>this.成员方法(…)  访问本类成员方法</td><td>this(…) 访问本类构造器</td></tr><tr><td><strong>super</strong></td><td>super.成员变量  访问父类成员变量</td><td>super.成员方法(…)  访问父类成员方法</td><td>super(…)  访问父类构造器</td></tr></tbody></table><p><strong>使用注意点：</strong></p><ul><li>子类通过 this (…）去调用本类的其他构造器，本类其他构造器会通过 super 去手动调用父类的构造器，最终还是会调用父类构造器的</li><li>注意：this(…) super(…) 都只能放在构造器的<code>第一行</code>，所以二者不能共存在同一个构造器中</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGAN_GP</title>
      <link href="/2022/07/14/wgan-gp/"/>
      <url>/2022/07/14/wgan-gp/</url>
      
        <content type="html"><![CDATA[<img src="/2022/07/14/wgan-gp/image-20220714084905587-16577679352952.png" class=""><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GAN是强大的生成模型，但是以难训练著称。前面一篇文章讲到的 WGAN 提升了 GAN 训练的稳定性，但有时候还是会产生不好的样本或收敛失败。在原始 WGAN 论文中，作者也提到了，这些问题主要是在判别器中使用 weight clipping 技术来实现 Lipschitz 限制导致的，特别是当超参数 c 没有设置合适。</p><p>$$w\leftarrow clip(w,-c,c)$$</p><p>WGAN 模型的性能对超参数 c 特别敏感。下图中，当判别器中没有使用批量标准化，c 从0.001增加到0.1，判别器从梯度消失转为梯度爆炸。</p><img src="/2022/07/14/wgan-gp/image-20220714091239852-16577679352953.png" class=""><p>同时作者还证明了 weight clipping 降低了模型的表现能力并且限制了模型模拟复杂函数的能力。在下面的实验中，第一行是由 WGAN 估计的判别器值等高线图，第二行是由 WGAN 的一个变体估计的，即本文提出的方法WGAN_GP。从图中可以看出，WGAN 不能创造一个复杂的边界来包围模型的模式（橙色点），只是对最优函数进行了非常简单的近似模拟，而改进的 WGAN_GP 可以。</p><img src="/2022/07/14/wgan-gp/image-20220714093217526-16577679352964.png" class=""><h2 id="WGAN-GP"><a href="#WGAN-GP" class="headerlink" title="WGAN_GP"></a>WGAN_GP</h2><p>WGAN_GP使用梯度惩罚（gradient penalty）而不是 weight clipping 来实现 Lipschitz 限制：</p><p>$$|f(x_1)-f(x_2)|\leq K|x_1-x_2|$$</p><p><strong>梯度惩罚</strong></p><p>可微函数 1-Lipschtiz 在任何地方都有范数最多为1的梯度</p><img src="/2022/07/14/wgan-gp/image-20220714094908951-16577679352966.png" class=""><p>作者在论文中的附录 A 证明了命题1，感兴趣的可以看一下。论文连接：<a href="http://arxiv.org/abs/1704.00028">WGAN_GP</a></p><p>这个命题指出在真实数据和生成数据之间的插值点会有一个函数$f^{*}$的梯度规范为1。因此 WGAN_GP 使用的不是weight clipping，而是当其梯度规范偏离其目标规范值时对模型进行惩罚。WGAN_GP 的目标函数为：</p><img src="/2022/07/14/wgan-gp/image-20220714095809861-16577679352965.png" class=""><p>式中$\overset{\wedge}{x}=t\overset{\sim}{x}+(1-t)x,0\leq t\leq 1$，t是随机采样出来的；论文中，$\lambda$设置为10。</p><p>批量标准化禁止在判别器中使用，因为批量标准化会在相同批量的样本中建立联系，使得判别器从单一输入到单一输出的映射变成了从整批输入到整批输出的映射，而 WGAN_GP 惩罚的是判别器相对于每个输入的梯度规范，而不是整个批次，使用批量标准化会影响梯度惩罚的效率。</p><p>不可否认，引入梯度惩罚会增加计算成本，这可能并不是最优的选择，但作者通过实验证明 WGAN_GP 确实产生了一些更高质量的图像。</p><p><strong>算法</strong></p><p>有了前面的基础，限制让我们细看 WGAN_GP 算法的细节和梯度惩罚是怎样计算的。</p><img src="/2022/07/14/wgan-gp/image-20220714103234274-16577679352967.png" class=""><p>与 WGAN 的算法进行对比，有两点不同：①使用了梯度惩罚，而不是 weight clipping；②使用了 Adam 优化算法，而不是 RMSProp 优化算法。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>WGAN_GP 增强了训练的稳定性，如下图所示，当模型设计不是最优时，WGAN_GP 仍然可以生成高质量的图片，而反观其他模型，生成的可能就是一堆噪音。</p><img src="/2022/07/14/wgan-gp/image-20220714103953609-16577679352968.png" class=""><p>下面是使用不同方法在 CIFAR-10 数据集上 Inception score 随生成器迭代次数的变化曲线。从图中可以看出，相对于 WGAN，WGAN_GP 收敛速度更快，且可以生成更高质量的图片，且使用 Adam 优化算法可以进一步提升模型的性能；相比于 DCGAN， WGAN_GP 收敛的慢些，但 Inception score 的收敛过程更加稳定。</p><img src="/2022/07/14/wgan-gp/image-20220714104944679-16577679352969.png" class=""><p>这是否就意味着 DCGAN 比 WGAN_GP 性能好？其实不然，WGAN_GP 的主要优势是它可以使训练更加稳定，使得模型更容易训练成功。为了验证 WGAN_GP 有助于模型收敛的更好，作者使用更加复杂的模型——深度残差网络作为生成器和判别器。下图就是不同模型在 LSUN 数据集上 Inception score 的结果，Inception score 越高，表示模型越好。</p><img src="/2022/07/14/wgan-gp/image-20220714105902203-16577679352951.png" class="">]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
            <tag> WGAN_GP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGAN</title>
      <link href="/2022/07/08/wgan/"/>
      <url>/2022/07/08/wgan/</url>
      
        <content type="html"><![CDATA[<img src="/2022/07/08/wgan/image-20220708100202682.png" class=""><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GAN以难训练而著称，在训练的过程中，模型没有收敛或者模型崩了是很常见的事。GAN通过生成器和判别器之间的对抗作用，使得生成器不断生成和原始数据概率分布相似的数据，从而达到以假乱真的目的。那怎样去学一个概率分布？从数学的角度就是学习一个概率密度函数，这个函数可以使得以下数学式在真实数据中最大（这和最大似然估计很相似）。下式中，$x^{(i)}$是真实的数据，<em>P</em>是概率密度函数</p><p>$$\underset{\theta \in R^{d}}{max}\frac{1}{m}\sum_{i=1}^{m}logP_{\theta}(x^{(i)})$$</p><p>如果我们知道真实数据的分布$P_{r}$和生成数据的分布$P_{g}$，那么我们只需最小化 <em><strong>KL</strong></em> 散度$KL(P_{r}||P_{g})$就可以使这两个分布相似，原始的GAN在KL散度这个评价标准做一定的推导进而得出训练原始GAN的损失函数 <em><strong>JS</strong></em> 散度，有关推导看<a href="http://arxiv.org/abs/1406.2661">这篇论文</a>。但 <em><strong>JS</strong></em> 散度存在一个问题，真实数据$P_{r}$和生成数据$P_{g}$没有数据重叠的话，不管真实数据和生成数据之间的距离多远， <em><strong>JS</strong></em> 散度计算出来的值都是log2，这就造成了梯度消失的问题。以图像生成为例，图像是一个高维数据，真实数据的分布在这个高维空间中占据很小一部分，这就很难使两个分布有重叠部分，GAN也就很难训练。</p><p>因此，在这篇论文中，作者的着力点是怎样判断生成数据和真实数据两者的分布相似，换言之，怎样计算两个分布之间的距离，从而由这个距离得出新的损失函数来训练GAN。作者应用的是Wasserstein Distance，因此命名为Wasserstein GAN，即WGAN。初看 Wasserstein Distance 的公式，会觉得这根本就不是我能够学的。事实上，它们并不难，接下来我会用例子去解释它们。</p><h2 id="EM距离"><a href="#EM距离" class="headerlink" title="EM距离"></a>EM距离</h2><p>假设我们将分布P视为一堆土，而另一个分布Q视为它的目标。那么P和Q之间的EM距离（Earth Mover distance）是推土机将土堆P转换为土堆Q所消耗的最小成本。这样讲可能会很抽象，下面我将例举李宏毅老师课堂上的一个例子，来看EM距离是如何计算的。</p><img src="/2022/07/08/wgan/image-20220708161212421.png" class=""><p>以上P和Q为两个分布，为了方便理解，我们可以将其看成两个土堆，同时你开着一个推土机。我想你有很多办法将P变成Q，那么你怎样操作会使消耗的功最小呢？</p><img src="/2022/07/08/wgan/image-20220708163129472.png" class=""><p>现在我们将其定义为一个数学问题，你“移动的计划”可以看成是一个矩阵，矩阵中每个位置的值可以看成你从土堆P的对应位置移动到土堆Q对应位置的土堆的重量。则移动计划$\gamma$的平均距离可以定义为</p><p>$$B(\gamma)=\underset{x_{p},x_{q}}{\sum}\gamma(x_{p},x_{q})||x_{p}-x_{q}||$$</p><p>式中，$x_{p},x_{q}$可以近似看成上图中矩阵对应的位置；$\gamma(\cdot)$表示移动的高度，也就是上面说的移动土的重量；$||\cdot||$表示两个位置对应坐标下的距离。</p><p>因此P和Q之间的EM距离可以看成求解下述问题得到最优解对应的，式中$\Pi$是所有可能的“移动计划”。</p><p>$$W(P,Q)=\underset{\gamma \in \Pi}{min}B(r)$$</p><p>以上述P和Q为例，它们的最佳“移动计划”如下图所示：</p><img src="/2022/07/08/wgan/image-20220708165227081.png" class=""><p>这篇论文第二章节用一个例子证明EM距离如何使得它收敛于一个简单的分布，而KL散度和JS散度是如何发散或者不收敛，具体可以查看<a href="http://arxiv.org/abs/1701.07875">原论文</a></p><h2 id="WGAN"><a href="#WGAN" class="headerlink" title="WGAN"></a>WGAN</h2><p>WGAN提出了一个新的成本函数，即使用Wasserstein距离，在任何地方都拥有一个更平滑的梯度。下图是GAN和WGAN的D(x)值的图，红线是GAN的，它充满了梯度消失或爆炸的区域。而相对于蓝线的WGAN，梯度在任何地方都比较平滑，即使生成器没有产生好的图像，也能够学习。</p><img src="/2022/07/08/wgan/image-20220708181906988.png" class=""><p>然而，Wasserstein距离的方程式是非常难解的。利用Kantorovich-Rubinstein duality，我们将其简化为</p><img src="/2022/07/08/wgan/image-20220708182718650.png" class=""><p>其中sup是最小的上界，<em>f</em>是一个遵循下面约束的1-Lipschitz函数</p><p>$$|f(x_1)-f(x_2)|\leq|x_1-x_2|$$</p><p>所以要想计算Wasserstein距离，我们还需找到一个1-Lipschitz函数。像其他深度学习问题，我们可以构建一个深度网络去学习这个函数，这个网络可以用判别器D实现，只不过最后一层不通过sigmoid函数，输出的是一些数值而不是一个概率值，这个数值可以理解为输出的图片有多真实。</p><p>WGAN和GAN在网络结构上设计几乎是一样的，不同点就是WGAN的判别器最后一层没有经过sigmoid函数。它们主要的区别主要是体现在损失函数上：</p><img src="/2022/07/08/wgan/image-20220708185201931.png" class=""><p>这里损失函数中f是一个1-Lipschitz函数，为例实现这一约束，WGAN使用了一个非常简单的技术——weight clipping，即将判别器的权重由超参数c控制，有了这些知识我们就能看懂论文中WGAN的算法：</p><img src="/2022/07/08/wgan/image-20220708185137888.png" class=""><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><strong>损失指标与图像质量之间的关系</strong></p><p>在GAN中，损失衡量的是它对判别器的欺骗程度，而不是对图像质量的衡量。如下图所示，前面两个图使用正常GAN的训练算法，后面一张图使用WGAN训练算法。从中可以看出即使图像质量提高了，GAN中的生成器损失值也不会下降。因此，我们无法通过损失值来看出训练的进展（我们通常是展示训练过程生成的图像，然后通过我们的视觉来评价模型训练进程）。相反，WGAN损失函数的值可以反映了图像质量，随着损失值下降，生成图片的质量也上升了，这是我们所期待的。</p><img src="/2022/07/08/wgan/image-20220708190704427.png" class="" title="DCGAN生成器JS散度变化曲线"><img src="/2022/07/08/wgan/image-20220708190512241.png" class="" title="DCGAN生成器损失值变化曲线"><img src="/2022/07/08/wgan/image-20220708191141579.png" class="" title="WGAN中W距离变化曲线"><p><strong>提高训练的稳定性</strong></p><p>WGAN做出的贡献有：</p><ul><li>解决了模型崩溃的问题</li><li>不需要精心设计模型的网络结构</li><li>当判别器学习的很好，生成器仍然能够学习</li></ul><p>下面我们展示论文中的实验结果，即使将DCGAN中的批量标准化去掉，WGAN仍然可以生成高质量的图片。</p><img src="/2022/07/08/wgan/image-20220708192139487.png" class=""><img src="/2022/07/08/wgan/image-20220708192153820.png" class=""><img src="/2022/07/08/wgan/image-20220708192208832.png" class=""><h2 id="WGAN的问题"><a href="#WGAN的问题" class="headerlink" title="WGAN的问题"></a>WGAN的问题</h2><p>论文中作者是使用weight clipping技术来实现Lipschitz限制，但其实这是执行Lipschitz约束的一种糟糕的方式。作者文中也反映了这一问题，如果clipping参数的值很大，那么任何权重都需要很长时间才能达到限制，从而判别器很难训练到最优。如果clipping参数的值很小，当模型较深或未使用批量标准化，就很容易导致梯度消失的问题。</p><p>WGAN的困难在于执行Lipscitz约束条件，clipping虽然简单，但它解决了很多问题。虽然超参数c没有设置好，模型仍然会产生低质量的图片并且模型不能收敛。后面有文章用梯度惩罚执行Lipschitz约束条件，但它也有这样的问题，并且两者都会降低生成图片的多样性。真正完全满足Lipschitz约束条件的是Spectral Normalization，这两篇文章的链接：<a href="http://arxiv.org/abs/1704.00028">WGAN_GP</a>、<a href="http://arxiv.org/abs/1802.05957">SNGAN</a>，后续有时间的话，我也会学习这两篇文章，并和大家分享。</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
            <tag> WGAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGAN的Pytorch实现</title>
      <link href="/2022/07/06/wgan-de-pytorch-shi-xian/"/>
      <url>/2022/07/06/wgan-de-pytorch-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>GAN存在训练困难、训练得到的loss无法表示训练进程等问题。大多数的GAN都是从模型的结构上进行修改，如DCGAN，用卷积神经网络设计生成器和判别器，并进行了一些调整，但这些终究是治标不治本，没有从根本上解决问题。原始GAN是用JS散度来评判两个分布的相似程度，而JS散度存在一个问题，就是真实数据$P_{data}$和生成数据$P_{G}$没有数据重叠的话，不管真实数据和生成数据之间的距离多远，JS散度计算出来的值都是log2，这就导致了生成器梯度消失的问题。WGAN就是用来解决这个问题，其优点有以下几个方面：</p><ul><li>彻底解决GAN训练不稳定和mode collapse的问题，不再需要小心平衡生成器和判别器的训练程度</li><li>不需要精心设计网络结构，MLP网络就能实现很好的结果</li><li>WGAN定义的损失函数可以反映训练的进程，从而我们可以根据这个指标来判断模型训练的效果</li></ul><p>WGAN实现以上好处使用的技术有：</p><ul><li>损失函数不取log</li><li>每次更新判别器的参数都截断到-c到c之间</li><li>使用RMSProp参数优化算法，而不是Adam</li><li>判别器的最后一层去掉sigmoid</li></ul><h2 id="模型实现">模型实现</h2><p>具体为什么要这么做，请查看原论文，本文主要关注的是WGAN模型以及训练过程Pytorch代码实现。</p><p>首先来看模型部分，这里使用的是DCGAN的模型，只不过将判别器的最后一层的sigmoid去掉</p><img src="/2022/07/06/wgan-de-pytorch-shi-xian/image-20220706103409376.png" class="" title="DCGAN的模型结构"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token comment"># 模型参数初始化</span><span class="token keyword">def</span> <span class="token function">weights_init</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    classname <span class="token operator">=</span> m<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    <span class="token keyword">if</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Conv'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>  <span class="token comment"># 均值为0，标准差为0.02的正态分布</span>    <span class="token keyword">elif</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'BatchNorm'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment"># 均值为1，标准差为0.02的正态分布</span><span class="token comment"># 生成器</span><span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    input (N, in_dim)    output (N, 3, 64, 64)    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Generator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dconv_bn_relu</span><span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>                                   padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>                self<span class="token punctuation">.</span>l2_5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            dconv_bn_relu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># (N, 512, 8, 8)  </span>            dconv_bn_relu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment"># (N, 256, 16, 16)</span>            dconv_bn_relu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment"># (N, 128, 32, 32)</span>            nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># (N, 3, 64, 64)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>l1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                        <span class="token comment"># (N, 1024 * 4 * 4)</span>        out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment"># (N, 1024, 4, 4)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>l2_5<span class="token punctuation">(</span>out<span class="token punctuation">)</span>                    <span class="token comment"># (N, 3, 64, 64)</span>        <span class="token keyword">return</span> out<span class="token comment"># 判别器</span><span class="token keyword">class</span> <span class="token class-name">Discriminator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        input (N, 3, 64, 64)        output (N, )        """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Discriminator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">conv_bn_lrelu</span><span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ls <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># (N, 128, 32, 32)</span>            conv_bn_lrelu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token comment"># (N, 256, 16, 16)</span>            conv_bn_lrelu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token comment"># (N, 512, 8, 8)</span>            conv_bn_lrelu<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token comment"># (N, 1024, 4, 4)</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>dim <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token comment"># (N, 1)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个部分与前面笔记<a href="https://faith-ye.github.io/2022/05/06/hw6-gan/">HW6-GAN</a>生成器和判别器的模型基本一样，有关数据处理可以看这个笔记，下面我们主要看WGAN的训练过程，可以看前面模型的训练过程并进行对比。</p><h2 id="模型训练">模型训练</h2><p>准备好model和optimizer</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置超参数</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>z_dim <span class="token operator">=</span> <span class="token number">100</span>lr <span class="token operator">=</span> <span class="token number">0.0001</span>n_epoch <span class="token operator">=</span> <span class="token number">10</span>cliping <span class="token operator">=</span> <span class="token number">0.02</span>critic_iter <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># model</span>G <span class="token operator">=</span> Generator<span class="token punctuation">(</span>in_dim<span class="token operator">=</span>z_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>D <span class="token operator">=</span> Discriminator<span class="token punctuation">(</span>in_dim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>G<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># optimizer，注意这里用的是RMSprop</span>opt_D <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span>opt_G <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>G<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span class="token comment"># 用于后向传播更新模型参数</span>one <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mone <span class="token operator">=</span> one <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        imgs <span class="token operator">=</span> data        imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        bs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 这里不用batch_size是为了防止最后一个并不是</span>        <span class="token triple-quoted-string string">"""Train D"""</span>        <span class="token comment"># Requires grad, Generator requires_grad = False</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> d_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>critic_iter<span class="token punctuation">)</span><span class="token punctuation">:</span>            D<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># Clamp parameters</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span>data<span class="token punctuation">.</span>clamp_<span class="token punctuation">(</span><span class="token operator">-</span>cliping<span class="token punctuation">,</span> cliping<span class="token punctuation">)</span>            z <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            r_imgs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            f_imgs <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>            <span class="token comment"># Train with real images</span>            d_loss_real <span class="token operator">=</span> D<span class="token punctuation">(</span>r_imgs<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            d_loss_real<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>mone<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># Train with fake images</span>            d_loss_fake <span class="token operator">=</span> D<span class="token punctuation">(</span>f_imgs<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            d_loss_fake<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>one<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            d_loss <span class="token operator">=</span> d_loss_fake <span class="token operator">-</span> d_loss_real            Wasserstein_D <span class="token operator">=</span> d_loss_real <span class="token operator">-</span> d_loss_fake            opt_D<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">""" Train G"""</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># to avoid computation</span>        G<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        z <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_imgs <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        g_loss <span class="token operator">=</span> D<span class="token punctuation">(</span>f_imgs<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        g_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>mone<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        g_cost <span class="token operator">=</span> <span class="token operator">-</span>g_loss        opt_G<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 打印当前模型训练的状态</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\rEpoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>n_epoch<span class="token punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> '</span></span>              <span class="token string-interpolation"><span class="token string">f'Loss_D: </span><span class="token interpolation"><span class="token punctuation">{</span>d_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> Loss_G: </span><span class="token interpolation"><span class="token punctuation">{</span>g_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面展示一张我训练迭代十次后出来的照片，整体看起来还是不错的，这里我没有使用原始DCGAN的模型，而是用了它的简化版，即前面笔记<a href="https://faith-ye.github.io/2022/05/06/hw6-gan/">HW6-GAN</a>中的模型，只是将判别器最后一层的sigmoid去掉，这个视觉上比HW6-GAN第10次迭代的效果要好些，但其中还是有一些瑕疵，个人觉得是我迭代的次数太少，也可能是代码问题。</p><img src="/2022/07/06/wgan-de-pytorch-shi-xian/Epoch_010.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
            <tag> WGAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zotero</title>
      <link href="/2022/06/15/zotero/"/>
      <url>/2022/06/15/zotero/</url>
      
        <content type="html"><![CDATA[<p>说到文献管理软件，大家可能会想到<a href="https://endnote.com/">EndNote</a>或<a href="http://www.inoteexpress.com/aegean/">NoteExpress</a>，这里给大家分享 <a href="https://www.zotero.org/">Zotero</a>，我选择它有以下几点原因：</p><ul><li>是个开源的文献管理软件，<strong>免费</strong></li><li>可以结合浏览器插件进行使用，本地的Zotero文献数据库还可以免费上传到Zotero的网络服务器上，且不受空间大小限制</li><li><strong>一个目录下可以分为多个子目录</strong>，这使得文献管理起来方便多了，EndNote只支持二级目录</li><li><strong>Zotero还支持文献的标签功能</strong></li></ul><p>下面主要介绍Zotero的基本用法，包括：安装、添加资源、文献引用、添加笔记和文档数据同步</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从 <a href="https://www.zotero.org/">Zotero官网</a> 下载安装包进行软件安装，下载界面会识别你使用的浏览器并推荐相应的插件，点击并进行安装。</p><img src="/2022/06/15/zotero/image-20220615103732563.png" class=""><h2 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h2><p>首先我们学习一下Zotero的界面分布，其界面大概分为三个部分：左侧是用户自定义的文件夹，中间是文件夹下收录的资源，右侧是选中资源对应的信息。</p><img src="/2022/06/15/zotero/image-20220615105409007.png" class=""><p>我选这款软件很重要的一点是，你在线研究论文时就可以使用Zotero的浏览器插件添加。当你打开文献网页后，点击激活Zotero的快捷键Ctrl+Shift+S，选择文献要保存的文件夹，点击完成即可添加到Zotero数据库中。这里我比较喜欢点进去查看PDF然后使用这个快捷键进行添加，这样会顺带把原文PDF收录。</p><img src="/2022/06/15/zotero/image-20220615110709983.png" class=""><p>当然你也可以手动输入，点进文献文件夹，然后在中间界面上方点击绿色圆圈的加号，选择资源的类型，并在右侧手动输入相关信息完成录入。你也可以从文件或剪切板导入，但这些都比较麻烦，建议使用第一种方法。</p><h2 id="文献引用和数据同步"><a href="#文献引用和数据同步" class="headerlink" title="文献引用和数据同步"></a>文献引用和数据同步</h2><p>一般Zotero安装时会自动添加到Microsoft Word插件中，如果在Word界面顶部没有看到Zotero，可在Zotero的设置中依次找到 <code>编辑 → 首选项 → 引用 → 文字处理软件</code> 重新安装插件即可。</p><p>在Microsoft Word中成功安装了Zotero插件后，就可以直接将Zotero中的引文插入文档。在 Word 中点击 <code>Zotero → Add/Edit Citation</code>， 然后选择以下方式选择你想要的引用格式。以后需要修改引用格式时在在Zotero的设置中依次找到 <code>编辑 → 首选项 → 引用 → 样式</code> 重新设置。</p><img src="/2022/06/15/zotero/image-20220615113205108.png" class=""><p>一旦选择了引文格式，就可以通过输入作者的姓名从Zotero数据库中找到来源，但我一般选择经典试图打开Zotero数据库进行手动选择。</p><img src="/2022/06/15/zotero/image-20220615150522038.png" class=""><p>文章写完后，在Word点击 <code>Zotero → Add/Edit Bibliography</code> 即可自动生成参考文献列表。</p><h2 id="添加笔记"><a href="#添加笔记" class="headerlink" title="添加笔记"></a>添加笔记</h2><p>右键文献则可写文献笔记，也可以从上部添加笔记的按钮中添加笔记。由于Zotero自带的笔记功能不支持Markdown语法，因此我们需要使用 <a href="https://github.com/ffecon/tools/blob/master/markdown.xpi">MarkdownHere</a> 插件，下载这个插件，然后在Zotero的设置中依次找到 <code>工具 → 插件 → 点击右上方的设置 → Install Add-on From File</code> ，找到刚才xpi文件位置，然后点击Install Now后重启软件即可。</p><p>导入这个插件后，我们使用Markdown语法编写好笔记，然后点击 <code>文件 → Markdown转换</code> 即可进行渲染。</p><h2 id="文档数据同步"><a href="#文档数据同步" class="headerlink" title="文档数据同步"></a>文档数据同步</h2><p>由于Zotero官方同步空间较小，只能使用其他方法来弥补。而<a href="http://zotfile.com/">ZotFile</a>插件是用于将zotero中文献附件转移至网络同步盘中的一种插件，可以解决官方同步空间小的问题。这里以onedrive网盘为例，讲述Zotero和ZotFile插件的关联以及使用。</p><p>点击上面的链接进行下载，按照MarkdownHere插件安装的方法安装此插件。随后进行以下设置，将 Zotero 附件的默认位置改为 ZotFile 的目标文件夹。</p><ul><li>打开<code>编辑 → 首选项 → 引用 → 文字处理软件</code>和<code>工具 → ZotFile Preference</code></li><li>查看Zotero数据文件路径</li><li>根据Zotero数据文件路径设置ZotFile跟踪的数据文件路径</li><li>设置附件移动的目标文件夹，这里须在OneDrive下新建一个ZotFile文件夹</li><li>修改Zotero附件文件夹</li></ul><img src="/2022/06/15/zotero/image-20220615165153562.png" class=""><h2 id="其他插件安装"><a href="#其他插件安装" class="headerlink" title="其他插件安装"></a>其他插件安装</h2><p>对于原文获取不到的文献，我们只能采用一点非正常渠道：<a href="https://sci-hub.se/">SciHub</a>来获取。Zotero可以使用插件来完成原文的获取：首先使用 <a href="https://github.com/bwiernik/zotero-shortdoi">Zotero-ShortDOI</a> 插件获取文献 DOI，然后利用 <a href="https://github.com/ethanwillis/zotero-scihub">Zotero-SciHub</a> 插件获得原文，这两个插件的安装也和前面一样，注意下载的是xpi文件。</p>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好用的软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意力增强卷积网络</title>
      <link href="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/"/>
      <url>/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520090637034.png" class=""><p><strong>主要思想：</strong>作者将卷积得到的特征图与通过自注意力机制产生的一组特征图连接（concatenate）起来，通过这种自注意力机制来增强卷积算子，从而提升模型性能。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>卷积神经网络（CNN）在许多计算机视觉应用中都取得了巨大的成功，特别是在图像分类中。然而，CNN有一个显著的弱点，由于卷积操作和池化操作，只对图像的局部领域进行操作，因此缺少全局信息，而这些信息对于图像识别是很有必要的。</p><p>而在捕获长距离交互关系（long range interaction），自注意力的表现不错。自主意力背后的关键思想是生成隐藏层计算的值的加权平均值。不同于卷积操作或者池化操作，这些权重是动态根据输入特征，通过隐藏单元之间的相似函数产生的。因此，输入信号之间的交互互动只依赖于信号本身，不像卷积，由它们的相对位置事先决定。</p><p>因此，本文将自主意力计算应用到卷积操作中，实现了长距离交互。同时本文考虑使用自主意力替代卷积做判别性视觉任务，提出了二维相关自主意力机制（two-dimensional relative self-attention mechanism），并在此基础上注入相对位置信息，使其更加适合用于图像处理。本文实验表明，上述机制在完全替代卷积方面具有很大的竞争力，但实验中发现将两者结合可以获得更好的结果。因此作者并没有完全抛弃卷积，而是利用自主意力来增强卷积，即将强调局部特征的卷积特征图和能够获取长距离依赖的自主意力特征图拼接起来得到最终结果。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在介绍本文方法之前，我们先来了解注意力增强的卷积网络的主要结构：</p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520102419566.png" class=""><ul><li>H，W，$F_{in}$：输入特征图的height，weight，通道数量</li><li>$N_{h}$，$d_{v}$，$d_{k}$：heads的数量，values的深度，queries和keys的深度（多头注意力中的一些参数）。这里$d_{v}、d_{k}$必须可以被$N_{h}$整除，并且$d_{v}^{h}、d_{k}^{h}$为每个head中values、queries和keys的深度</li></ul><h3 id="图像中自主意力的计算"><a href="#图像中自主意力的计算" class="headerlink" title="图像中自主意力的计算"></a>图像中自主意力的计算</h3><p>和注意力的计算一样，只不过需要对图像输入数据做一定的处理——输入tensor$(H,W,F_{in})$flatten成矩阵$X\in R^{HW\times F_{in}}$作为输入。</p><p><strong>单头的计算形式:</strong></p><p>$$O_{h}=Softmax(\frac{(XW_{q})(XW_{k})^{T}}{\sqrt{d_{k}^{h}}})(XW_{v})$$</p><p><strong>多头的计算形式：</strong></p><p>$$MHA(X)=Concat(O_{1},…,O_{Nh})W^{O}$$</p><p>相关公式推导可以看前面笔记<a href="https://faith-ye.github.io/2022/04/02/zi-zhu-yi-li-mo-xing/">自注意力模型</a></p><h3 id="二维位置编码"><a href="#二维位置编码" class="headerlink" title="二维位置编码"></a>二维位置编码</h3><p>由于自主意力没有利用位置信息，因此满足交换律：$MHA(\pi (X))=\pi(MHA(X))$。</p><p>这里的$\pi$表示像素位置的任意交换，所以自主意力对于模拟像图像这种高度结构化的数据不是很有效，这时位置编码的技术就很关键。</p><ul><li>the Image Transformer extends the sinusoidal waves first introduced in the original Transformer to 2 dimensional inputs</li><li>CoordConv concatenates positional channels to an activation map</li></ul><p>然而，这些位置编码技术并不适合图像分类和目标检测。作者将其归因于这些技术虽然可以打破置换等变性（permutation equivariant），但不能处理图像任务时需要的平移等变性（translation equivariance）。而相对位置编码在打破置换等变性的同时实现了平移等变性，本文在相对位置编码的理论基础上将其拓展到二维上，并且基于Music Transformer提出一个内存有效实施的方法。</p><p><strong>相对位置编码（Relative positional encodings）</strong></p><p>本文通过相对位置编码技术注入了图像的相对高度和宽度信息，从而弥补了图像自主意力计算的缺点。则像素$i=(i_{x},i_{y})$关于像素$j=(j_{x},j_{y})$的attention logit计算公式如下：</p><p>$$l_{i,j}=\frac{q_{i}^{T}}{\sqrt{d_{k}^{h}}}(k_{j}+r_{j_{x}-i_{x}}^{W}+r_{j_{y}-i_{y}}^{H})$$</p><ul><li>$q_{i}$是像素i对应的查询向量，即矩阵Q的第i行</li><li>$k_{j}$是像素j对应的键向量，即矩阵K的第j行</li><li>$r_{j_{x}-i_{x}}^{W}、r_{j_{y}-i_{y}}^{H}$表示对于相对宽度$j_{x}-i_{x}$和相对高度$j_{y}-i_{y}$学习到的嵌入表示</li></ul><p><strong>此时单头的计算变为：</strong></p><p>$$O_{h}=Softmax(\frac{QK^{T}+S_{H}^{rel}+S_{W}^{rel}}{\sqrt{d_{k}^{h}}})V$$</p><ul><li>$S_{H}^{rel},S_{W}^{rel}\in R^{HW\times HW}$，它们是沿高度和宽度维度上的相对位置对数矩阵</li><li>$S_{H}^{rel}[i,j]=q_{i}^{T}r_{j_{y}-i_{y}}^{H},S_{W}^{rel}[i,j]=q_{i}^{T}r_{j_{x}-i_{x}}^{W}$</li></ul><h3 id="注意力增强卷积"><a href="#注意力增强卷积" class="headerlink" title="注意力增强卷积"></a>注意力增强卷积</h3><p>本文的提出的注意力增强卷积有以下两个特点：</p><ul><li>使用一种注意力机制，可以同时关注整体空间和特征子空间（每个head对应一个特征子空间）</li><li>引入额外的特征图而不是细化它们</li></ul><p><strong>对应公式：</strong></p><p>$$AAConv(X)=Concat[Conv(X),MHA(X)]$$</p><h3 id="注意力增强卷积结构"><a href="#注意力增强卷积结构" class="headerlink" title="注意力增强卷积结构"></a>注意力增强卷积结构</h3><ul><li>每次增强卷积后都会通过一个batch normalization layer来缩放卷积特征图和注意力特征图的贡献</li><li>每个增强卷积都会使用残差块结构</li><li>由于注意力的计算具有较大的内存占用，所以本文从具有最小空间维度的最后一层慢慢加入注意力增强的卷积，直到遇到内存限制</li><li>采用较小的批量大小和使用步长为2的3 x 3平均池化来执行下采样，而通过双线性插值进行上采样等操作来减少网络的内存占用</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>这部分只列举各个实验结果</p><p><strong>CIFAR-100</strong></p><p>用于低分辨率图像的标准数据集</p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520160905233.png" class=""><p><strong>ImageNet</strong></p><p>用于高分辨率图像的标准数据集，只列举其中一个</p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520161451806.png" class=""><p><strong>COCO dataset</strong>  </p><p>用于目标检测的标准数据集</p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520161826025.png" class=""><p><strong>位置编码</strong></p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520162025902.png" class=""><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520162058341.png" class=""><p><strong>不同比例的注意力通道数</strong></p><img src="/2022/05/20/zhu-yi-li-zeng-qiang-juan-ji-wang-luo/image-20220520162304748.png" class=""><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/1904.09925">Bello, Irwan, et al. “Attention augmented convolutional networks.” <em>Proceedings of the IEEE/CVF international conference on computer vision</em>. 2019.</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conformer-用卷积增强的Transformer做语音识别</title>
      <link href="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/"/>
      <url>/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/</url>
      
        <content type="html"><![CDATA[<p>今天学习一篇ASR-语言识别领域的文章，来自google的：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513194651384.png" class=""><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>提到端到端自动语音识别（ASR）系统，你可能会想到循环神经网络（RNN），因为RNN可以有效地模拟音频序列中的时间依赖性；你可能也会想到基于self-attention的Transformer架构，因为它能够捕捉序列的整体特征并且训练效率高；你甚至会想到卷积神经网络（CNN），因为它可以通过逐层捕捉序列的局部特征而获得序列的特征。</p><p>然而，基于self-attention或者卷积的模型都有它们的缺点。Transformer在提取长序列依赖的时候很有效，但它不擅长提取序列的局部特征，而卷积神经网络恰好相反。因此有没有可能将这两种特性结合起来建立一个新的模型，这个模型能同时提取输入数据的局部特征和整体特征。</p><p>Conformer就是将这两者结合起来，用卷积增强的Transformer做语音识别，并取得杰出的效果。下面，我们来学习一下Conformer的机制。</p><h2 id="Conformer"><a href="#Conformer" class="headerlink" title="Conformer"></a>Conformer</h2><p>语音识别使用的也是一个seq2seq模型，Conformer只使用卷积来改变encoder部分。Conformer Encoder的总体架构如下，首先我们用convolution subsampling layer处理输入，然后通过多个conformer blocks。</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513202038061.png" class=""><p>其中conformer blocks是由Feedforward module，Multi-head self attention Module, Convolution Module这三个Module组成的，其中Feedforward module在前后都有使用。下面我们分别学习这三个Module，并学习这些Moudle是如何结合在一起的。</p><h3 id="Multi-Headed-Self-Attention-Module"><a href="#Multi-Headed-Self-Attention-Module" class="headerlink" title="Multi-Headed Self-Attention Module"></a>Multi-Headed Self-Attention Module</h3><p>该Moudle采用了多头自注意力机制（multi-headed self-attention, MHSA），同时结合了Transformer-XL的一个重要技术——相对正弦位置编码方案。相对正弦位置编码使得self-attention module在不同的输入长度上具有更好的泛化能力，并且加强了编码器的鲁棒能力。同时该Moudle还使用了带有dropout的prenorm残差单元，这有助于训练和规范更深层次的模型。其整体结构如下图所示：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513203613588.png" class=""><h3 id="Convolution-Module"><a href="#Convolution-Module" class="headerlink" title="Convolution Module"></a>Convolution Module</h3><p>对于Convolution Module，使用了prenorm残差，pointwise卷积和线性门单元(Gated Linear Unit, GLU)，随后又经过了一系列结构，如下图所示：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513204736253.png" class=""><h3 id="Feed-Forward-Module"><a href="#Feed-Forward-Module" class="headerlink" title="Feed Forward Module"></a>Feed Forward Module</h3><p>对于Feed Forward Module，使用lprenorm残差，紧接着通过一个线性层和Swish激活函数，然后通过另一个线性层，该线性层前后都经过dropout处理，如下图所示：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513205632544.png" class=""><p>从Convolution Module和Feed Forward Module来看，它们都使用了Swish激活函数，它的计算公式如下</p><p>$$f(x)=x*\sigma(x)$$</p><p>式中，$\sigma(x)=(1+exp(-x))^{-1}$，它是一个sigmoid函数，有关它的图像如下图所示：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513211427887.png" class=""><h3 id="Conformer-Block"><a href="#Conformer-Block" class="headerlink" title="Conformer Block"></a>Conformer Block</h3><p>再回顾Conformer Block，我们可以得到它的计算公式：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513211645893.png" class=""><p>其中FFN是Feed Forward Module，MHSA是Multi-Headed Self-Attention Module，Conv是Convolution Module。其中特别注意这里使用的是1/2FFN，作者文中说明了半个要比一个的效果好。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>这部分就简单介绍一下，数据采用的是librispeech数据，其中包括970小时的labeled speech和额外的800M单词标记的文本语料库，用于构建语言模型。为了比较不同配置的Encoder好坏，统一使用单层的LSTM作为Decoder</p><p>实验中三种不同规模的Conformer的参数配置如下：</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513213021632.png" class=""><p>表格2展示的是和其他模型的对比情况，Conformer都达到了较好的效果</p><img src="/2022/05/13/conformer-yong-juan-ji-zeng-qiang-de-transformer-zuo-yu-yin-shi-bie/image-20220513213159848.png" class=""><p>同时作者还探讨了各个模块以及每个模块参数以及模块中结构的顺序对模型的影响，在这就不多加叙述，想了解的可以看原文。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/2005.08100">Gulati, Anmol, et al. “Conformer: Convolution-augmented transformer for speech recognition.” <em>arXiv preprint arXiv:2005.08100</em> (2020).</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conformer </tag>
            
            <tag> ASR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW4-Self-Attention</title>
      <link href="/2022/05/12/hw4-self-attention/"/>
      <url>/2022/05/12/hw4-self-attention/</url>
      
        <content type="html"><![CDATA[<h2 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h2><p>本作业的目标是利用transformer中self-attention部分做一个多元分类，即从给定的语音中预测说话者的类别。利用的数据是从<a href="https://drive.google.com/file/d/1gaFy8RaQVUEXo2n0peCBR5gYKCB-mNHc/view">Voxceleb1</a>中挑选的一部分，数据如下：</p><ul><li>训练数据：69438条处理过的带标签音频特征</li><li>测试数据：6000条处理过的无标签音频特征</li><li>标签：总共600个标签，每个标签代表一个speaker</li></ul><p><strong>格式</strong></p><p>数据路径</p><ul><li>metadata.json</li><li>testdata.json</li><li>mapping.json</li><li>uttr-{random string}.pt</li></ul><p>metadata中的信息</p><ul><li>“n_mels”: mel-spectrogram的维数</li><li>“speakers”： 一个字典 <ul><li>Key: speaker的id </li><li>value：“feature_path”和“mel_len”</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入相关的包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token punctuation">,</span> random_split<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> random<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>rnn <span class="token keyword">import</span> pad_sequence<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npseed <span class="token operator">=</span> <span class="token number">2022</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">myDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">,</span> segment_len<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data_dir <span class="token operator">=</span> data_dir        self<span class="token punctuation">.</span>segment_len <span class="token operator">=</span> segment_len                <span class="token comment"># 加载一个字典，该字典对应speaker的标签(0, 1, 2, ... ,599)</span>        mapping_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"mapping.json"</span>        mapping <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>mapping_path<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>speaker2id <span class="token operator">=</span> mapping<span class="token punctuation">[</span><span class="token string">"speaker2id"</span><span class="token punctuation">]</span>                <span class="token comment"># 从metada中加载训练数据</span>        metadata_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"metadata.json"</span>        metadata <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>metadata_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"speakers"</span><span class="token punctuation">]</span>                <span class="token comment"># speaker的总个数</span>        self<span class="token punctuation">.</span>speaker_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> speaker <span class="token keyword">in</span> metadata<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> utterances <span class="token keyword">in</span> metadata<span class="token punctuation">[</span>speaker<span class="token punctuation">]</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>utterances<span class="token punctuation">[</span><span class="token string">"feature_path"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>speaker2id<span class="token punctuation">[</span>speaker<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        feat_path<span class="token punctuation">,</span> speaker <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment"># 加载预处理的mel-spectrogram</span>        mel <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> feat_path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mel<span class="token punctuation">)</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>segment_len<span class="token punctuation">:</span>            start <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mel<span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>segment_len<span class="token punctuation">)</span>            mel <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>mel<span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> self<span class="token punctuation">.</span>segment_len<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            mel <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>mel<span class="token punctuation">)</span>        speaker <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>speaker<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mel<span class="token punctuation">,</span> speaker    <span class="token keyword">def</span> <span class="token function">get_speaker_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>speaker_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><ul><li>把训练数据划分为训练集(90%)和验证集(10%)</li><li>创建dataloader来迭代数据</li></ul><p>由于我们是按batch训练模型，所以需要对同一batch的数据进行填充，使它们长度相同，这部分通过定义collate_batch()函数实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collate_batch</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    mel<span class="token punctuation">,</span> speaker <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    mel <span class="token operator">=</span> pad_sequence<span class="token punctuation">(</span>mel<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding_value<span class="token operator">=</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment"># mel: (batch size, length, 40)</span>    <span class="token keyword">return</span> mel<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>speaker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_dataloader</span><span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataset <span class="token operator">=</span> myDataset<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span>    speaker_num <span class="token operator">=</span> dataset<span class="token punctuation">.</span>get_speaker_number<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 划分数据集</span>    trainlen <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.9</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>    lengths <span class="token operator">=</span> <span class="token punctuation">[</span>trainlen<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token operator">-</span> trainlen<span class="token punctuation">]</span>    trainset<span class="token punctuation">,</span> validset <span class="token operator">=</span> random_split<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> lengths<span class="token punctuation">)</span>    train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>        trainset<span class="token punctuation">,</span>        batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>        shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        collate_fn<span class="token operator">=</span>collate_batch<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    valid_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>        validset<span class="token punctuation">,</span>        batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>        collate_fn<span class="token operator">=</span>collate_batch<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> train_loader<span class="token punctuation">,</span> valid_loader<span class="token punctuation">,</span> speaker_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>在这里，我们使用的模型是基于Transformer的EncoderLayer，相关使用可以看官方API <a href="https://pytorch.org/docs/stable/generated/torch.nn.TransformerEncoderLayer.html#torch.nn.TransformerEncoderLayer">TransformerEncoderLayer</a>。当然，你也可以使用Transformer完整的Encoder部分，它只不过多叠了几个EncoderLayer，有关它的使用也请看官方API <a href="https://pytorch.org/docs/stable/generated/torch.nn.TransformerEncoder.html#torch.nn.TransformerEncoder">TransformerEncoder</a></p><p>如果你对Transformer不太了解，可以去看前面写的笔记-<a href="https://faith-ye.github.io/2022/04/11/transformer/">Transformer</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Classifier</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d_model<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> n_spks<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 将输入的特征维度投影到d_model</span>        self<span class="token punctuation">.</span>prenet <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> d_model<span class="token punctuation">)</span>        <span class="token comment"># TODO: 可以尝试实现</span>        <span class="token comment">#   Change Transformer to Conformer.</span>        <span class="token comment">#   https://arxiv.org/abs/2005.08100</span>        self<span class="token punctuation">.</span>encoder_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>TransformerEncoderLayer<span class="token punctuation">(</span>          d_model<span class="token operator">=</span>d_model<span class="token punctuation">,</span> dim_feedforward<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> nhead<span class="token operator">=</span><span class="token number">2</span>        <span class="token punctuation">)</span>        <span class="token comment"># self.encoder = nn.TransformerEncoder(self.encoder_layer, num_layers=2)</span>        <span class="token comment"># 将 d_model 中的特征维度投影到speaker的人数中，便于分类</span>        self<span class="token punctuation">.</span>pred_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>          <span class="token comment"># nn.Linear(d_model, d_model),</span>          <span class="token comment"># nn.ReLU(),</span>          nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>d_model<span class="token punctuation">,</span> n_spks<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mels<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>prenet<span class="token punctuation">(</span>mels<span class="token punctuation">)</span>          <span class="token comment"># out: (batch size, length, d_model)</span>        out <span class="token operator">=</span> out<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment"># out: (length, batch size, d_model)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder_layer<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> out<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># out: (batch size, length, d_model)</span>        stats <span class="token operator">=</span> out<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment"># mean pooling</span>                out <span class="token operator">=</span> self<span class="token punctuation">.</span>pred_layer<span class="token punctuation">(</span>stats<span class="token punctuation">)</span>    <span class="token comment"># out: (batch, n_spks)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="学习率调度器"><a href="#学习率调度器" class="headerlink" title="学习率调度器"></a>学习率调度器</h2><ul><li>对于transformer结构，学习率时间表的设计是和CNN不一样的</li><li>先前的知识表明采用warmup形式的学习率对于训练像transformer结构的模型十分有效</li></ul><p>本文采用的是cosine学习率，它的计算公式如下</p><img src="/2022/05/12/hw4-self-attention/image-20220512192405370.png" class=""><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> Optimizer<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler <span class="token keyword">import</span> LambdaLR<span class="token keyword">def</span> <span class="token function">get_cosine_schedule_with_warmup</span><span class="token punctuation">(</span>    optimizer<span class="token punctuation">:</span> Optimizer<span class="token punctuation">,</span>    num_warmup_steps<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    num_training_steps<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    num_cycles<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>    last_epoch<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lr_lambda</span><span class="token punctuation">(</span>current_step<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># warmup</span>        <span class="token keyword">if</span> current_step <span class="token operator">&lt;</span> num_warmup_steps<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>current_step<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_warmup_steps<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># decadence</span>        progress <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>current_step <span class="token operator">-</span> num_warmup_steps<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>            <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_training_steps <span class="token operator">-</span> num_warmup_steps<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>            <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_cycles<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">*</span> progress<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> LambdaLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> lr_lambda<span class="token punctuation">,</span> last_epoch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置超参数"><a href="#设置超参数" class="headerlink" title="设置超参数"></a>设置超参数</h2><p>这部分用于调节以提升模型性能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'models'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"data_dir"</span><span class="token punctuation">:</span> <span class="token string">"./Dataset"</span><span class="token punctuation">,</span>    <span class="token string">"save_path"</span><span class="token punctuation">:</span> <span class="token string">"models/model.pth"</span><span class="token punctuation">,</span>    <span class="token string">"batch_size"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>    <span class="token string">"lr"</span><span class="token punctuation">:</span> <span class="token number">1e-3</span><span class="token punctuation">,</span>    <span class="token string">"valid_steps"</span><span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>    <span class="token string">"warmup_steps"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token string">"n_epochs"</span><span class="token punctuation">:</span> <span class="token number">70000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载数据和模型"><a href="#加载数据和模型" class="headerlink" title="加载数据和模型"></a>加载数据和模型</h2><p>准备好dataloader，model，loss criterion，optimizer</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_loader<span class="token punctuation">,</span> valid_loader<span class="token punctuation">,</span> speaker_num <span class="token operator">=</span> get_dataloader<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'data_dir'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Classifier<span class="token punctuation">(</span>n_spks<span class="token operator">=</span>speaker_num<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>scheduler <span class="token operator">=</span> get_cosine_schedule_with_warmup<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'warmup_steps'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'n_epochs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timen_epochs <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'n_epochs'</span><span class="token punctuation">]</span>         <span class="token comment"># 总迭代次数</span>best_acc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span>                     <span class="token comment"># 用于保存在测试集准确率最高的模型</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_acc<span class="token punctuation">,</span> train_loss <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                train_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        train_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    train_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>        <span class="token comment"># 每次迭代后，在验证集中验证模型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> config<span class="token punctuation">[</span><span class="token string">'valid_steps'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        val_loss<span class="token punctuation">,</span> val_acc <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span>        model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>valid_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>                loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>                val_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                val_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        val_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>valid_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        val_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>valid_loader<span class="token punctuation">)</span>        <span class="token comment"># 当模型性能提升时保存模型</span>        <span class="token keyword">if</span> val_acc <span class="token operator">&gt;</span> best_acc<span class="token punctuation">:</span>            best_acc <span class="token operator">=</span> val_acc            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saving model (epoch = </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">02d</span><span class="token punctuation">}</span></span><span class="token string">, acc = </span><span class="token interpolation"><span class="token punctuation">{</span>best_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">), loss = </span><span class="token interpolation"><span class="token punctuation">{</span>val_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 将结果打印出来</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[%02d/%02d] %2.2f sec(s) Train Acc: %3.6f Loss: %3.6f'</span> <span class="token operator">%</span> \          <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n_epochs<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h2><p>首先我们得为测试数据创建dataset和dataloader，并加载我们保存的最好的模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InferenceDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        testdata_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"testdata.json"</span>        metadata <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>testdata_path<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data_dir <span class="token operator">=</span> data_dir        self<span class="token punctuation">.</span>data <span class="token operator">=</span> metadata<span class="token punctuation">[</span><span class="token string">"utterances"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        utterance <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        feat_path <span class="token operator">=</span> utterance<span class="token punctuation">[</span><span class="token string">"feature_path"</span><span class="token punctuation">]</span>        mel <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_dir<span class="token punctuation">,</span> feat_path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> feat_path<span class="token punctuation">,</span> mel<span class="token keyword">def</span> <span class="token function">inference_collate_batch</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    feat_paths<span class="token punctuation">,</span> mels <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    <span class="token keyword">return</span> feat_paths<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>mels<span class="token punctuation">)</span>dataset <span class="token operator">=</span> InferenceDataset<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'data_dir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>    dataset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    collate_fn<span class="token operator">=</span>inference_collate_batch<span class="token punctuation">,</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Classifier<span class="token punctuation">(</span>n_spks<span class="token operator">=</span>speaker_num<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Classifier(  (prenet): Linear(in_features=40, out_features=80, bias=True)  (encoder_layer): TransformerEncoderLayer(    (self_attn): MultiheadAttention(      (out_proj): _LinearWithBias(in_features=80, out_features=80, bias=True)    )    (linear1): Linear(in_features=80, out_features=256, bias=True)    (dropout): Dropout(p=0.1, inplace=False)    (linear2): Linear(in_features=256, out_features=80, bias=True)    (norm1): LayerNorm((80,), eps=1e-05, elementwise_affine=True)    (norm2): LayerNorm((80,), eps=1e-05, elementwise_affine=True)    (dropout1): Dropout(p=0.1, inplace=False)    (dropout2): Dropout(p=0.1, inplace=False)  )  (pred_layer): Sequential(    (0): Linear(in_features=80, out_features=600, bias=True)  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将预测结果保存到csv文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csvmapping_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'data_dir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"mapping.json"</span>mapping <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>mapping_path<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Id"</span><span class="token punctuation">,</span> <span class="token string">"Category"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> feat_paths<span class="token punctuation">,</span> mels <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mels <span class="token operator">=</span> mels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outs <span class="token operator">=</span> model<span class="token punctuation">(</span>mels<span class="token punctuation">)</span>        preds <span class="token operator">=</span> outs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> feat_path<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>feat_paths<span class="token punctuation">,</span> preds<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>feat_path<span class="token punctuation">,</span> mapping<span class="token punctuation">[</span><span class="token string">"id2speaker"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'predict.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021作业部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java两个常用API</title>
      <link href="/2022/05/12/java-liang-ge-chang-yong-api/"/>
      <url>/2022/05/12/java-liang-ge-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>API的全称是Application Programming Interface，应用程序编程接口</p><ul><li>Java写好的功能代码，可以直接调用</li><li>Oracle也为Java提供的这些功能代码提供了相应的API文档（技术使用说明书）</li></ul><p>本节主要学习String和ArrayList这两个常用API</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String类定义的变量可以用于存储字符串，同时String类提供了很多操作字符串的功能，我们可以直接使用</p><p><strong>概述</strong></p><ul><li>java.lang.String类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串</li><li>Java程序中的所有字符文字都为此类的对象</li></ul><p><strong>String是不可变字符串的原因？</strong></p><p>String变量每次的修改其实都是产生并指向了新的字符串对象，原来的字符串对象都是没有改变的，所以称不可变字符串</p><p><strong>特点</strong></p><ul><li>双引号创建的字符串对象，在字符串常量池中存储同一个</li><li>通过new构造器创建的字符串对象，在堆内存中分开存储</li></ul><p><strong>字符串内容比较</strong></p><p>推荐使用String类提供的”equals“比较：只关心内容一样即可。不推荐用”==“比较，因为比较的是地址</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean equals(Object anObject)</td><td align="center">将此字符串与指定对象进行比较。只关心字符内容是否一致！</td></tr><tr><td align="center">public boolean equalsIgnoreCase (String anotherString)</td><td align="center">将此字符串与指定对象进行比较，忽略大小写比较字符串。只关心字符内容是否一致！</td></tr></tbody></table><p>以equals为例，使用如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">okName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>   <span class="token comment">// 判断okName字符串和name字符串是否相同，返回值为true或false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>String常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int length()</td><td>返回此字符串的长度</td></tr><tr><td>public char charAt(int index)</td><td>获取某个索引位置处的字符</td></tr><tr><td>public char[] toCharArray()：</td><td>将当前字符串转换成字符数组返回</td></tr><tr><td>public String substring(int beginIndex, int endIndex)</td><td>根据开始和结束索引进行截取，得到新的字符串（包前不包后）</td></tr><tr><td>public String substring(int beginIndex)</td><td>从传入的索引处截取，截取到末尾，得到新的字符串</td></tr><tr><td>public String replace(CharSequence target, CharSequence replacement)</td><td>使用新值，将字符串中的旧值替换，得到新的字符串</td></tr><tr><td>public String[] split(String regex)</td><td>根据传入的规则切割字符串，得到字符串数组返回</td></tr></tbody></table><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList代表的是集合类，集合是一种容器，与数组类似，不同的是集合的大小是不固定的。通过创建ArrayList的对象表示得到一个集合容器，同时ArrayList提供了比数组更好用，更丰富的API给程序员使用</p><p><strong>ArrayList对象创建</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ArrayList集合的添加元素的方法</strong></p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public boolean add(E e)</td><td align="left">将指定的元素追加到此集合的末尾</td></tr><tr><td align="left">public void add(int index,E element)</td><td align="left">在此集合中的指定位置插入指定的元素</td></tr></tbody></table><p><strong>泛型概述</strong></p><ul><li>ArrayList&lt;E&gt;：其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种数据类型。</li></ul><p><strong>举例：</strong></p><ul><li><p>ArrayList&lt;String&gt; ：此集合只能操作字符串类型的元素。</p></li><li><p>ArrayList&lt;Integer&gt;：此集合只能操作整数类型的元素。</p></li></ul><p><strong>注意：</strong>集合中只能存储引用类型，不支持基本数据类型，因此不能填int，需用Integer</p><p><strong>ArrayList集合常用方法</strong></p><table><thead><tr><th align="left">方法名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public E get(int  index)</td><td align="left">返回指定索引处的元素</td></tr><tr><td align="left">public int  size()</td><td align="left">返回集合中的元素的个数</td></tr><tr><td align="left">public E remove(int  index)</td><td align="left">删除指定索引处的元素，返回被删除的元素</td></tr><tr><td align="left">public boolean remove(Object o)</td><td align="left">删除指定的元素，返回删除是否成功</td></tr><tr><td align="left">public E set(int index,E element)</td><td align="left">修改指定索引处的元素，返回被修改的元素</td></tr></tbody></table><p>利用上述方法，我们可以实现集合的遍历：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2022/05/11/java-mian-xiang-dui-xiang/"/>
      <url>/2022/05/11/java-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="设计对象并使用"><a href="#设计对象并使用" class="headerlink" title="设计对象并使用"></a>设计对象并使用</h2><ul><li><strong>类（设计图）：</strong>是对象共同特征的描述</li><li><strong>对象：</strong>是真实存在的具体实例</li></ul><p>在Java中，必须先设计类，才能创建对象并使用</p><img src="/2022/05/11/java-mian-xiang-dui-xiang/image-20220509105228063.png" class=""><p><strong>注意事项：</strong></p><ul><li>类名首字母建议大写，满足“驼峰模式”，不能用关键字，必须是合法标识符</li><li>一个Java文件中可以定义多个class类，但只能一个类是public修饰，而且public修饰的类名必须成为代码文件名</li><li>成员变量的完整定义格式是： 修饰符 数据类型 变量名称 = 初始化值; 一般无需指定初始化值，存在默认值</li></ul><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p><strong>作用</strong></p><ul><li>定义在类中的，可以用于初始化一个类的对象，并返回对象的地址</li></ul><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>调用构造器得到对象的格式</strong></p><p>类 变量名称 = new 构造器;</p><p><strong>分类和作用</strong></p><ul><li>无参数构造器：初始化对象时（默认存在的），成员变量的数据均采用默认值</li><li>有参数构造器：在初始化对象的时候，同时可以接收参数为对象进行赋值</li></ul><p><strong>注意事项</strong></p><ul><li>任何类定义出来，默认自带了无参数构造器，写不写都有</li><li>一旦定义了有参数构造器，那么无参数构造器就没有了，如果还想用无参数构造器，此时就需要自己手写一个无参数构造器</li></ul><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ul><li>可以出现在构造器、方法中，<strong>代表当前对象的地址</strong></li></ul><p><strong>作用</strong></p><ul><li>可以用于指定访问当前对象的成员变量、成员方法</li></ul><p>以this出现在有参数构造器中的用法为例，此时的this是当前对象的地址，就完美的将构造器中的name赋值给当前对象的成员变量name</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>面向对象的三大特征：封装、继承、多态</li><li>作用：告诉我们，如何正确设计对象的属性和方法</li><li>原则：对象代表什么，就得封装对应的数据，并提供数据对应的行为</li></ul><p><strong>如何封装</strong></p><ul><li>一般会把成员变量使用private隐藏起来，对外就不能直接访问了</li><li>提供public修饰的getter和setter方法暴露其取值和赋值</li></ul><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><ul><li>也可以称为实体类，其对象可以用于在程序中封装数据</li></ul><p><strong>标准JavaBean须满足如下书写要求：</strong></p><ul><li>成员变量使用private修饰</li><li>提供成员变量对应的setXxx() / getXxx()方法</li><li>必须提供一个无参数构造器；有参数构造器是可写可不写的</li></ul><p><strong>成员变量和局部变量的区别</strong></p><table><thead><tr><th align="center">区别</th><th align="center">成员变量</th><th align="center">局部变量</th></tr></thead><tbody><tr><td align="center">类中位置不同</td><td align="center">类中，方法外</td><td align="center">常见于方法中</td></tr><tr><td align="center">初始化值不同</td><td align="center">有默认值，无需初始化</td><td align="center">没有默认值，使用前需要完成赋值</td></tr><tr><td align="center">内存位置不同</td><td align="center">堆内存</td><td align="center">栈内存</td></tr><tr><td align="center">生命周期不同</td><td align="center">随着对象的创建而存在，随着对象的消失而消失</td><td align="center">随着方法的调用而存在，随着方法的运行结束而消失</td></tr><tr><td align="center">作用域</td><td align="center"></td><td align="center">在所归属的大括号中</td></tr></tbody></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>目标：完成电影信息的展示案例，理解面向对象变成的代码</li></ul><p>首先我们设计一个Movie的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>    <span class="token comment">// 1、成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> actor<span class="token punctuation">;</span>    <span class="token comment">// 3、构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> <span class="token class-name">String</span> actor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actor <span class="token operator">=</span> actor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2、getter + setter</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> actor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setActor</span><span class="token punctuation">(</span><span class="token class-name">String</span> actor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actor <span class="token operator">=</span> actor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建对象，并访问对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、设计电影类</span>        <span class="token comment">// 2、创建3个电影对象，封装电影的信息</span>        <span class="token comment">// 3、定义一个电影类型的数组，存储3部电影对象</span>        <span class="token class-name">Movie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> movies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        movies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token string">"《长津湖》"</span><span class="token punctuation">,</span> <span class="token number">9.7</span><span class="token punctuation">,</span> <span class="token string">"吴京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token string">"《我和我的父亲》"</span><span class="token punctuation">,</span> <span class="token number">9.6</span><span class="token punctuation">,</span> <span class="token string">"吴京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        movies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Movie</span><span class="token punctuation">(</span><span class="token string">"《朴水少年》"</span><span class="token punctuation">,</span> <span class="token number">9.5</span><span class="token punctuation">,</span> <span class="token string">"王川"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4、遍历数组中每个电影对象，然后获取它的信息展示出来</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> movies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Movie</span> m <span class="token operator">=</span> movies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电影名："</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得分："</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主演："</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HW6-GAN</title>
      <link href="/2022/05/06/hw6-gan/"/>
      <url>/2022/05/06/hw6-gan/</url>
      
        <content type="html"><![CDATA[<h2 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h2><p>这部分我将用GAN实现一个动画人脸的生成，利用的模型是DCGAN，它在原始GAN模型的基础上，将生成器和判别器的网络结构换成了当时已经十分成熟的卷积神经网络结构，并对卷积神经网络结构进行一定的调整，克服了原始GAN训练不稳定和梯度消失的问题。具体改变有：</p><ul><li>取消所有的pooling层。生成器中使用fractionally strided convolution代替pooling层，判别器中使用strided convolution代替pooling层。</li><li>在生成器和判别器中都使用批量标准化</li><li>去除了全连接层</li><li>生成器中使用ReLU作为激活函数，最后一层使用tanh激活函数</li><li>判别器中使用LeakyReLU作为激活函数</li></ul><p>DCGAN的网络结构如下图所示：</p><img src="/2022/05/06/hw6-gan/image-20220506195849410.png" class=""><p>现在让我们来实现这一部分，首先现在我们需要导入本作业需要的一些包，并设置随机种子的个数（这部分直接复制粘贴就好)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> os<span class="token keyword">import</span> glob<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable    <span class="token comment"># 产生随机分布</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> random<span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npseed <span class="token operator">=</span> <span class="token number">2022</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>需要使用transforms将图片转成以下格式：</p><ul><li>修改图片尺寸为(64, 64)</li><li>将数值从[0, 1]映射到[-1, 1]</li><li>转成tensor格式读入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Dataset</span><span class="token keyword">class</span> <span class="token class-name">CrypkoDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fnames<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fnames <span class="token operator">=</span> fnames        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fnames<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        fname <span class="token operator">=</span> self<span class="token punctuation">.</span>fnames<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_image<span class="token punctuation">(</span>fname<span class="token punctuation">)</span>   <span class="token comment"># 读取图片</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                <span class="token comment"># 对图片进行一定的修改</span>        <span class="token keyword">return</span> img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>制定transform规则并获取dataset</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fnames <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'./faces'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1. 修改图片尺寸为(64, 64)</span><span class="token comment"># 2. 将数值从 [0, 1] 线性映射到 [-1, 1]</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataset <span class="token operator">=</span> CrypkoDataset<span class="token punctuation">(</span>fnames<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示一组照片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">images <span class="token operator">=</span> <span class="token punctuation">[</span>dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>grid_img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>grid_img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/05/06/hw6-gan/output_7_2.png" class="">    <p>由于我们使用了transform将数据的范围变成了[-1, 1]，因此我们需要将其转换为[0, 1]，才能展示出正确的图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>grid_img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>grid_img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/05/06/hw6-gan/output_9_1.png" class=""><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>现在实现模型的部分，这一部分也可以自行修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 模型参数初始化</span><span class="token keyword">def</span> <span class="token function">weights_init</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    classname <span class="token operator">=</span> m<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    <span class="token keyword">if</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Conv'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>  <span class="token comment"># 均值为0，标准差为0.02的正态分布</span>    <span class="token keyword">elif</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'BatchNorm'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment"># 均值为1，标准差为0.02的正态分布</span>        <span class="token comment"># 生成器</span><span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Generator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dconv_bn_relu</span><span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l2_5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            dconv_bn_relu<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            dconv_bn_relu<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            dconv_bn_relu<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>l1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span>y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>l2_5<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> y<span class="token comment"># 判别器</span><span class="token keyword">class</span> <span class="token class-name">Discriminator</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Discriminator<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">conv_bn_lrelu</span><span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_dim<span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ls <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            conv_bn_lrelu<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            conv_bn_lrelu<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            conv_bn_lrelu<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>                self<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>weights_init<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> y <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置超参数"><a href="#设置超参数" class="headerlink" title="设置超参数"></a>设置超参数</h2><p>这部分可以进行调节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">64</span>z_dim <span class="token operator">=</span> <span class="token number">100</span>z_sample <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 随机生成100个样本，用于检测模型的训练结果</span>lr <span class="token operator">=</span> <span class="token number">1e-4</span>n_epoch <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p><strong>准备好dataloader，model，loss criterion，optimizer</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成一个文件目录，用于保存模型结果</span>save_dir <span class="token operator">=</span> <span class="token string">'./logs'</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># dataloader</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># model</span>G <span class="token operator">=</span> Generator<span class="token punctuation">(</span>in_dim<span class="token operator">=</span>z_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>D <span class="token operator">=</span> Discriminator<span class="token punctuation">(</span>in_dim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>G<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># loss criterion</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># optimizer</span>opt_G <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>G<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>opt_D <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>D<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Training</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        imgs <span class="token operator">=</span> data<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>                bs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token triple-quoted-string string">"""训练D"""</span>        z <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        g_imgs <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>                      <span class="token comment"># 生成的概率分布</span>        r_imgs <span class="token operator">=</span> Variable<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 真实数据的概率分布</span>                <span class="token comment"># 对两种数据打标签，真实为1，生成的为0</span>        g_label <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        r_label <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 两种数据经过判别器</span>        g_logits <span class="token operator">=</span> D<span class="token punctuation">(</span>g_imgs<span class="token punctuation">)</span>        r_logits <span class="token operator">=</span> D<span class="token punctuation">(</span>r_imgs<span class="token punctuation">)</span>                <span class="token comment"># 计算D的loss</span>        g_loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>g_logits<span class="token punctuation">,</span> g_label<span class="token punctuation">)</span>        r_loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>r_logits<span class="token punctuation">,</span> r_label<span class="token punctuation">)</span>        loss_D <span class="token operator">=</span> <span class="token punctuation">(</span>g_loss <span class="token operator">+</span> r_loss<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>                <span class="token comment"># 后向传播更新D的模型参数</span>        D<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss_D<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt_D<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token triple-quoted-string string">"""训练G"""</span>        z <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        g_imgs <span class="token operator">=</span> G<span class="token punctuation">(</span>z<span class="token punctuation">)</span>                <span class="token comment"># 生成数据经过判别器</span>        g_logits <span class="token operator">=</span> D<span class="token punctuation">(</span>g_imgs<span class="token punctuation">)</span>                <span class="token comment"># 计算loss</span>        loss_G <span class="token operator">=</span> criterion<span class="token punctuation">(</span>g_logits<span class="token punctuation">,</span> r_label<span class="token punctuation">)</span>     <span class="token comment"># 生成器的目的是生成和真实数据一样的分布，因此用的是r_label</span>                <span class="token comment"># 后向传播更新G的模型参数</span>        G<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss_G<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt_G<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 打印当前模型训练的状态</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\rEpoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>n_epoch<span class="token punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> Loss_D: </span><span class="token interpolation"><span class="token punctuation">{</span>loss_D<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> Loss_G: </span><span class="token interpolation"><span class="token punctuation">{</span>loss_G<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 每进行一次epoch，生成一组图片，用于评估模型训练的情况</span>    G<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    g_imgs_sample <span class="token operator">=</span> <span class="token punctuation">(</span>G<span class="token punctuation">(</span>z_sample<span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'Epoch_</span><span class="token interpolation"><span class="token punctuation">{</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">03d</span><span class="token punctuation">}</span></span><span class="token string">.jpg'</span></span><span class="token punctuation">)</span>    torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>save_image<span class="token punctuation">(</span>g_imgs_sample<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f' | save samples to </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 展示生成的图片</span>    grid_img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>g_imgs_sample<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>grid_img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 将G转换成训练模型</span>    G<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 模型保存</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>G<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'dcgan_g.pth'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>D<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'dcgan_d.pth'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Epoch [1/10] 1115/1115 Loss_D: 0.5579 Loss_G: 2.0209 | save samples to ./logs\Epoch_001.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_1.png" class="">    <pre><code>Epoch [2/10] 1115/1115 Loss_D: 0.2129 Loss_G: 6.2952 | save samples to ./logs\Epoch_002.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_3.png" class=""><pre><code>Epoch [3/10] 1115/1115 Loss_D: 0.2469 Loss_G: 2.8889 | save samples to ./logs\Epoch_003.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_5.png" class=""><pre><code>Epoch [4/10] 1115/1115 Loss_D: 0.3291 Loss_G: 3.8916 | save samples to ./logs\Epoch_004.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_7.png" class=""><pre><code>Epoch [5/10] 1115/1115 Loss_D: 0.2093 Loss_G: 3.2604 | save samples to ./logs\Epoch_005.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_9.png" class=""><pre><code>Epoch [6/10] 1115/1115 Loss_D: 0.1691 Loss_G: 3.0890 | save samples to ./logs\Epoch_006.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_11.png" class=""><pre><code>Epoch [7/10] 1115/1115 Loss_D: 0.1185 Loss_G: 3.0753 | save samples to ./logs\Epoch_007.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_13.png" class=""><pre><code>Epoch [8/10] 1115/1115 Loss_D: 0.1162 Loss_G: 3.1938 | save samples to ./logs\Epoch_008.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_15.png" class=""><pre><code>Epoch [9/10] 1115/1115 Loss_D: 0.1183 Loss_G: 4.2176 | save samples to ./logs\Epoch_009.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_17.png" class=""><pre><code>Epoch [10/10] 1115/1115 Loss_D: 0.1022 Loss_G: 2.4000 | save samples to ./logs\Epoch_010.jpg</code></pre><img src="/2022/05/06/hw6-gan/output_17_19.png" class=""><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>现在我们就可以利用我们训练好的Generator来随机生成图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 模型加载</span>G <span class="token operator">=</span> Generator<span class="token punctuation">(</span>z_dim<span class="token punctuation">)</span>G<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span><span class="token string">'dcgan_g.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>G<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>G<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span> n_output <span class="token operator">=</span> <span class="token number">20</span>z_sample <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_output<span class="token punctuation">,</span> z_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>imgs_sample <span class="token operator">=</span> <span class="token punctuation">(</span>G<span class="token punctuation">(</span>z_sample<span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'result.jpg'</span></span><span class="token punctuation">)</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>save_image<span class="token punctuation">(</span>imgs_sample<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># show image</span>grid_img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>imgs_sample<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>grid_img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/05/06/hw6-gan/output_19_1.png" class=""><p>虽然图中的动画人物看起来很怪，但也有几分和动画人物相似，并且有的已经非常像了。这里我只把n_epoch设置为10，如果将n_epoch设置大点，我想结果会好点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/1511.06434">Radford, Alec, Luke Metz, and Soumith Chintala. “Unsupervised representation learning with deep convolutional generative adversarial networks.”arXiv preprint arXiv:1511.06434(2015).</a></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021作业部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW2-Classifier</title>
      <link href="/2022/05/05/hw2-classifier/"/>
      <url>/2022/05/05/hw2-classifier/</url>
      
        <content type="html"><![CDATA[<h2 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h2><p>本作业处理的是一个phoneme分类，是一个多元分类问题。phoneme是语言的一种语音的一种语音单位，可以用来区分一个词和另一个词，如下面黑体部分。</p><ul><li><strong>b</strong>at / <strong>p</strong>at , b<strong>a</strong>d / b<strong>e</strong>d</li></ul><p>作业使用的数据集是<a href="https://catalog.ldc.upenn.edu/LDC93S1">TIMIT Acoustic-Phonetic Continuous Speech Corpus</a>，采用的数据格式如下：</p><p><strong>timit_11/</strong></p><ul><li>train_11.npy –&gt; 训练数据</li><li>train_label_11.npy –&gt; 逐帧phoneme标签（0-38）</li><li>test_11.npy –&gt; 测试数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入需要的包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> Dataset<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltseed <span class="token operator">=</span> <span class="token number">2022</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义一些函数"><a href="#定义一些函数" class="headerlink" title="定义一些函数"></a>定义一些函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Get device (if GPU is available, use GPU) '''</span>    <span class="token keyword">return</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token keyword">def</span> <span class="token function">plot_learning_curve</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot learning curve of your model (train &amp; dev loss) '''</span>    total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x_1 <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">)</span>    x_2 <span class="token operator">=</span> x_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_1<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_2<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:cyan'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dev'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Training steps'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'MSE loss'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Learning curve of {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_accuracy</span><span class="token punctuation">(</span>acc_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot accuracy of your model (train &amp; dev acc) '''</span>    total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> acc_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:cyan'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dev'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Training epochs'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Learning curve of {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>从.npy文件中加载训练和测试数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loading data ..."</span><span class="token punctuation">)</span>data_root <span class="token operator">=</span> <span class="token string">'./timit_11/'</span>train <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data_root <span class="token operator">+</span> <span class="token string">'train_11.npy'</span><span class="token punctuation">)</span>train_label <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data_root <span class="token operator">+</span> <span class="token string">'train_label_11.npy'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data_root <span class="token operator">+</span> <span class="token string">'test_11.npy'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Size of training data: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Size of testing data: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Loading data ...Size of training data: (1229932, 429)Size of testing data: (451552, 429)</code></pre><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TIMITDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> y <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> y<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>label <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>label <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将训练数据划分为训练集和验证集，你可以通过改变变量 VAL_RATIO 来修改验证集的比例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">VAL_RATIO <span class="token operator">=</span> <span class="token number">0.2</span>percent <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> VAL_RATIO<span class="token punctuation">)</span><span class="token punctuation">)</span>train_x<span class="token punctuation">,</span> val_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">:</span> percent<span class="token punctuation">]</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span>percent<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_label<span class="token punctuation">[</span><span class="token punctuation">:</span> percent<span class="token punctuation">]</span><span class="token punctuation">,</span> train_label<span class="token punctuation">[</span>percent<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Size of training set: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Size of validation set: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>val_x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Size of training set: (983945, 429)Size of validation set: (245987, 429)</code></pre><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><p>根据Dataset制作DataLoader，你可以修改下面的变量 BATCH_SIZE</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BATCH_SIZE<span class="token operator">=</span> <span class="token number">64</span>train_set <span class="token operator">=</span> TIMITDataset<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>val_set <span class="token operator">=</span> TIMITDataset<span class="token punctuation">(</span>val_x<span class="token punctuation">,</span> val_y<span class="token punctuation">)</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型实现相关函数"><a href="#模型实现相关函数" class="headerlink" title="模型实现相关函数"></a>模型实现相关函数</h2><h3 id="模型搭建"><a href="#模型搭建" class="headerlink" title="模型搭建"></a>模型搭建</h3><p>这部分可以自行修改，注意输入数据的维度为429，数据类别有39种</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Classifier</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Classifier<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 训练模型 '''</span>    n_epochs <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'n_epochs'</span><span class="token punctuation">]</span>   <span class="token comment"># 最大迭代次数</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># optimizer使用Adam</span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 损失函数使用CrossEntropyLoss</span>        best_acc <span class="token operator">=</span> <span class="token number">0.0</span>             <span class="token comment"># 用于记录验证时最好的准确率，并将此时的模型</span>    loss_record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token comment"># 记录训练损失</span>    acc_record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token comment"># 记录预测准确度</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        train_acc<span class="token punctuation">,</span> train_loss <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将模型参数的 gradient 至0</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 前向传播</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算loss</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 利用后向传播算出每个参数的gradient</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 更新模型参数</span>                        train_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        train_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>        acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>                <span class="token comment"># 每次迭代后，在验证集中验证你的模型</span>        dev_acc<span class="token punctuation">,</span> dev_loss <span class="token operator">=</span> dev<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>        acc_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dev_acc<span class="token punctuation">)</span>        loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dev_loss<span class="token punctuation">)</span>                <span class="token comment"># 将结果打印出来</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[%02d/%02d] %2.2f sec(s) Train Acc: %3.6f Loss: %3.6f | Val Acc: %3.6f loss: %3.6f'</span> <span class="token operator">%</span> \              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n_epochs<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> dev_acc<span class="token punctuation">,</span> dev_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 当模型性能提升时保存模型</span>        <span class="token keyword">if</span> dev_acc <span class="token operator">&gt;</span> best_acc<span class="token punctuation">:</span>            best_acc <span class="token operator">=</span> dev_acc            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saving model (epoch = </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">02d</span><span class="token punctuation">}</span></span><span class="token string">, accuracy = </span><span class="token interpolation"><span class="token punctuation">{</span>best_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 保存模型到指定路径</span>                <span class="token keyword">return</span> best_acc<span class="token punctuation">,</span> loss_record<span class="token punctuation">,</span> acc_record<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dev</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dev_loss<span class="token punctuation">,</span> dev_acc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 前向传播</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算loss</span>            dev_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            dev_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    dev_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    dev_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">)</span>        <span class="token keyword">return</span> dev_acc<span class="token punctuation">,</span> dev_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置超参数"><a href="#设置超参数" class="headerlink" title="设置超参数"></a>设置超参数</h2><p>config中包含模型训练的超参数（可以进行调节）和保存模型的路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> get_device<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'models'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 可以进行调节来提升模型性能</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'n_epochs'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                <span class="token comment"># 最大迭代次数</span>    <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.0001</span><span class="token punctuation">,</span>    <span class="token string">'save_path'</span><span class="token punctuation">:</span> <span class="token string">'models/model.pth'</span>  <span class="token comment"># 模型保存路径</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型加载和训练"><a href="#模型加载和训练" class="headerlink" title="模型加载和训练"></a>模型加载和训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>best_acc<span class="token punctuation">,</span> loss_record<span class="token punctuation">,</span> acc_record <span class="token operator">=</span> train<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[01/20] 61.04 sec(s) Train Acc: 0.575976 Loss: 1.418989 | Val Acc: 0.679743 loss: 1.018808Saving model (epoch = 01, accuracy = 0.6797)[02/20] 59.27 sec(s) Train Acc: 0.636308 Loss: 1.162909 | Val Acc: 0.697712 loss: 0.942522Saving model (epoch = 02, accuracy = 0.6977)[03/20] 57.94 sec(s) Train Acc: 0.655783 Loss: 1.090724 | Val Acc: 0.708123 loss: 0.903914Saving model (epoch = 03, accuracy = 0.7081)[04/20] 57.50 sec(s) Train Acc: 0.667945 Loss: 1.045382 | Val Acc: 0.716786 loss: 0.870373Saving model (epoch = 04, accuracy = 0.7168)[05/20] 57.50 sec(s) Train Acc: 0.676864 Loss: 1.011510 | Val Acc: 0.720506 loss: 0.856811Saving model (epoch = 05, accuracy = 0.7205)[06/20] 57.69 sec(s) Train Acc: 0.684058 Loss: 0.983198 | Val Acc: 0.724416 loss: 0.837952Saving model (epoch = 06, accuracy = 0.7244)[07/20] 57.36 sec(s) Train Acc: 0.690473 Loss: 0.961224 | Val Acc: 0.726238 loss: 0.831526Saving model (epoch = 07, accuracy = 0.7262)[08/20] 56.88 sec(s) Train Acc: 0.695339 Loss: 0.943797 | Val Acc: 0.728803 loss: 0.821308Saving model (epoch = 08, accuracy = 0.7288)[09/20] 56.70 sec(s) Train Acc: 0.699613 Loss: 0.928245 | Val Acc: 0.729120 loss: 0.819629Saving model (epoch = 09, accuracy = 0.7291)[10/20] 57.16 sec(s) Train Acc: 0.703794 Loss: 0.913152 | Val Acc: 0.733738 loss: 0.803043Saving model (epoch = 10, accuracy = 0.7337)[11/20] 56.80 sec(s) Train Acc: 0.706580 Loss: 0.901354 | Val Acc: 0.735575 loss: 0.798162Saving model (epoch = 11, accuracy = 0.7356)[12/20] 56.79 sec(s) Train Acc: 0.709608 Loss: 0.888328 | Val Acc: 0.735815 loss: 0.793815Saving model (epoch = 12, accuracy = 0.7358)[13/20] 57.12 sec(s) Train Acc: 0.712408 Loss: 0.879705 | Val Acc: 0.736096 loss: 0.796301Saving model (epoch = 13, accuracy = 0.7361)[14/20] 57.16 sec(s) Train Acc: 0.715146 Loss: 0.869005 | Val Acc: 0.738202 loss: 0.787290Saving model (epoch = 14, accuracy = 0.7382)[15/20] 57.15 sec(s) Train Acc: 0.717777 Loss: 0.860623 | Val Acc: 0.737059 loss: 0.793017[16/20] 57.05 sec(s) Train Acc: 0.719551 Loss: 0.853531 | Val Acc: 0.737689 loss: 0.788586[17/20] 57.11 sec(s) Train Acc: 0.721698 Loss: 0.845117 | Val Acc: 0.739344 loss: 0.784496Saving model (epoch = 17, accuracy = 0.7393)[18/20] 57.78 sec(s) Train Acc: 0.723899 Loss: 0.838226 | Val Acc: 0.740059 loss: 0.784261Saving model (epoch = 18, accuracy = 0.7401)[19/20] 58.68 sec(s) Train Acc: 0.725527 Loss: 0.832501 | Val Acc: 0.739783 loss: 0.782018[20/20] 58.36 sec(s) Train Acc: 0.726496 Loss: 0.827860 | Val Acc: 0.742173 loss: 0.777942Saving model (epoch = 20, accuracy = 0.7422)</code></pre><p><strong>可视化显示</strong></p><p>可视化显示可以看出训练过程中是否存在过拟合、模型不合适等问题</p><p>展示训练集和验证集中loss的变化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_learning_curve<span class="token punctuation">(</span>loss_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'deep model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    </p><img src="/2022/05/05/hw2-classifier/output_23_0-16517416642191.png" class=""><p>​    </p><p>展示训练集和验证集中acc随迭代次数的变化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_accuracy<span class="token punctuation">(</span>acc_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'deep model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/05/05/hw2-classifier/output_25_0-16517416642192.png" class=""><p>​    </p><h2 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h2><p>创建测试dataloader，从模型保存路径中加载模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建dataloader</span>test_set <span class="token operator">=</span> TIMITDataset<span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 加载模型</span><span class="token keyword">del</span> modelmodel <span class="token operator">=</span> Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>预测</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>                                x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>     <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                          pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        pred <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> pred<span class="token punctuation">:</span>            preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将测试集上的预测结果保存到.csv文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"predict.csv"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Id,Category\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> y <span class="token keyword">in</span>  <span class="token builtin">enumerate</span><span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{},{}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021作业部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Classifier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/2022/05/04/java-fang-fa/"/>
      <url>/2022/05/04/java-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="方法定义和调用"><a href="#方法定义和调用" class="headerlink" title="方法定义和调用"></a>方法定义和调用</h2><p>方法是一种语法结构，它可以把一段代码封装成一个功能，以方便重复调用，这样就提高了代码的重复性，使程序逻辑更加清晰。</p><p>以两个整数求和为例子，方法定义如下，函数声明中第一个int是<strong>返回值类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以在函数中调用，调用格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意事项</strong></p><ul><li><p>方法的编写顺序无所谓，方法与方法之间是平级关系，不能嵌套定义</p></li><li><p>方法的返回值类型为void（无返回值），方法内则不能使用return返回数据，如果方法的返回值类型写了具体类型，方法内部则必须使用return返回对应类型的数据</p></li><li><p>return语句下面，不能编写代码，因为执行不到，属于无效的代码</p></li><li><p>方法不调用不执行，调用时必须严格匹配方法的参数情况</p></li><li><p>有返回值的方法调用时可以选择定义变量接受结果，或者直接输出调用，甚至直接调用；无返回值方法的调用只能直接调用一下</p></li></ul><h2 id="方法的参数传递机制"><a href="#方法的参数传递机制" class="headerlink" title="方法的参数传递机制"></a>方法的参数传递机制</h2><p><strong>Java的参数传递机制：值传递</strong></p><ul><li>在传输实参给方法的形参的时候，并不是传输实参变量本身，而是传输实参变量中存储的值</li></ul><p><strong>基本类型的传递机制</strong></p><ul><li><strong>形参</strong>：以方法为例，就是方法定义时的变量</li><li><strong>实参</strong>：在方法内部定义的变量</li><li>传输的是实参存储的值</li></ul><p><strong>引用类型的参数传递</strong></p><p>也是<strong>值传递</strong>，与基本类型的参数在传递时的不同：基本类型的参数传输存储的数据值，而引用类型的参数传输存储的<strong>地址值</strong>。</p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>同一个类中，出现多个方法名称相同，但是形参列表是不同的，那么这些方法就是重载方法</li></ul><p><strong>作用</strong></p><ul><li>可读性好，方法名称相同提示是同一类型的功能，通过形参不同实现功能差异化的选择，这是一种专业的代码设计，还可以提高开发效率</li></ul><p><strong>识别技巧</strong></p><ul><li>只要是同一个类中，方法名称相同、形参列表不同，那么它们就是重载的方法，其他不关心</li><li>形参列表不同指的是：形参的<strong>个数、类型、顺序</strong>不同，不关心形参的名称</li></ul><p><strong>return关键字单独使用</strong></p><ul><li>return; —&gt; 可以立即<strong>跳出并结束当前方法的执行</strong>；return关键字单独使用可以放在任何方法中</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2022/05/04/shu-zu/"/>
      <url>/2022/05/04/shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><ul><li>数组就是用来存储一批同种类型数据的内存区域（可以理解为容器）</li></ul><h3 id="静态初始化数组"><a href="#静态初始化数组" class="headerlink" title="静态初始化数组"></a>静态初始化数组</h3><p>定义数组的时候直接给数组赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 完整格式</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数组类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span> 元素<span class="token number">2</span><span class="token punctuation">,</span> 元素<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 简化格式</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token punctuation">{</span>元素<span class="token number">1</span><span class="token punctuation">,</span> 元素<span class="token number">2</span><span class="token punctuation">,</span> 元素<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数组变量名中存储的是数组在内存中的地址，数组是引用类型</li></ul><p><strong>数组的访问</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数组名称[索引]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 取值</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                         <span class="token comment">// 赋值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong></p><ul><li><p>也可以写成”<strong>数组类型 数组名[]</strong>“，但习惯于前面的定义格式</p></li><li><p>什么类型的数组存放什么类型的数据，否则报错</p></li><li><p>数组一旦定义出来，程序执行过程中，长度和类型就固定了</p></li></ul><h3 id="动态初始化数组"><a href="#动态初始化数组" class="headerlink" title="动态初始化数组"></a>动态初始化数组</h3><ul><li>定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式</span>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>长度<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>动态初始化元素默认值</strong></p><img src="/2022/05/04/shu-zu/image-20220425153733090.png" class=""><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><ul><li>一个一个的把数据访问一遍</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 快捷方式：ages.fori + enter</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ages<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java内存分配介绍"><a href="#Java内存分配介绍" class="headerlink" title="Java内存分配介绍"></a>Java内存分配介绍</h2><ul><li>方法区：字节码文件加载时进入的内存</li><li>栈：方法运行时所进入的内存，变量也是在这里</li><li>堆：new 出来的东西会在这块内存中开辟空间并产生地址</li></ul><img src="/2022/05/04/shu-zu/image-20220504093328882.png" class=""><p>把一个数组赋值给另一个数组（地址），则这两个数组变量指向同一个数组对象，改变其中一个数组里面的值，另一个数组也会随着改变。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序流程控制</title>
      <link href="/2022/05/04/cheng-xu-liu-cheng-kong-zhi/"/>
      <url>/2022/05/04/cheng-xu-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="If分支"><a href="#If分支" class="headerlink" title="If分支"></a>If分支</h3><ul><li>根据判定的结果决定执行某个分支的代码</li></ul><p><strong>if分支的三种格式</strong></p><ul><li>格式1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>格式2</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>格式3</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">else</span><span class="token punctuation">{</span> 代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h3><ul><li>也是匹配条件去执行分支，适合做值匹配的分支选择。</li></ul><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>执行代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>执行代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">case</span> 值n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>执行代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>执行代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>switch分支注意事项</strong></p><ul><li>表达式类型只能是byte、short、int、char、String，不支持double、float、long</li><li>case给出的值不允许重复，且只能是字面量，不能是变量</li><li>不要忘记写break，否则会出现穿透现象</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>控制一段代码反复执行很多次</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化语句<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>迭代语句<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体语句（重复执行的代码）<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">{</span>循环体语句<span class="token punctuation">;</span>迭代语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p><strong>格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span>    迭代语句<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>特点：一定会运行一次循环体语句</li></ul><p>基于这三个循环结构，可以实现死循环和嵌套循环</p><h2 id="跳转关键词"><a href="#跳转关键词" class="headerlink" title="跳转关键词"></a>跳转关键词</h2><ul><li>break ： 跳出并结束当前所在循环的执行</li><li>continue ： 跳出当前循环的当次执行，进入循环的下一次</li></ul><p><strong>注意事项</strong></p><p>break只能用于结束所在循环，或者结束所在switch分支的执行；continue只能在循环中进行使用</p><h2 id="随机数Random"><a href="#随机数Random" class="headerlink" title="随机数Random"></a>随机数Random</h2><ul><li>用于在程序中获取随机数的技术</li></ul><p><strong>Random的使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤</strong>：导包$\Rightarrow$创建对象$\Rightarrow$调用相关函数</p><p>上述代码中 nextInt(n) 功能只能生成：0至n-1之间的随机数，不包含n。因此要生成区间随机数可以用减加法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 3 - 17 ==&gt; (0 - 14) + 3</span><span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2022/05/04/java-ji-chu-yu-fa/"/>
      <url>/2022/05/04/java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong>手动注释</strong></p><ul><li>单行注释： //</li><li>多行注释： /* */</li><li>文档注释： /** */ 注意：文档注释的内容将来可以提取到程序说明书中去</li></ul><p><strong>快捷注释</strong></p><ul><li>单行注释： Ctrl + /</li><li>多行注释： Ctrl + Shift + /</li></ul><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>计算机是用来处理数据的，字面量就是告诉程序员：数据在程序中的书写格式。</p><p><strong>常用数据</strong></p><img src="/2022/05/04/java-ji-chu-yu-fa/image-20220328171031761.png" class=""><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量的作用</strong></p><ul><li>存储一个数据，存储的数据可以变化</li></ul><p><strong>变量定义的格式</strong></p><ul><li>数据类型 变量名称 = 初始值;</li><li>= 赋值：从右边往左执行</li></ul><p><strong>变量使用的注意事项</strong></p><ul><li>变量要先声明再使用</li><li>变量声明后，不能存储其他类型的数据</li><li>变量的有效范围是从定义开始到”}”截止，且在同一范围内部不能定义2个同名变量</li><li>变量定义的时候可以没有初始值，但是在使用的时候必须给初始值</li></ul><p><strong>注：</strong>Java程序中支持书写二进制、八进制、十六进制的数据，分别需要以0B或0b、0、0X或0x开头</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>作用</strong></p><ul><li>约束变量存储数据的格式</li></ul><p><strong>分类</strong></p><ul><li>引用数据类型（如String等）</li><li>基本数据类型：4大类8种</li></ul><img src="/2022/05/04/java-ji-chu-yu-fa/image-20220328192903776.png" class=""><h2 id="关键字、标识符"><a href="#关键字、标识符" class="headerlink" title="关键字、标识符"></a>关键字、标识符</h2><p><strong>关键字</strong></p><ul><li>Java自己保留的一些单词，作为特殊功能的</li><li>不能用来作为类名或者变量的名称</li></ul><img src="/2022/05/04/java-ji-chu-yu-fa/image-20220328193625441.png" class=""><p><strong>标识符</strong></p><ul><li>标识符就是由一些字符、符号组合起来的名称，用于给类，方法，变量等起名字的规则</li></ul><p><strong>标识符的要求</strong></p><ul><li>基本要求：由数字、字母、下划线(_)和美元符($)等组成</li><li>强制要求：不能以数字开头、不能是关键字、区分大小写</li></ul><p><strong>命名指导规范</strong></p><ul><li>变量名称：满足标识符规则，建议全英文、有意义、首字母小写，满足“驼峰模式”，例如：int studentNumber = 59</li><li>类名称：满足标识符规则，建议全英文、有意义、首字母大写，满足“驼峰模式”，例如：HelloWorld.java</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java快速入门和IDEA的使用</title>
      <link href="/2022/05/04/java-kuai-su-ru-men-he-idea-de-shi-yong/"/>
      <url>/2022/05/04/java-kuai-su-ru-men-he-idea-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="入门程序-HelloWorld"><a href="#入门程序-HelloWorld" class="headerlink" title="入门程序-HelloWorld"></a>入门程序-HelloWorld</h2><p>1、开发一个Java程序要经历的步骤</p><ul><li><strong>编写、编译(javac)、运行(java)</strong></li></ul><p>2、Java代码编写的基本要求</p><ul><li>文件名称的后缀必须是java结尾</li><li>文件名称必须与代码的类名称一致</li><li>必须使用英文模式下的符号</li></ul><p>3、JDK(Java Development Kit，Java开发工具包)的组成</p><ul><li><strong>JVM</strong>(Java Virtual Machine)：Java 虚拟机，正真运行Java程序的地方</li><li><strong>核心类库</strong>：Java自己写好的程序，给程序员自己的程序调用的</li><li><strong>JRE</strong>(Java Runtime Enviroment)：Java的运行环境，包括上面两个</li><li><strong>开发工具</strong>：javac、java…</li></ul><p>以HelloWorld程序为例，先用javac编译HelloWorld.java文件生成HelloWorld.class文件，然后通过java HelloWorld指令送到JRE中，JRE通过调用核心类库，然后送到JVM中运行。</p><h2 id="IDEA入门程序"><a href="#IDEA入门程序" class="headerlink" title="IDEA入门程序"></a>IDEA入门程序</h2><p>1、IDEA的结构</p><ul><li><strong>project - module - package - class</strong></li><li>project中可以创建多个module</li><li>module中可以创建多个package</li><li>package中可以创建多个class</li></ul><p>2、新建</p><ul><li><strong>new project / module / package / class</strong></li></ul><p>3、常用快捷键</p><ul><li>main/psvm、sout、….           快速输入相关代码</li><li>Ctrl + D                                      复制当前行数据到下一行</li><li>Ctrl + Y                                       删除所在行，建议用Ctrl + X</li><li>Ctrl + Alt + L                             格式化代码</li><li>Ctrl + /， Ctrl + Shift + /          对代码进行注释</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习的可解释性</title>
      <link href="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/"/>
      <url>/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们都知道神经网络是一个黑箱模型，虽然它在测试集的准确率可以达到很高，但很难解释清楚其中缘由。而有些模型像线性模型、决策树等虽然很容易解释，但模型往往不够强大，在测试集上有很差的表现。然而，在测试集上表现好并不意味着模型很智能，在一些领域中，我们不但需要模型的性能好，还需要知道为什么，我们才会放心的使用这个模型。如当我们用ML挑选简历时，我们需要知道机器学习模型是依据应聘人的那些特征做出推荐的决定，而不单单是该模型在测试集中表现好。</p><p>可解释性人工智能（Explainable AI）这个技术可以用于填补这个鸿沟，但可解释性并不意味着我们要完全明白ML模型是如何运作的，就像我们不完全知道人类的大脑运行的原理，但是我们相信人类做出的决定。我们需要的只是ML模型给我一个它做出决定的理由，而这个理由可以被我们和我们的顾客以及老板满意。</p><h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>机器学习的可解释性包括两个方面，一个是local explanation，另一个是global explanation。以图像分类器为例，local explanation需要回答的是为什么你觉得这张图片属于这个类别？而global explanation需要回答的是这些类别具有什么样的特征？</p><h3 id="Local-explanation"><a href="#Local-explanation" class="headerlink" title="Local explanation"></a>Local explanation</h3><p>仍然以图像分类器为例，Local explanation的目标是每个component对于最终结果的重要性程度，这可以通过移动或修改其中一个component来看模型输出的变化来实现，模型输出改变越大，意味着这个component越重要。</p><p><strong>基于梯度的方法</strong></p><p>假设输入为一张图像$x$，它有很多component ${x_{1},x_{2},…,x_{N}}$ 组成。如果输入是image，则component一般是pixel，segment等。如果输入是text，则component一般是word。现在我们依次给每个component加上一个$\Delta x$，对应就会得到一个loss $\Delta e$（模型输出和真实值之间）。我们想要知道每个component对于模型判断的重要性，只需计算对应的$|\frac{\Delta e}{\Delta x}|=|\frac{\partial e}{\partial x_{n}}|$得到。利用这些数值，我们可以绘制saliency map，如下图，亮度越高（即前面计算的数值越大）的区域代表这个component对于预测结果的影响越大</p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503203524561.png" class=""><p>基于梯度来判断component重要性的方法也存在局限性：Noisy Gradient和Gradient Saturation</p><p>Noisy Gradient是有些梯度会非常大（如下图），我们可以通过在计算梯度时添加多个扰动，然后计算加入扰动后的平均梯度避免，这种方法被称作SmoothGrad，相关见论文<a href="https://arxiv.org/abs/1706.03825">Randomly add noises to the input image, get saliency maps of the noisy images, and average them</a></p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503204447762.png" class=""><p>Gradient Saturation是指某个因素对图片的预测起到了推动作用，但是这个作用是有限的，超过一定程度后就不再增加预测的几率。以预测大象这个类别为例，很明显鼻子的长度是一个很重要的影响因素。随着鼻子长度的增加，预测的几率的几率会增加，但超过一定数值后，预测概率不会增加，即出现变化率为0的情况，但这个鼻子长度的动物已经不能算是大象了。</p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503205121997.png" class=""><h3 id="Global-explanation"><a href="#Global-explanation" class="headerlink" title="Global explanation"></a>Global explanation</h3><p>假设我们已经训练好一个CNN网络结构，将一张图片X输入CNN，在每一个filter后提取一个feature map，每个feature map都有对应的特征值$a_{ij}$，我们可以通过使这些特征值之和最大为目标找到对应的输入X，通过观察这个输入的特征我们就可以判断这个filter可以侦察到图片的某些特征。或者我们可以以输出为目标，找到输出为某种类别概率最高对应的输入X即可得到该类别图片对应有哪些特征？</p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503210224555.png" class=""><p>但事实上，我们更多时候我们找到的X是一堆杂讯，我们根本不能从中学习到什么？其中一个解决方法是在优化目标上加上一个限制R(X)，R(X)应符合图案本身的设计，同时你还需调影响结果的超参数。下面展示<a href="https://arxiv.org/abs/1506.06579">Understanding Neural Networks Through Deep Visualization</a>侦察到各种类别对应的图片特征。</p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503211706831.png" class=""><p>另外还有一种更有效的方式，利用Generator。利用GAN训练一个Image Generator，可以通过低维度的向量通过Generator得到一个图片。与前面通过对应某个类别概率最大找到模型对应输入X不同的是，这里我们找到对应的输入z，然后将这个z输入Generator中得到Image X。借助这个图片，我们就可以找出该类别具有的一些特征。</p><img src="/2022/05/03/ji-qi-xue-xi-de-ke-jie-shi-xing/image-20220503212409392.png" class=""><p>推荐论文：<a href="https://arxiv.org/abs/1612.00005">Plug &amp; Play Generative Networks: Conditional Iterative Generation of Images in Latent Space</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.youtube.com/watch?v=WQY85vaQfTI">李宏毅2021机器学习课程</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Explainable AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对抗攻击与防御</title>
      <link href="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/"/>
      <url>/2022/04/30/dui-kang-gong-ji-yu-fang-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对抗攻击英文为adversarial attack，即对输入样本添加一些人无法察觉的细微改动，导致模型以高置信度输出一个错误的答案。在现实生活中，我们建立的系统很多时候会遇到干扰，甚至是人为的蓄意攻击，如垃圾邮件、恶意软件和网络入侵等。因此机器训练出来的模型不光性能要好，还要能够对抗人类的恶意，这就是对抗攻击与防御产生的动机。</p><h2 id="对抗攻击"><a href="#对抗攻击" class="headerlink" title="对抗攻击"></a>对抗攻击</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以图片攻击为例，图片可以看成一个很长的向量，如果在一些重要的像素部分加上一个很小的杂讯，再把它输入到神经网络。虽然我们人眼识别不出来这个改动，但通过深度学习训练出来的分类可能就会误判。下图只是为了直观，但在实际应用中这种攻击人眼是识别不出来的。</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220429154701030.png" class=""><p>通常没有被攻击的图片称为Benign Image，被攻击的图片称为Attacked Image。按照攻击得到的类别，对抗攻击可以分为：</p><ul><li>定向攻击（targeted attack）：误分类成一个指定的类别</li><li>非定向攻击（non-targeted attack）：误分类成其他类别（只要不是正确的类别即可）</li></ul><h3 id="数学理论"><a href="#数学理论" class="headerlink" title="数学理论"></a>数学理论</h3><p>假设benign image是$x^{0}$，输入到一个图像分类器中，输出为$y^{0}=f(x^{0})$，该图片对应的真实分类为cat，$\overset{-}{y}$</p><p>被攻击后的输入是x，输出$y=f(x)$，想要攻击成功的话，就得让y和$\overset{-}{y}$相差越大越好。如果是定向攻击的话，还要保证y和$y^{target}$越接近越好。</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220429160059119.png" class=""><p>因此这个模型的损失函数（Loss Function）可以定义为：</p><ul><li>Non-targeted attack: $L(x)=-e(y,\overset{-}{y})$</li><li>targeted attack: $L(x)=-e(y,\overset{-}{y})+e(y,y^{target})$</li></ul><p>式中函数e()表示输入之间的差异，目标是使L(x)越小越好</p><p>另外正如我们前面所说，这些攻击是不容易被人类观察到的，即$x$和$x^{0}$之间的差距越小越好，所有整个模型需要优化的表达式为：</p><p>$$x^{*}=arg \underset{d(x,x^{0})\leq\epsilon}{min}L(x)$$</p><p>怎么计算$d(x,x^{0})$呢，通常采用的是向量p-范数</p><ul><li><p>2-范数L2-norm ：$d(x,x^{0})=\parallel \Delta x \parallel_{2} = \sqrt{\overset{n}{\underset{i=1}{\sum}}|\Delta x_{i}|^{2}}$</p></li><li><p>无穷范数L-infinity ：$d(x,x^{0})=\parallel \Delta x \parallel_{\infty} = \underset{i}{max}|\Delta x_{i}|$</p></li></ul><p>确定后模型的损失函数后，我们就可以用其来确定输入，这与往常的神经网络更新网络结构的参数是不一样的，因为被攻击的模型已经确认。</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220429165210157.png" class=""><p>同样，我们可以采用梯度下降法确定输入x，因为模型对输入加了限制，因此我们需对优化算法进行一些修改。以L-infinity确认$d(x,x^{0})$，则为了满足$d(x,x^{0})\leq\epsilon$的限制，只需将每个像素的的更新都在以$\epsilon$为边长的正方形内。</p><p>从整个数学理论上看，如果我们想对攻击进行改进，就需要使用更有效的限制或者更好的优化方法。</p><p>李宏毅老师课堂上了讲解了两种优化方法，下面提供了论文的链接，感兴趣的可以去了解一下</p><ul><li><a href="https://arxiv.org/abs/1412.6572"><strong>Fast Gradient Sign Method (FGSM)</strong></a></li><li><a href="https://arxiv.org/abs/1607.02533"><strong>Iterative FGSM</strong></a></li></ul><p>FGSM中作者的想法很大胆，只使用一次迭代就可以达到攻击的目的。作者只是对上面的方法做了一个简单的修改，在对损失函数求导得到的梯度上加一个符号函数sign（大于0输出1，小于0输出-1），这样就能满足输入限制的要求</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220429175930538.png" class=""><h2 id="白盒攻击-amp-黑盒攻击"><a href="#白盒攻击-amp-黑盒攻击" class="headerlink" title="白盒攻击&amp;黑盒攻击"></a>白盒攻击&amp;黑盒攻击</h2><p>前面我们列举的例子就是白盒攻击（white box attack），即在攻击之前我们就已经知道模型的参数。但在通常情况下，我们是不知道模型的参数，这种情况下的攻击被称作黑盒攻击（black box attack）。</p><h3 id="黑盒攻击"><a href="#黑盒攻击" class="headerlink" title="黑盒攻击"></a>黑盒攻击</h3><ul><li>不知道目标模型的参数，但有目标模型的训练资料</li></ul><p>在这种情况之下，我们可以训练一个替代模型，然后使用代理模型产生被攻击的对象</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220430153827720.png" class=""><p>那么上面所说的黑箱攻击容易成功吗？</p><p>从论文<a href="https://arxiv.org/pdf/1611.02770.pdf">Delving into Transferable Adversarial Examples and Black-box Attacks</a>的实验结果来看，是容易成功的</p><p>下图中有两个表格，第一个表格中列代表被攻击的模型，行代表的是代理模型。每个单元格中的数值表示在行中模型生成攻击成功的图像在列中模型上评估的正确性。因此准确率越低，代表产生的攻击越有效。对角线上代理模型和攻击模型是同一模型，可以看成是白盒攻击。不同行不同列即为黑盒攻击，从实验结果中可以看出得出的准确率都在50%以下，因此黑箱攻击还是挺有效。</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220430184814214.png" class=""><p>第二个表格中“-”好代表没有用这个模型训练生成攻击成功的图像，因此在第二个表格中，对角线代表的是黑盒攻击，因为代理模型中并未采用待攻击的模型。这些黑盒攻击中，准确率最高为6%，比第一个表格中只使用一个代理模型产生的黑盒攻击的模型准确率降了很多，说明采用多个代理模型产生的黑盒攻击更有效。</p><p>你可能还是会怀疑黑盒攻击为什么会产生效果，这篇论文作者给出的j解释是每个模型产生攻击的方向很相似，想更深入了解这个问题可以看论文<a href="https://arxiv.org/pdf/1905.02175.pdf">Adversarial Examples Are Not Bugs, They Are Features</a></p><p>另外还有很多黑盒攻击：</p><ul><li><a href="https://arxiv.org/pdf/1710.08864.pdf">One Pixel Attack for Fooling Deep Neural Networks</a>，只需要改变一个像素就可以达到攻击的目的</li><li><a href="https://arxiv.org/pdf/1610.08401.pdf">Universal adversarial perturbations</a>，使用一个通用的非常小的扰动就可以让攻击成功</li></ul><p>上面讲述的对抗攻击都是应用在图像上，其实对抗攻击还可以应用于语言处理、自然语言处理以及我们的日常生活中，因此我们需要想办法做好防御，来抵御这些来自人类的恶意。</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>防御有以下两种：被动防御和主动防御</p><h3 id="被动防御"><a href="#被动防御" class="headerlink" title="被动防御"></a>被动防御</h3><p>以图像攻击为例，被动防御中最经典的做法就是在图像进入模型之前在一个filter（滤波器），这样会使那些使得攻击成功的扰动信号失真，从而使攻击失效。</p><img src="/2022/04/30/dui-kang-gong-ji-yu-fang-yu/image-20220430192108405.png" class=""><p>常用的方法有：</p><ul><li>将输入图像轻微模糊化，但并不影响分类</li><li>图像压缩（先压缩再解压从而消除攻击）</li><li>使用Generator技术生成和输入图像几乎一摸一样的image</li><li>随机防御（Randomization），有几种防御手段，随机选择其中一个，目的是预防防御预先被人知道</li></ul><h3 id="主动防御"><a href="#主动防御" class="headerlink" title="主动防御"></a>主动防御</h3><p>主动防御为每一张图像生成一个对抗图像，然后将生成的对抗图像和原始图像都丢入模型中进行训练（<strong>对抗训练</strong>），从而增强了模型的鲁棒性。这种方法也可以看作一种<strong>数据增强</strong>（Data Augmentation）的手段，缺点就是成倍的增加计算量。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.youtube.com/watch?v=xGQKhbjrFRk">李宏毅2021机器学习课程</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adversarial Attack </tag>
            
            <tag> Defense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动微分</title>
      <link href="/2022/04/27/zi-dong-wei-fen/"/>
      <url>/2022/04/27/zi-dong-wei-fen/</url>
      
        <content type="html"><![CDATA[<p>在学习这节之前，我们需先了解一些基本的微积分知识，如导数、微分、偏导数及链式法则等。如果你对这些知识不太了解，请自行在网上找相关资料学习，这是因为求导是几乎所有深度学习优化算法的关键步骤。</p><p>有过算法实现经验的小伙伴可能有过这种体验，如果一个模型需要通过算法率定的参数够多，自己通过梯度下降法实现模型参数的更新是一件很痛苦的事，而且还容易算错。深度学习pytorch框架通过自动计算导数（自动微分）来帮我们实现这个痛苦的过程。</p><p>那么pytorch是如何实现自动微分？在实际应用中，系统会根据我们设计的模型构建出一个计算图，来跟踪计算是那些数据通过哪些操作组合产生输出。自动微分在计算图的基础上可以实现反向传播梯度（反向传播）来算出每个参数的偏导数，进而我们可以利用这些偏导数的数值来更新模型参数。</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>我们用函数$y = 2x^{T}x$这个简单的例子来展示pytorch是如何实现自动微分的。首先，我们创建变量x并为其分配一个初始值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([0., 1., 2., 3.])</code></pre><p>在计算y关于x的梯度之前，我们需要一个地方来存储梯度。实际操作中，我们会经常成千上万次地更新相同的参数，所以就不可能在每次对一个参数求导时都分配新的内存，因为每次都分配新的内存可能很快就会将内存耗尽。注意，一个标量函数关于向量x的梯度是向量，并且与x具有相同的形状。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 等价于x = torch.arange(4.0,requires_grad=True)</span>x<span class="token punctuation">.</span>grad        <span class="token comment"># 默认值为None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在让我们计算y</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor(28., grad_fn=&lt;MulBackward0&gt;)</code></pre><p>x是一个长度为4的向量，计算x和x的点积，得到一个标量赋值给y输出。接下来，我们通过调用反向传播函数来自动计算y关于x每个分量的梯度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([ 0.,  4.,  8., 12.])</code></pre><p>根据导数运算，函数$y=2x^{T}x$关于x的梯度是4x，通过这可以验证上述梯度计算是否正确</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">*</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([True, True, True, True])</code></pre><p>上述就是pytorch通过反向传播计算梯度，如果你想计算x的另一个函数的梯度，需要通过x.grad.zero_()消除之前的梯度值。这是因为在默认情况下，pytorch会自动累积梯度。</p><h2 id="非标量变量的反向传播"><a href="#非标量变量的反向传播" class="headerlink" title="非标量变量的反向传播"></a>非标量变量的反向传播</h2><p>当y不是标量时，向量y关于向量x的导数是一个矩阵，对于高阶和高维的y和x，求导的结果是一个高阶张量。当我们调用向量的反向计算时，我们通常会计算一批训练样本对应损失函数的导数。但在这，我们的目的不是计算微分矩阵，而是单独计算批量中每个样本的偏导数之和。由于我们只想求偏导数的和，因此可以传递一个都是1的梯度的函数，然后通过链式法则便可实现。这个函数可以通过$y.sum()=y_{1}+y_{2}+…+y_{n}$实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 消除之前的梯度</span>y <span class="token operator">=</span> x <span class="token operator">*</span> xy<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([0., 2., 4., 6.])</code></pre><h2 id="分离计算"><a href="#分离计算" class="headerlink" title="分离计算"></a>分离计算</h2><p>有时，我们希望将某些计算移动到记录的计算图之外。例如，假设y是作为x的函数计算的，而z则是作为y和x的函数计算的。想象⼀下，我们想计算z关于x的梯度，但由于某种原因，我们希望将y视为⼀个常数，并且只考虑到x在y被计算后发挥的作⽤。</p><p>在这⾥，我们可以分离y来返回⼀个新变量u，该变量与y具有相同的值，但丢弃计算图中如何计算y的任何信息。换句话说，梯度不会向后流经u到x。因此，下⾯的反向传播函数计算z=u*x关于x的偏导数，并将u作为常数处理，而不是z=x*x*x关于x的偏导数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">*</span> xu <span class="token operator">=</span> y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>z <span class="token operator">=</span> u <span class="token operator">*</span> xz<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad <span class="token operator">==</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([0., 1., 4., 9.]), tensor([True, True, True, True]))</code></pre><p>由于刚刚记录了y的计算结果，我们可以随后在y上调用反向传播，得到y=x*x关于x的导数，即2*x</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([0., 2., 4., 6.]), tensor([True, True, True, True]))</code></pre><p>前面我们通过一些例子学习了pytorch是如何自动计算导数，用一句话总结就是：首先将梯度附加到想要对其计算偏导数的变量上，然后记录目标值的计算，执行它的反向传播函数，最后访问得到的梯度。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本线性代数运算</title>
      <link href="/2022/04/26/ji-ben-xian-xing-dai-shu-yun-suan/"/>
      <url>/2022/04/26/ji-ben-xian-xing-dai-shu-yun-suan/</url>
      
        <content type="html"><![CDATA[<p>在实现深度学习模型时，我们难免会对数据进行操作，因此我们需要部分线性代数相关的内容。这节我们将学习线性代数中的基本数学对象和运算，并通过相关代码来表现它们。</p><h2 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h2><p>我们称仅包含一个数值的为标量，它可以由只有一个元素的张量表示。下面我们简单实例化两个标量，并执行一些熟悉的算术运算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx<span class="token punctuation">,</span> y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span> x <span class="token operator">**</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(tensor(5.), tensor(6.), tensor(1.5000), tensor(9.))</code></pre><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>你可以将向量视为标量值组成的列表，下面我们生成一个向量，并通过索引来访问元素。并像python数组一样，用相关函数来看向量的长度和形状。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([0, 1, 2, 3])</code></pre><p>通过索引获取向量中元素，注意索引是从0开始</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(3)</code></pre><p>通过调用python内置len()函数来访问张量的长度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>4</code></pre><p>我们可以用.shape属性访问向量的形状，该属性列出了张量沿 每个轴的长度。由于向量只有一个轴，形状只有一个元素，即向量的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>torch.Size([4])</code></pre><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>矩阵将向量从一维推广到二维，在数学表示中，我们使用$A\in R^{mxn}$来表示矩阵A，A由m行和n列的实值标量组成。其中元素$a_{ij}$属于矩阵A第i行第j列，A的形状是(m,n)或m x n。当矩阵具有相同数量的行和列时，我们将A称为方阵。</p><p>我们可以通过reshape(m, n)或view(m, n)将一个长度为mn的向量变成形状为m x n的矩阵。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment"># 也可以用torch.arange(20).reshape(5, 4)</span>A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15],        [16, 17, 18, 19]])</code></pre><p>我们也可以通过一些函数来生成一些特殊向量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 构造一个未初始化的5x4矩阵</span>torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 构造一个随机初始化的5x4矩阵</span>torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment"># 值在0到1</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment"># 标准正态分布，值在-1到1</span><span class="token comment"># 构造一个全零矩阵</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># 构造一个全一矩阵</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># 直接从数据中构造</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过.T属性访问矩阵的转置，转置就是交换矩阵中的行和列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[ 0,  4,  8, 12, 16],        [ 1,  5,  9, 13, 17],        [ 2,  6, 10, 14, 18],        [ 3,  7, 11, 15, 19]])</code></pre><p><strong>索引和变形</strong></p><p>Pytorch的索引与Numpy一样，切片也是左闭右开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>         <span class="token comment"># 取所有行，取第一列到最后一列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[ 1,  2,  3],        [ 5,  6,  7],        [ 9, 10, 11],        [13, 14, 15],        [17, 18, 19]])</code></pre><p>变形在Pytorch中用view实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>B <span class="token operator">=</span> A<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># 指定某个维度为-1时，该维度会被自动计算</span>C <span class="token operator">=</span> A<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">torch.Size([5, 4])torch.Size([20])torch.Size([2, 10])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以通过item()函数将tensor中的value取出作为Python的数值，前提是该tensor内部只有一个数值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>10</code></pre><h2 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h2><p>前面我们介绍了标量、向量和矩阵，其实它们都是张量的一个表示形式。张量为我们提供了描述具有任意数量轴的n维数组的通用方法，它们的索引机制与矩阵类似。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[[ 0,  1,  2,  3],         [ 4,  5,  6,  7],         [ 8,  9, 10, 11]],        [[12, 13, 14, 15],         [16, 17, 18, 19],         [20, 21, 22, 23]]])</code></pre><p><strong>张量算法的基本性质</strong></p><p>标量、向量、矩阵和任意数量轴的张量有⼀些实⽤的属性，如任意按元素的一元运算都不会改变张量的形状。同样，给定具有<br>相同形状的任意两个张量，任何按元素⼆元运算的结果都将是相同形状的张量。如二元运算Hadamard积（两个矩阵按元素乘法）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>B <span class="token operator">=</span> A<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 通过分配新内存，将A的⼀个副本分配给B</span>A<span class="token punctuation">,</span> A <span class="token operator">*</span> B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[ 0.,  1.,  2.,  3.],         [ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.],         [12., 13., 14., 15.],         [16., 17., 18., 19.]]), tensor([[  0.,   1.,   4.,   9.],         [ 16.,  25.,  36.,  49.],         [ 64.,  81., 100., 121.],         [144., 169., 196., 225.],         [256., 289., 324., 361.]]))</code></pre><p>将张量乘以或加上⼀个标量不会改变张量的形状，其中张量的每个元素都将与标量相加或相乘。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">2</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>a <span class="token operator">+</span> X<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> X<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[[ 2,  3,  4,  5],          [ 6,  7,  8,  9],          [10, 11, 12, 13]],          [[14, 15, 16, 17],          [18, 19, 20, 21],          [22, 23, 24, 25]]]), torch.Size([2, 3, 4]))</code></pre><h2 id="降维和交换维度"><a href="#降维和交换维度" class="headerlink" title="降维和交换维度"></a>降维和交换维度</h2><p><strong>降维</strong></p><p>我们可以对任意张量进行的一个有用的操作是计算其元素的和，这可以通过调用函数实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(torch.Size([5, 4]), tensor(190.))</code></pre><p>默认情况下，求和函数会沿所有的轴降低张量的维度，使它变为一个标量。我们还可以指定张量沿哪一个轴来通过求和降低维度，指定axis=0将通过汇总所有行的元素降维，axis=1将通过汇总所有列的元素降维，下面以axis=1为例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A_sum_axis1 <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>A_sum_axis1<span class="token punctuation">,</span> A_sum_axis1<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>(tensor([ 6., 22., 38., 54., 70.]), torch.Size([5]))</code></pre><p>沿着⾏和列对矩阵求和，等价于对矩阵的所有元素进⾏求和。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 等同于A.sum()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(190.)</code></pre><p>⼀个与求和相关的量是平均值（mean或average）。我们通过将总和除以元素总数来计算平均值。在代码中，<br>我们可以调⽤函数来计算任意形状张量的平均值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> A<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(tensor(9.5000), tensor(9.5000))</code></pre><p>同样，计算平均值的函数也可以沿指定轴降低张量的维度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(tensor([ 8.,  9., 10., 11.]), tensor([ 8.,  9., 10., 11.]))</code></pre><p><strong>非降维求和</strong></p><p>我们可以通过keepdims=True来保持轴数不变，这种求和有时很有用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sum_A <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>sum_A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[ 6.],        [22.],        [38.],        [54.],        [70.]])</code></pre><p>例如，由于sum_A在对每行进行求和后仍保持两个轴，我们可以通过⼴播将A除以sum_A。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">/</span> sum_A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[0.0000, 0.1667, 0.3333, 0.5000],        [0.1818, 0.2273, 0.2727, 0.3182],        [0.2105, 0.2368, 0.2632, 0.2895],        [0.2222, 0.2407, 0.2593, 0.2778],        [0.2286, 0.2429, 0.2571, 0.2714]])</code></pre><p><strong>交换维度</strong></p><p>tensor.transpose(dim0,dim1)交换维度dim0和维度dim1，所以，对于一个张量X（3维及以上的张量），X.transpose(0,2)等价于X.transpose(2,0)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> X<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> Y<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(torch.Size([2, 3, 4]), torch.Size([4, 3, 2]))</code></pre><h2 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h2><h3 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h3><p>我们已经学习了按元素操作、求和及平均值。另⼀个最基本的操作之⼀是点积。给定两个向量$x, y\in R^{d}$，它们的点积$x^{T}y$ （或⟨x, y⟩）是相同位置的按元素乘积的和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([0., 1., 2., 3.]), tensor([1., 1., 1., 1.]), tensor(6.))</code></pre><p>注意，我们可以通过执行按元素乘法，然后进行求和来表示两个向量的点积</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(6.)</code></pre><h3 id="矩阵-向量积"><a href="#矩阵-向量积" class="headerlink" title="矩阵-向量积"></a>矩阵-向量积</h3><p>有了点积的基础，我们就可以理解矩阵-向量积，假设矩阵$A\in R^{mxn}$和向量$x\in R^{n}$，则矩阵向量积Ax是一个长度为m的列向量，矩阵向量积是将矩阵的每一行当成一个向量与x做点积得到。</p><p>在代码中，我们通过调用torch.mv(A, x)实现，这里请注意A的列维数必须与x的维数（其⻓度）相同</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>mv<span class="token punctuation">(</span>A<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(torch.Size([5, 4]), torch.Size([4]), tensor([ 14.,  38.,  62.,  86., 110.]))</code></pre><h3 id="矩阵-矩阵乘法"><a href="#矩阵-矩阵乘法" class="headerlink" title="矩阵-矩阵乘法"></a>矩阵-矩阵乘法</h3><p>如果你已经掌握了点积和矩阵-向量积的知识，那么矩阵-矩阵乘法就会很简单，关于矩阵之间的乘法如果不知，可自行百度。</p><p>假设我们有两个矩阵$A\in R^{nxk}$和$B\in R^{kxm}$，则矩阵-矩阵乘法AB可以看作是简单地执⾏m次矩阵-向量积，并将结果拼接在⼀起，形成⼀个n x m矩阵。在下⾯的代码中，我们在A和B上执⾏矩阵乘法。这⾥的A是⼀个5⾏4列的矩阵， B是⼀个4⾏3列的矩阵。两者相乘后，我们得到了⼀个5⾏3列的矩阵</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">B <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[ 6.,  6.,  6.],        [22., 22., 22.],        [38., 38., 38.],        [54., 54., 54.],        [70., 70., 70.]])</code></pre><h2 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h2><p><strong>概念</strong></p><p>以向量范数为例，设V是数域F上的线性空间，且对于V的任一个向量x，对应一个非负实数$\parallel x \parallel$，满足以下条件：</p><p>①正定性：$\parallel x \parallel &gt;= 0$，$\parallel x \parallel = 0$当且仅当$x=0$</p><p>②齐次性：$\parallel ax \parallel = |a|\parallel x \parallel$</p><p>③三角不等式：对任意$x,y\in V$，都有$\parallel x+y \parallel &lt;= \parallel x \parallel + \parallel y \parallel$</p><p>则称$\parallel x+y \parallel$为向量x的范数</p><p>下面我们介绍p-范数:<br>$$\parallel x \parallel_{p} = (\overset{n}{\underset{i=1}{\sum}}|x_{i}|^{p})^{1/p}$$<br>则2-范数就是向量元素平方和的平方根，其实就是欧几里得距离：<br>$$\parallel x \parallel_{2} = \sqrt{\overset{n}{\underset{i=1}{\sum}}|x_{i}|^{2}}$$<br>在代码中，我们可以按如下方式计算向量的2-范数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">u <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor(5.)</code></pre><p>有时你还会碰到1-范数，它表示为向量元素的绝对值之和：<br>$$\parallel x \parallel_{1} = \overset{n}{\underset{i=1}{\sum}}|x_{i}|$$<br>我们通过将绝对值函数和按元素求和函数结合起来实现1-范数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(7.)</code></pre><p>类似于向量的2-范数，矩阵$X\in R^{mxn}$的F范数也是矩阵元素平方和的平方根：<br>$$\parallel X \parallel_{F} = \sqrt{\overset{m}{\underset{i=1}{\sum}}\overset{n}{\underset{j=1}{\sum}}x_{ij}^{2}}$$<br>F范数满足向量范数的所有性质，它就像是矩阵型向量的2-范数。我们可以调用相同的函数norm()计算矩阵的F范数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(6.)</code></pre><p>最后我将列举三种常见的矩阵p-范数</p><p>①$\parallel A \parallel_{1} = \underset{j}{max}(\overset{n}{\underset{i=1}{\sum}}|a_{ij}|)$，称为列和范数；</p><p>②$\parallel A \parallel_{2} = \sqrt{\lambda_{1}}$，$\lambda_{1}$为$A^{H}A$的最大特征值，称为谱范数</p><p>③$\parallel A \parallel_{\infty} = \underset{i}{max}(\overset{n}{\underset{j=1}{\sum}}|a_{ij}|)$，称为行和范数</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理</title>
      <link href="/2022/04/25/shu-ju-yu-chu-li/"/>
      <url>/2022/04/25/shu-ju-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<p>这节我们将简要介绍使用pandas预处理原始数据，并将原始数据转换为张量格式的步骤。</p><h2 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h2><p>首先，我们简单创建一个人工数据集，并存储在csv文件./data/house_tiny.csv中。下面我们将数据集按行写入csv文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> <span class="token string">'house_tiny.csv'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>data_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'NumRooms,Alley,Price\n'</span><span class="token punctuation">)</span> <span class="token comment"># 列名</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'NA,Pave,127500\n'</span><span class="token punctuation">)</span> <span class="token comment"># 每⾏表⽰⼀个数据样本</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'2,NA,106000\n'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'4,NA,178100\n'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'NA,NA,140000\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有数据集后，我们可以导入pandas包并调用read_csv函数加载原始数据集。该数据集有四行三列，其中每⾏描述了房间数量（“NumRooms”）、巷⼦类型（“Alley”）和房屋价格（“Price”）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_file<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   NumRooms Alley   Price0       NaN  Pave  1275001       2.0   NaN  1060002       4.0   NaN  1781003       NaN   NaN  140000</code></pre><h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><p>有输出结果可以看出，表格中存在缺失的数据。为了避免这些数据对之后的模型搭建存在影响，需对其进行处理，常见的方法有插值法和删除法，插值法是用一个替代值替换缺失值，而删除法则是直接忽略缺失值。</p><p><strong>插值法</strong></p><p>我们一般用同一列的均值替换“NaN”项，可以用fillna()函数实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data1 <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>data<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>   NumRooms Alley   Price0       3.0  Pave  1275001       2.0   NaN  1060002       4.0   NaN  1781003       3.0   NaN  140000</code></pre><p><strong>删除法</strong></p><p>一般是删除缺失值所对应的行，用dropna()函数实现</p><ul><li>axis默认值为0，当设置为1时，是删除缺失值所对应的列</li><li>subset是参考某几列（或几行）作为删除一句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2 <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'NumRooms'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>   NumRooms Alley   Price1       2.0   NaN  1060002       4.0   NaN  178100</code></pre><p>除此之外，有时还需要删除重复的数据，可以用drop_duplicates()函数实现。由于一般我们都是用插值法处理缺失值，所以这里我们考虑该方法。</p><p>通过位置索引iloc，我们将data分为inputs和outputs</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">inputs<span class="token punctuation">,</span> outputs <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>   NumRooms Alley0       3.0  Pave1       2.0   NaN2       4.0   NaN3       3.0   NaN</code></pre><p>对于inputs中的类别值或离散值，我们将“NaN”视为一个类别。由于“Alley”列只接受两种类型的类别值“Pave”和“NaN”，pandas可以自动将此列转换为两列“Alley_Pave”和“Alley_nan”。类型为“Pave”的⾏会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。类型为“NaN”的⾏会将“Alley_Pave”的值设置为0，“Alley_nan”的值设置为1。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">inputs <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> dummy_na<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>   NumRooms  Alley_Pave  Alley_nan0       3.0           1          01       2.0           0          12       4.0           0          13       3.0           0          1</code></pre><h2 id="转换为张量格式"><a href="#转换为张量格式" class="headerlink" title="转换为张量格式"></a>转换为张量格式</h2><p>现在inputs和outputs中所有数据都是数值类型，我们可以把它们转换为张量格式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchX<span class="token punctuation">,</span> y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>values<span class="token punctuation">)</span>X<span class="token punctuation">,</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[3., 1., 0.],         [2., 0., 1.],         [4., 0., 1.],         [3., 0., 1.]], dtype=torch.float64), tensor([127500, 106000, 178100, 140000]))</code></pre><p>这节我们主要学习了csv文件数据的预处理，其实以其他格式存储的数据也是通过类似的方式进行处理，最终都得转变成tensor格式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW3-CNN</title>
      <link href="/2022/04/20/hw3-cnn/"/>
      <url>/2022/04/20/hw3-cnn/</url>
      
        <content type="html"><![CDATA[<h2 id="作业介绍"><a href="#作业介绍" class="headerlink" title="作业介绍"></a>作业介绍</h2><p>作业的目标是使用卷积神经网络（我用的是VGG）解决图像分类问题，并用数据扩充的技术提高模型的性能。</p><p>使用的数据集是一个关于食物分类的dataset:food-11。如名字所示，食物的种类有11种，分别为面包、乳制品、甜点、鸡蛋、 油炸食品、肉类、面条、米饭、海鲜、汤和水果蔬菜。其中数据分为训练集（9866张）、验证集（3430张）和测试集（3347张），训练集和验证集中照片的格式为”类别_编号.jpg“，如3_100.jpg为类别3（鸡蛋）的照片，测试集中照片的格式为”编号.jpg“，不包含类别，测试集食物的类别需要用模型预测并保存到.csv文件中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入需要的包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> glob<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">import</span> time<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltseed <span class="token operator">=</span> <span class="token number">2022</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义一些函数"><a href="#定义一些函数" class="headerlink" title="定义一些函数"></a>定义一些函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Get device (if GPU is available, use GPU) '''</span>    <span class="token keyword">return</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token keyword">def</span> <span class="token function">plot_learning_curve</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot learning curve of your model (train &amp; dev loss) '''</span>    total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x_1 <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">)</span>    x_2 <span class="token operator">=</span> x_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_1<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_2<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:cyan'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dev'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Training steps'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'MSE loss'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Learning curve of {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_accuracy</span><span class="token punctuation">(</span>acc_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot accuracy of your model (train &amp; dev acc) '''</span>    total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> acc_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:cyan'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dev'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Training epochs'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Learning curve of {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_pred</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 只画前16张图片的预测结果</span>    text <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'面包'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'乳制品'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'甜点'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">'鸡蛋'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token string">'油炸食品'</span><span class="token punctuation">,</span>            <span class="token number">5</span><span class="token punctuation">:</span><span class="token string">'肉类'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token string">'面条'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span><span class="token string">'米饭'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token string">'海鲜'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token string">'汤'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">'水果蔬菜'</span><span class="token punctuation">}</span>        fnames <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 设置子图数量和画布大小   </span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 设置显示中文字体（黑体）</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 4行4列的第i+1个子图 </span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fnames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        label <span class="token operator">=</span> preds<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment"># 在图片(70,120)的位置标出食物类别（是否戴眼镜），字体大小为 24，字体颜色为红色</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> s<span class="token operator">=</span>text<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'fontsize'</span><span class="token punctuation">:</span><span class="token number">48</span> <span class="token punctuation">,</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FoodDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 制作Dataset '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fnames<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fnames <span class="token operator">=</span> fnames        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Finished reading the </span><span class="token interpolation"><span class="token punctuation">{</span>mode<span class="token punctuation">}</span></span><span class="token string"> set(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>fnames<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> samples found)'</span></span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fnames<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        fname <span class="token operator">=</span> self<span class="token punctuation">.</span>fnames<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        fname <span class="token operator">=</span> fname<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token comment"># 加载图片</span>        img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_image<span class="token punctuation">(</span>fname<span class="token punctuation">)</span>        <span class="token comment"># transform</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> img        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>fname<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span>            label <span class="token operator">=</span> label<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> img<span class="token punctuation">,</span> label<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_dataloader</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 制作DataLoader '''</span>    fnames <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 获取当前路径下的所有文件对应的路径</span>    dataset <span class="token operator">=</span> FoodDataset<span class="token punctuation">(</span>fnames<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>       <span class="token comment"># 生成一个数据集，并输入到指定的dataloader</span>    dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>        dataset<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span>         shuffle <span class="token operator">=</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataloader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型实现"><a href="#模型实现" class="headerlink" title="模型实现"></a>模型实现</h2><h3 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h3><p>这部分主要自己实现一个VGG网络结构，在这之前我们简单的讲解一下VGG的结构。</p><p>VGG网络主要由两个部分组成：第一部分主要是卷积层和池化层组成，第二部分由全连接层组成。它的特点如下：</p><ul><li>每个卷积层中使用3x3filters，并将它们组合成卷积序列</li><li>多个3x3卷积序列可以模拟更大的接受场的效果</li><li>每次的图像像素缩小一倍，卷积核的数量增加一倍</li></ul><p>VGG有很多个版本，也算是比较稳定和经典的model。它的特点也是连续conv多计算量巨大，这里我们以VGG16为例<br><img src="https://handbook.pytorch.wiki/chapter2/vgg16.png"><br>其中，VGG清一色用小卷积核的优势有：</p><ul><li>3层conv3x3后等同于1层conv7x7的结果； 2层conv3x3后等同于2层conv5x5的结果</li><li>卷积层的参数减少。相比5x5、7x7和11x11的大卷积核，3x3明显地减少了参数量</li><li>通过卷积和池化层后，图像的分辨率降低为原来的一半，但是图像的特征增加一倍，这是一个十分规整的操作，为后面的网络提供了一个标准</li></ul><p>下面我们根据VGG16的特点来实现这个模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nnVGG16 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">25088</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我电脑跑不动这个模型，所以在它的基础上进行稍微的修改，本文用的模型如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Classifier</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Classifier<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)</span>        <span class="token comment"># torch.nn.MaxPool2d(kernel_size, stride, padding)</span>        <span class="token comment"># input 维度 [3, 128, 128]</span>        self<span class="token punctuation">.</span>cnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [64, 128, 128]</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [64, 64, 64]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [128, 64, 64]</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [128, 32, 32]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [256, 32, 32]</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [256, 16, 16]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [512, 16, 16]</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [512, 8, 8]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [512, 8, 8]</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># [512, 4, 4]</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>cnn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 训练模型 '''</span>    n_epochs <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'n_epochs'</span><span class="token punctuation">]</span>   <span class="token comment"># 最大迭代次数</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># optimizer使用Adam</span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 损失函数使用CrossEntropyLoss</span>        min_loss <span class="token operator">=</span> <span class="token number">1000</span>             <span class="token comment"># 用于记录验证时最小的loss</span>    loss_record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token comment"># 记录训练损失</span>    acc_record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token comment"># 记录预测准确度</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        train_acc<span class="token punctuation">,</span> train_loss <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 调整为train模型（开放Dropout等等）</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">)</span><span class="token punctuation">:</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将模型参数的 gradient 至0</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 前向传播</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算loss</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 利用后向传播算出每个参数的gradient</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 更新模型参数</span>                        train_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                        loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        train_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        acc_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>                <span class="token comment"># 每次迭代后，在验证集中验证你的模型</span>        dev_acc<span class="token punctuation">,</span> dev_loss <span class="token operator">=</span> dev<span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>        acc_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dev_acc<span class="token punctuation">)</span>        loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dev_loss<span class="token punctuation">)</span>                <span class="token comment"># 将结果打印出来</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[%02d/%02d] %2.2f sec(s) Train Acc: %3.6f Loss: %3.6f | Val Acc: %3.6f loss: %3.6f'</span> <span class="token operator">%</span> \              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n_epochs<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> dev_acc<span class="token punctuation">,</span> dev_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 当模型性能提升时保存模型</span>        <span class="token keyword">if</span> dev_loss <span class="token operator">&lt;</span> min_loss<span class="token punctuation">:</span>            min_loss <span class="token operator">=</span> dev_loss            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saving model (epoch = </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">02d</span><span class="token punctuation">}</span></span><span class="token string">, loss = </span><span class="token interpolation"><span class="token punctuation">{</span>min_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 保存模型到指定路径</span>                <span class="token keyword">return</span> min_loss<span class="token punctuation">,</span> loss_record<span class="token punctuation">,</span> acc_record<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dev</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dev_loss<span class="token punctuation">,</span> dev_acc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 前向传播</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 计算loss</span>            dev_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            dev_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    dev_acc <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>    dev_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>        <span class="token keyword">return</span> dev_acc<span class="token punctuation">,</span> dev_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> tt_set<span class="token punctuation">:</span>                                    x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                              pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            pred <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> pred<span class="token punctuation">:</span>                preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> preds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置超参数"><a href="#设置超参数" class="headerlink" title="设置超参数"></a>设置超参数</h2><p>config中包含模型训练的超参数（可以进行调节）和保存模型的路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> get_device<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'models'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data_dir <span class="token operator">=</span> <span class="token string">'./food-11'</span><span class="token comment"># 可以进行调节来提升模型性能</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'n_epochs'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                <span class="token comment"># 最大迭代次数</span>    <span class="token string">'batch_size'</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span>               <span class="token comment"># dataloader的最小批量</span>    <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token punctuation">,</span>    <span class="token string">'save_path'</span><span class="token punctuation">:</span> <span class="token string">'models/model.pth'</span>  <span class="token comment"># 模型保存路径</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载数据和模型"><a href="#加载数据和模型" class="headerlink" title="加载数据和模型"></a>加载数据和模型</h2><p>这部分需要注意的是我们需要为不同的数据制定不同的transform，因为我们只能对训练数据做数据扩充</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 训练时做数据扩充</span>train_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># 随机将图片水平翻转</span>    transforms<span class="token punctuation">.</span>RandomRotation<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment"># 随机旋转图片</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 验证测试时不用做数据扩充</span>test_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tr_set <span class="token operator">=</span> pre_dataloader<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span><span class="token string">'training'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span> train_transform<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dv_set <span class="token operator">=</span> pre_dataloader<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span><span class="token string">'validation'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> test_transform<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tt_set <span class="token operator">=</span> pre_dataloader<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span><span class="token string">'testing'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> test_transform<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Finished reading the train set(9866 samples found)Finished reading the dev set(3430 samples found)Finished reading the test set(3347 samples found)</code></pre><p>展示16张训练集的图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">images<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>grid_img <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">,</span> nrow<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>grid_img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/20/hw3-cnn/output_21_0.png" class=""><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">min_loss<span class="token punctuation">,</span> loss_record<span class="token punctuation">,</span> acc_record <span class="token operator">=</span> train<span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[01/30] 86.74 sec(s) Train Acc: 0.218123 Loss: 0.036563 | Val Acc: 0.262974 loss: 0.032123Saving model (epoch = 01, loss = 0.0321)[02/30] 83.66 sec(s) Train Acc: 0.311372 Loss: 0.030771 | Val Acc: 0.322449 loss: 0.030530Saving model (epoch = 02, loss = 0.0305)[03/30] 83.76 sec(s) Train Acc: 0.369349 Loss: 0.028417 | Val Acc: 0.406122 loss: 0.026898Saving model (epoch = 03, loss = 0.0269)[04/30] 86.88 sec(s) Train Acc: 0.414454 Loss: 0.026027 | Val Acc: 0.411079 loss: 0.025972Saving model (epoch = 04, loss = 0.0260)[05/30] 85.10 sec(s) Train Acc: 0.467971 Loss: 0.023721 | Val Acc: 0.383382 loss: 0.030133[06/30] 84.83 sec(s) Train Acc: 0.507399 Loss: 0.022244 | Val Acc: 0.367055 loss: 0.033233[07/30] 87.24 sec(s) Train Acc: 0.532840 Loss: 0.020973 | Val Acc: 0.514286 loss: 0.023898Saving model (epoch = 07, loss = 0.0239)[08/30] 86.20 sec(s) Train Acc: 0.577944 Loss: 0.019479 | Val Acc: 0.502332 loss: 0.023984[09/30] 88.35 sec(s) Train Acc: 0.591222 Loss: 0.018706 | Val Acc: 0.563848 loss: 0.020785Saving model (epoch = 09, loss = 0.0208)[10/30] 85.91 sec(s) Train Acc: 0.621528 Loss: 0.017443 | Val Acc: 0.557143 loss: 0.021090[11/30] 86.38 sec(s) Train Acc: 0.616562 Loss: 0.017344 | Val Acc: 0.560641 loss: 0.020721Saving model (epoch = 11, loss = 0.0207)[12/30] 87.27 sec(s) Train Acc: 0.648490 Loss: 0.016085 | Val Acc: 0.565015 loss: 0.020585Saving model (epoch = 12, loss = 0.0206)[13/30] 86.36 sec(s) Train Acc: 0.662376 Loss: 0.015385 | Val Acc: 0.609621 loss: 0.018134Saving model (epoch = 13, loss = 0.0181)[14/30] 87.04 sec(s) Train Acc: 0.672816 Loss: 0.014737 | Val Acc: 0.576676 loss: 0.020833[15/30] 86.98 sec(s) Train Acc: 0.691871 Loss: 0.013995 | Val Acc: 0.547230 loss: 0.023204[16/30] 86.17 sec(s) Train Acc: 0.701297 Loss: 0.013776 | Val Acc: 0.516618 loss: 0.024357[17/30] 87.39 sec(s) Train Acc: 0.713866 Loss: 0.012795 | Val Acc: 0.627697 loss: 0.017918Saving model (epoch = 17, loss = 0.0179)[18/30] 87.07 sec(s) Train Acc: 0.733732 Loss: 0.012115 | Val Acc: 0.628280 loss: 0.018558[19/30] 87.39 sec(s) Train Acc: 0.735962 Loss: 0.011708 | Val Acc: 0.623907 loss: 0.019147[20/30] 86.86 sec(s) Train Acc: 0.761200 Loss: 0.010815 | Val Acc: 0.639650 loss: 0.019255[21/30] 87.09 sec(s) Train Acc: 0.779749 Loss: 0.009971 | Val Acc: 0.608455 loss: 0.021485[22/30] 87.64 sec(s) Train Acc: 0.772045 Loss: 0.010318 | Val Acc: 0.633528 loss: 0.019861[23/30] 86.32 sec(s) Train Acc: 0.777215 Loss: 0.009820 | Val Acc: 0.661808 loss: 0.018393[24/30] 87.13 sec(s) Train Acc: 0.810562 Loss: 0.008549 | Val Acc: 0.647230 loss: 0.019221[25/30] 86.26 sec(s) Train Acc: 0.799818 Loss: 0.009009 | Val Acc: 0.655394 loss: 0.019204[26/30] 84.89 sec(s) Train Acc: 0.839955 Loss: 0.007461 | Val Acc: 0.650437 loss: 0.018734[27/30] 88.26 sec(s) Train Acc: 0.839955 Loss: 0.007236 | Val Acc: 0.641399 loss: 0.020359[28/30] 90.81 sec(s) Train Acc: 0.846544 Loss: 0.007010 | Val Acc: 0.643149 loss: 0.020707[29/30] 85.49 sec(s) Train Acc: 0.851105 Loss: 0.006651 | Val Acc: 0.650146 loss: 0.022475[30/30] 86.92 sec(s) Train Acc: 0.871883 Loss: 0.005801 | Val Acc: 0.667055 loss: 0.021603</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_accuracy<span class="token punctuation">(</span>acc_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'cnn model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/04/20/hw3-cnn/output_25_0.png" class=""><h2 id="模型测试-1"><a href="#模型测试-1" class="headerlink" title="模型测试"></a>模型测试</h2><p>加载最优模型预测测试集上的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> modelmodel <span class="token operator">=</span> Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 加载你最好的模型</span>model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>preds <span class="token operator">=</span> test<span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示部分预测结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_pred<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span><span class="token string">'testing'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/04/20/hw3-cnn/output_29_0.png" class=""> <p>在测试集上的结果将会保存到pred.csv文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"predict.csv"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Id,Category\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> y <span class="token keyword">in</span>  <span class="token builtin">enumerate</span><span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{},{}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021作业部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Classifier </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HW1-Regression</title>
      <link href="/2022/04/19/hw1-regression/"/>
      <url>/2022/04/19/hw1-regression/</url>
      
        <content type="html"><![CDATA[<ul><li>目标：用深度神经网络（DNN）解决一个回归问题，了解训练基础DNN的技巧</li><li>任务描述： 给定美国特定州过去三天有关COVID-19的调查，然后预测第3天新检测阳性病例的百分比</li></ul><h2 id="导入一些包"><a href="#导入一些包" class="headerlink" title="导入一些包"></a>导入一些包</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># PyTorch</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># For data preprocess</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> csv<span class="token keyword">import</span> os<span class="token comment"># For plotting</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltmyseed <span class="token operator">=</span> <span class="token number">42069</span>  <span class="token comment"># set a random seed for reproducibility</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>myseed<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>myseed<span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>myseed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义一些函数"><a href="#定义一些函数" class="headerlink" title="定义一些函数"></a>定义一些函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Get device (if GPU is available, use GPU) '''</span>    <span class="token keyword">return</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token keyword">def</span> <span class="token function">plot_learning_curve</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot learning curve of your DNN (train &amp; dev loss) '''</span>    total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x_1 <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">)</span>    x_2 <span class="token operator">=</span> x_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_1<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_2<span class="token punctuation">,</span> loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'tab:cyan'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'dev'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Training steps'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'MSE loss'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Learning curve of {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_pred</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> lim<span class="token operator">=</span><span class="token number">35.</span><span class="token punctuation">,</span> preds<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' Plot prediction of your DNN '''</span>    <span class="token keyword">if</span> preds <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> targets <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        preds<span class="token punctuation">,</span> targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> dv_set<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                targets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> preds<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> lim<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> lim<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> lim<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> lim<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'ground truth value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'predicted value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Ground Truth v.s. Prediction'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>有三种数据集：训练集、验证集和测试集</p><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>这部分需要实现的功能如下：</p><ul><li>读取.csv文件，将covid.train.csv划分为训练集和验证集</li><li>提取数据特征，并进行归一化处理</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">COVID19Dataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 用于加载并对COVID19数据集进行预处理'''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">,</span> target_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode                <span class="token comment"># 读取数据为numpy arrays格式</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>   <span class="token comment"># 不读取行列的注释</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> target_only<span class="token punctuation">:</span>                                      feats <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># 考虑所有影响因素</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                                      <span class="token comment"># 作业实现部分</span>            <span class="token comment"># TODO: Using 40 states &amp; 2 tested_positive features (indices = 57 &amp; 75)</span>            feats <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            feats<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span>            feats<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 测试数据</span>            <span class="token comment"># data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> feats<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>data <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 训练数据，用于划分训练集和验证集</span>            <span class="token comment"># data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))</span>            target <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> feats<span class="token punctuation">]</span>                        <span class="token comment"># 将训练数据划分为训练集和测试集(9 : 1)</span>            <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                indices <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'dev'</span><span class="token punctuation">:</span>                indices <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>                        <span class="token comment"># 将数据转成tensors格式</span>            self<span class="token punctuation">.</span>data <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>data<span class="token punctuation">[</span>indices<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>target<span class="token punctuation">[</span>indices<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 归一化处理（你可以尝试将这部分去除，看结果会变成什么样子）</span>        self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> \            <span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \            <span class="token operator">/</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dim <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'</span>              <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>dim<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回数据的长度</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 每次返回一个样本</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># 训练</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>target<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 测试（没有目标值）</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><p>以小批量的格式从定义好的Dataset中加载数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prep_dataloader</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> target_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 生成一个数据集，将其输入到指定的dataloader中 '''</span>    dataset <span class="token operator">=</span> COVID19Dataset<span class="token punctuation">(</span>path<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> target_only<span class="token operator">=</span>target_only<span class="token punctuation">)</span>      dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>        dataset<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span>        shuffle<span class="token operator">=</span><span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token keyword">return</span> dataloader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型实现"><a href="#模型实现" class="headerlink" title="模型实现"></a>模型实现</h2><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p>模型简单由具有ReLU激活函数的全连接层组成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SimpleNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 实现一个简单由几个全连接层组成的深度神经网络 '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SimpleNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 你可以对这部分的网络结构进行修改</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 二维变成一维，数字对应去除的维度序号（从0开始）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 训练模型 '''</span>        n_epochs <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'n_epochs'</span><span class="token punctuation">]</span>     <span class="token comment"># 最大迭代次数</span>            optimizer <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'optimizer'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>        model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>config<span class="token punctuation">[</span><span class="token string">'optim_hparas'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 优化算法optimizer    </span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span>            <span class="token comment"># 损失函数criterion</span>        min_mse <span class="token operator">=</span> <span class="token number">1000</span>             <span class="token comment"># 用于记录验证时最小的loss</span>    loss_record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>   <span class="token comment"># 记录训练损失</span>    early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>                       <span class="token comment"># 如果迭代过程中，超过设定迭代次数，模型的最小loss还没更新就停止迭代</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 将模型设置为训练模式</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> tr_set<span class="token punctuation">:</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 将梯度初始为0</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>               <span class="token comment"># 前向传播（计算模型输出）</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>     <span class="token comment"># 计算loss</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 后向传播（计算梯度）</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 更新模型参数</span>            loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 每次迭代后，在验证集中验证你的模型</span>        dev_mse <span class="token operator">=</span> dev<span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span>        <span class="token keyword">if</span> dev_mse <span class="token operator">&lt;</span> min_mse<span class="token punctuation">:</span>            <span class="token comment"># 当模型性能提升时保存模型</span>            min_mse <span class="token operator">=</span> dev_mse            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saving model (epoch = </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token format-spec">4d</span><span class="token punctuation">}</span></span><span class="token string">, loss = </span><span class="token interpolation"><span class="token punctuation">{</span>min_mse<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 保存模型到指定的路径</span>            early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment"># 每次模型性能改进，将该值变为0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>            early_stop_cnt <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># 每次迭代后，模型性能未提升则加1</span>                loss_record<span class="token punctuation">[</span><span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dev_mse<span class="token punctuation">)</span>        <span class="token keyword">if</span> early_stop_cnt <span class="token operator">&gt;</span> config<span class="token punctuation">[</span><span class="token string">'early_stop'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># 如果你的模型在指定迭代次数后，模型性能仍为改进，则停止训练</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Finished training after </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string"> epochs'</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> min_mse<span class="token punctuation">,</span> loss_record<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dev</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># 将模型设置为评估模式</span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span>   <span class="token comment"># 损失函数criterion</span>    total_loss <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> dv_set<span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment"># 不允许梯度计算</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                     <span class="token comment"># 前向传播</span>            mse_loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 计算loss</span>        total_loss <span class="token operator">+=</span> mse_loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 总loss</span>    total_loss <span class="token operator">=</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dv_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>              <span class="token comment"># 平均loss</span>    <span class="token keyword">return</span> total_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> tt_set<span class="token punctuation">:</span>                                    x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                              pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                                 preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 连接所有预测并转换为numpy数组</span>    <span class="token keyword">return</span> preds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置超参数"><a href="#设置超参数" class="headerlink" title="设置超参数"></a>设置超参数</h2><p>config中包含模型训练的超参数（可以进行调节）和保存模型的路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> get_device<span class="token punctuation">(</span><span class="token punctuation">)</span>                 os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'models'</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#</span>target_only <span class="token operator">=</span> <span class="token boolean">False</span>                   <span class="token comment"># 可以进行调节来提升模型性能</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'n_epochs'</span><span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>                <span class="token comment"># 最大迭代次数</span>    <span class="token string">'batch_size'</span><span class="token punctuation">:</span> <span class="token number">270</span><span class="token punctuation">,</span>               <span class="token comment"># dataloader的最小批量</span>    <span class="token string">'optimizer'</span><span class="token punctuation">:</span> <span class="token string">'SGD'</span><span class="token punctuation">,</span>              <span class="token comment"># 参数优化算法</span>    <span class="token string">'optim_hparas'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment"># optimizer的超参数</span>        <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token punctuation">,</span>                 <span class="token comment"># SGD的学习率</span>        <span class="token string">'momentum'</span><span class="token punctuation">:</span> <span class="token number">0.9</span>              <span class="token comment"># SGD的momentum</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'early_stop'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>               <span class="token comment"># 自模型上次改进以后的最多迭代次数</span>    <span class="token string">'save_path'</span><span class="token punctuation">:</span> <span class="token string">'models/model.pth'</span>  <span class="token comment"># 模型保存路径</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载数据和模型"><a href="#加载数据和模型" class="headerlink" title="加载数据和模型"></a>加载数据和模型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tr_path <span class="token operator">=</span> <span class="token string">'./data/covid.train.csv'</span>  <span class="token comment"># 训练数据路径</span>tt_path <span class="token operator">=</span> <span class="token string">'./data/covid.test.csv'</span>   <span class="token comment"># 测试数据路径</span>tr_set <span class="token operator">=</span> prep_dataloader<span class="token punctuation">(</span>tr_path<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target_only<span class="token operator">=</span>target_only<span class="token punctuation">)</span>dv_set <span class="token operator">=</span> prep_dataloader<span class="token punctuation">(</span>tr_path<span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target_only<span class="token operator">=</span>target_only<span class="token punctuation">)</span>tt_set <span class="token operator">=</span> prep_dataloader<span class="token punctuation">(</span>tt_path<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target_only<span class="token operator">=</span>target_only<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Finished reading the train set of COVID19 Dataset (2430 samples found, each dim = 93)Finished reading the dev set of COVID19 Dataset (270 samples found, each dim = 93)Finished reading the test set of COVID19 Dataset (893 samples found, each dim = 93)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> SimpleNet<span class="token punctuation">(</span>tr_set<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>          <span class="token comment"># 构建模型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">model_loss<span class="token punctuation">,</span> model_loss_record <span class="token operator">=</span> train<span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Saving model (epoch =    1, loss = 196.5020)Saving model (epoch =    2, loss = 64.4406)Saving model (epoch =    3, loss = 16.0075)Saving model (epoch =    4, loss = 7.1638)Saving model (epoch =    5, loss = 6.9936)Saving model (epoch =    6, loss = 4.3199)Saving model (epoch =    7, loss = 2.8746)Saving model (epoch =    8, loss = 2.3495)Saving model (epoch =    9, loss = 2.0699)Saving model (epoch =   10, loss = 1.8842)Saving model (epoch =   11, loss = 1.7374)Saving model (epoch =   12, loss = 1.6552)Saving model (epoch =   13, loss = 1.5494)Saving model (epoch =   14, loss = 1.4657)Saving model (epoch =   16, loss = 1.3691)Saving model (epoch =   18, loss = 1.2820)Saving model (epoch =   19, loss = 1.2714)Saving model (epoch =   20, loss = 1.2370)Saving model (epoch =   21, loss = 1.2115)Saving model (epoch =   22, loss = 1.1969)Saving model (epoch =   24, loss = 1.1566)Saving model (epoch =   25, loss = 1.1130)Saving model (epoch =   26, loss = 1.0947)Saving model (epoch =   28, loss = 1.0822)Saving model (epoch =   31, loss = 1.0681)Saving model (epoch =   32, loss = 1.0414)Saving model (epoch =   33, loss = 1.0325)Saving model (epoch =   34, loss = 1.0219)Saving model (epoch =   36, loss = 1.0006)Saving model (epoch =   42, loss = 0.9903)Saving model (epoch =   43, loss = 0.9615)Saving model (epoch =   46, loss = 0.9473)Saving model (epoch =   48, loss = 0.9305)Saving model (epoch =   52, loss = 0.9179)Saving model (epoch =   58, loss = 0.9060)Saving model (epoch =   61, loss = 0.9049)Saving model (epoch =   62, loss = 0.8991)Saving model (epoch =   63, loss = 0.8967)Saving model (epoch =   67, loss = 0.8928)Saving model (epoch =   68, loss = 0.8797)Saving model (epoch =   70, loss = 0.8776)Saving model (epoch =   73, loss = 0.8588)Saving model (epoch =   81, loss = 0.8583)Saving model (epoch =   84, loss = 0.8497)Saving model (epoch =   86, loss = 0.8392)Saving model (epoch =   96, loss = 0.8273)Saving model (epoch =   99, loss = 0.8218)Saving model (epoch =  105, loss = 0.8191)Saving model (epoch =  119, loss = 0.8141)Saving model (epoch =  138, loss = 0.8100)Saving model (epoch =  139, loss = 0.7944)Saving model (epoch =  160, loss = 0.7902)Saving model (epoch =  190, loss = 0.7779)Saving model (epoch =  218, loss = 0.7770)Saving model (epoch =  233, loss = 0.7751)Saving model (epoch =  241, loss = 0.7748)Saving model (epoch =  270, loss = 0.7630)Saving model (epoch =  326, loss = 0.7592)Saving model (epoch =  409, loss = 0.7497)Saving model (epoch =  541, loss = 0.7488)Saving model (epoch =  546, loss = 0.7450)Saving model (epoch =  642, loss = 0.7401)Saving model (epoch =  670, loss = 0.7389)Saving model (epoch =  800, loss = 0.7318)Finished training after 1000 epochs</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_learning_curve<span class="token punctuation">(</span>model_loss_record<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'deep model'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/04/19/hw1-regression/output_23_0.png" class=""><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> modelmodel <span class="token operator">=</span> SimpleNet<span class="token punctuation">(</span>tr_set<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>dim<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 加载你最好的模型</span>model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>plot_pred<span class="token punctuation">(</span>dv_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span>                  <span class="token comment"># 展示在验证集上的预测结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/19/hw1-regression/output_24_0.png" class=""><h2 id="模型测试-1"><a href="#模型测试-1" class="headerlink" title="模型测试"></a>模型测试</h2><p>在测试集上的结果将会保存到pred.csv文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_pred</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 保存预测的结果到指定的文件中 '''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saving results to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">file</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'tested_positive'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> p <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">:</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> p<span class="token punctuation">]</span><span class="token punctuation">)</span>preds <span class="token operator">=</span> test<span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span>  <span class="token comment"># 预测</span>save_pred<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> <span class="token string">'pred.csv'</span><span class="token punctuation">)</span>         <span class="token comment"># 保存预测结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Saving results to pred.csv</code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021作业部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNN </tag>
            
            <tag> Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BERT</title>
      <link href="/2022/04/17/bert/"/>
      <url>/2022/04/17/bert/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BERT的全称是Bidirectional Encoder Representations from Transformers（来自Transformers的双向编码器表示），BERT基于Transformer，Transformer在初始论文中是用于Seq2Seq任务中，其Encoder部分后续被迁移到各种场景，逐渐演化成一种通用的特征提取器。BERT 通过使用预训练的 Transformer编码器，能够基于其双向上下文表示任何词元。在下游任务的监督学习过程中，BERT将输入表示到一个添加的输出层中，根据任务的性质对模型架构进行最小的更改，例如预测每个词元与预测整个序列。同时，BERT对预训练Transformer编码器的所有参数进行微调，而额外的输出层将从头开始训练。</p><p>在BERT的原始论文BERT: Pre-training of Deep Bidirectional Transformers forLanguage Understanding 中，BERT的描述分为三个部分：输入表示、预训练任务和下游任务。</p><h2 id="BERT的输入表示"><a href="#BERT的输入表示" class="headerlink" title="BERT的输入表示"></a>BERT的输入表示</h2><p>在自然语言处理中，有些任务（如情感分析）以单个文本为输入，而有些任务（如自然语言推断）以一对文本序列作为输入。当输入为单个文本时，BERT输入序列是特殊类别词元“&lt;cls&gt;”、⽂本序列的标记、以及特殊分隔词元“&lt;sep&gt;”的连结。当输入为文本对是，BERT输入序列是“&lt;cls&gt;”、第⼀个⽂本序列的标记、“&lt;sep&gt;”、第⼆个⽂本序列标记、以及“&lt;sep&gt;”的连结。</p><p>BERT选择Transformer编码器作为其双向架构。在Transformer编码器中，位置嵌入被加到输入序列的每个位置。然而，与原始Transformer编码器不同，BERT使用可学习的位置嵌入，其输入为词元嵌入（Token Embeddings）、片段嵌入（Segment Embeddings）和位置嵌入（Position Embeddings）的和。</p><img src="/2022/04/17/bert/image-20220417165237930.png" class=""><h2 id="预训练任务"><a href="#预训练任务" class="headerlink" title="预训练任务"></a>预训练任务</h2><p>前面我们给出了输入文本的每个词元和插入的特殊标记“&lt;cls&gt;”及“&lt;seq&gt;” 的BERT表示。接下来，我们将使⽤这些表⽰来计算预训练BERT的损失函数。预训练包括以下两个任务：掩蔽语言模型和下一句预测。</p><h3 id="掩蔽语言模型（Masked-Language-Modeling-Masked-LM）"><a href="#掩蔽语言模型（Masked-Language-Modeling-Masked-LM）" class="headerlink" title="掩蔽语言模型（Masked Language Modeling, Masked LM）"></a>掩蔽语言模型（Masked Language Modeling, Masked LM）</h3><p>根据直觉，我们有理由相信deep bidirectional model比left-to-right model（如单向LSTM）或者浅级连接的left-to-right model和right-to-left model（如双向LSTM）更加强大。为了双向编码上下文以表示每个词元，BERT随机掩蔽词元并使用来自上下文的词元以自监督（self-supervised）的方式预测掩蔽词元。此任务称为掩蔽语言模型。这个模型可以用下图表示，假设输入是机器学习。</p><img src="/2022/04/17/bert/image-20220417181929265.png" class=""><p>在这个预训练任务中，将随机选择15%的词元作为预测的掩蔽词元。要预测⼀个掩蔽词元而不使⽤标签作弊，<br>⼀个简单的⽅法是总是⽤⼀个特殊的“&lt;mask&gt;”替换输⼊序列中的词元。然而，⼈造特殊词元“&lt;mask&gt;”不<br>会出现在微调中。为了避免预训练和微调之间的这种不匹配，如果为预测而屏蔽词元（例如，在“my dog is hairy ”中选择掩蔽和预测“hairy”），则在输⼊中将其替换为：  </p><ul><li>80%概率为特殊的“&lt;mask&gt;“词元（例如，“my dog is hairy ”变为“my dog is &lt;mask&gt;”）</li><li>10%概率为随机词元（例如，“my dog is hairy ”变为“my dog is apple”）</li><li>10%概率为不变的标签词元（例如，“my dog is hairy ”变为“my dog is hairy”）</li></ul><p>注意在15%的词元中，有10%的概率替换为随机词元。这种偶然的噪声鼓励BERT在其双向上下文编码中不那么偏向于掩蔽词元，而这种影响在标签保持不变时更加深刻。</p><p>总的来说Masked LM的目标是预测出被掩蔽的单词，相当于做一个完形填空，做完形填空的任务有利于BERT学会理解文本的上下文信息。</p><h3 id="下⼀句预测（Next-Sentence-Prediction-NSP）"><a href="#下⼀句预测（Next-Sentence-Prediction-NSP）" class="headerlink" title="下⼀句预测（Next Sentence Prediction, NSP）"></a>下⼀句预测（Next Sentence Prediction, NSP）</h3><p>虽然掩蔽语言模型能够双向上下文来表示单词，但它不能显式地表示文本对之间的逻辑关系，在这一些自然语言处理任务中尤为重要（如QA问答系统和自然语言推断）。为了帮助理解两个文本序列之间的关系，BERT在预训练中考虑了一个二元分类任务——下一句预测。在为预训练生成句子对时，有⼀半的时间它们确实是标签为“Yes”的连续句⼦。但在另⼀半的时间⾥，第⼆个句⼦是从语料库中随机抽取的，标记为“No”。</p><img src="/2022/04/17/bert/image-20220417182324087.png" class=""><p>  这个模型可以用上图表示，输入是两个句子，也就是文本对的输入格式。BERT输出是将特殊词元“&lt;cls&gt;”  编码后的向量，由于Transformer编码器中的自主意力，特殊词元“&lt;cls&gt;”的BERT表⽰已经对输⼊的两个句⼦进⾏了编码。再将编码后的向量输入一个多层感知机来预测第二个句子是否是BERT输入序列中第一个句子的下一句。  </p><h3 id="用于预训练BERT的数据集"><a href="#用于预训练BERT的数据集" class="headerlink" title="用于预训练BERT的数据集"></a>用于预训练BERT的数据集</h3><p>为了预训练BERT模型，我们需要以理想的格式生成数据集，以便于上述两个预训练任务。在论文中，预训练的语料库有两个：BooksCorpus（8亿个单词）、English Wikipedia（25亿个单词）。对于English Wikipedia，只提取文本段落而忽略列表、表格和标题。</p><h2 id="BERT下游任务"><a href="#BERT下游任务" class="headerlink" title="BERT下游任务"></a>BERT下游任务</h2><p>基于预训练后的BERT模型，可以将其融合到各种NLP任务中。BERT中每个词没有固定的词向量，是根据词的上下文来动态产生当前词的词向量。</p><p>在论文中，列出了四大BERT的下游任务：</p><img src="/2022/04/17/bert/image-20220417185625315.png" class=""><p>第一个任务是句子对的分类任务，第二个是单一句子的分类任务，第三个是问答系统，第四个是单一句子的标注任务。它们均可在预训练BERT的输出上接入相应的结构实现，最后基于任务的训练数据进行微调实现。其中任务一和任务二是将特殊词元“&lt;cls&gt;”  编码后的向量输入一个分类器实现，任务四是将单个句子里每个词元经过BERT编码后的向量分别输入一个分类器中实现。</p><img src="/2022/04/17/bert/image-20220417191544227.png" class=""><p>对于任务三，输入是一个问题加一个文件，输出是输入文件对应答案的开始和结束位置。由此可以看出该模型实现的要求是询问的答案可以在文件中找到，那么这个任务怎么实现呢？如上图，我们初始化两个和编码词元后的向量相同长度的vector，图中橙色的向量用于确认答案在文件中开始词元的序号（位置），蓝色的向量用于确认结束词元的序号。将这两个向量分别乘于文件中的词元经过BERT编码的向量，然后通过一个softmax层找到最大值对应的序号即可得到答案。如图中s=2，e=3，如果文件的内容是how to use BERT，则答案为use BERT。因此在这个任务中，我们需要训练的参数是图中的两个向量。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p><p>[2] <a href="https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.php">李宏毅 机器学习2021</a></p><p>[3] <a href="https://arxiv.org/abs/1810.04805">Devlin, Jacob, et al. “Bert: Pre-training of deep bidirectional transformers for language understanding.” <em>arXiv preprint arXiv:1810.04805</em> (2018).</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BERT </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformer</title>
      <link href="/2022/04/11/transformer/"/>
      <url>/2022/04/11/transformer/</url>
      
        <content type="html"><![CDATA[<p>在前面我们学习过<a href="https://faith-ye.github.io/2022/04/02/zi-zhu-yi-li-mo-xing/">自注意力模型</a>，自注意力模型拥有CNN并行运算和RNN挖掘序列中的关系两大优势。因此，使用自注意力模型来设计深度架构是很有吸引力的。对比之前仍然依赖RNN来实现输入表示的类似注意力模型，Transformer模型完全基于自注意力机制，不但实现了快速并行计算，还可以像DNN一样将模型增加到非常深的深度。Transformer由论文<a href="https://arxiv.org/abs/1706.03762">Attention is All You Need</a>提出，最初是应用于文本数据上的序列到序列学习，但现在已经推⼴到各种现代的深度学习中，例如语⾔、视觉、语⾳和强化学习领域。</p><p>Transformer的整体架构如下图所示，是一个Encoder-Decoder架构。Transformer是由Encoder和Decoder组成，这两个部分是基于自注意力的模块叠加而成的，源序列和目标序列先词向量化(embedding)，然后加上位置编码(positional encoding)，再分别输入到Encoder和Decoder中。</p><img src="/2022/04/11/transformer/image-20220411170353238.png" class=""><h2 id="Encoder和Decoder"><a href="#Encoder和Decoder" class="headerlink" title="Encoder和Decoder"></a>Encoder和Decoder</h2><p>从宏观角度来看，transformer的Encoder是由多个相同的层叠加而成的，每个层都有两个子层(sublayer)。第一个子层是多头自注意力(multi-head self-attention)层；第二个子层是基于位置的前馈网络(position-wise feed-forward network)层。同时受残差网络的启发，每个子层都采用了残差连接(residual connection)，并在残差连接的加法计算之后，使用层规范化(layer normalization)。在计算编码器的自注意力时，查询、键和值都来自前一个layer的输出。由于使用了残差连接，Transformer的每一个layer都将输出一个d维表示向量。</p><p>Transformer的Decoder也是由多个相同的层叠加而成的。除了Encoder中描述的两个子层之外，Decoder还在两个子层之间插入了第三个子层，称为编码器 - 解码器注意力(encoder-decoder attention)层。Decoder的子层同Encoder一样，使用了残差连接和层规范化。在编码器－解码器注意⼒中，查询来⾃前Decoder前一个layer的输出，而键和值来⾃Encoder的输出。在Decoder自主意力中，查询、键和值都来自于Decoder上一个layer的输出。但是和Encoder自主意力不同的是，Decoder的每个位置只能考虑位置之前的所有位置。这种掩蔽(masked)注意力保留了自回归(auto-regressive)属性，确保预测仅依赖于已生成的输出词元。  </p><h2 id="自注意力"><a href="#自注意力" class="headerlink" title="自注意力"></a>自注意力</h2><p>有关这方面的详细推导请看<a href="https://faith-ye.github.io/2022/04/02/zi-zhu-yi-li-mo-xing/">这篇文章</a>，在这节我们主要讲解编码器 - 解码器注意力层是怎么运作的。</p><img src="/2022/04/11/transformer/image-20220411200918339.png" class=""><p>以语言识别为例，如上图假定Transformer的Encoder将一段声音讯号编码成$a^{1}、a^{2}、a^{3}$三个向量，而Transformer的Decoder获取第一个表示开始的向量，将其输入到掩蔽多头自主意力层，得到一个向量，将该向量的查询q和Encoder得到的三个向量的键、值做self-attention处理得到向量v，再把向量v作为Decoder的基于位置的前馈网络层中，最后得到目标词汇。</p><img src="/2022/04/11/transformer/image-20220411200951752.png" class=""><p>将得到目标词汇对应的向量连同start对应的向量作为Decoder的输出，经过掩蔽多头自主意力层得到另一个向量，将该向量的查询$q^{‘}$和Encoder得到的三个向量的键、值做self-attention处理得到向量$v^{‘}$，反复进行这样的操作直到Decoder输出结束的标志。</p><h2 id="基于位置的前馈网络层"><a href="#基于位置的前馈网络层" class="headerlink" title="基于位置的前馈网络层"></a>基于位置的前馈网络层</h2><p>该层包含两个线性变换，在这两个线性变化之间有一个ReLU激活函数。</p><p>$$FFN(x)=max(0,xW_{1}+b_{1})W_{2}+b_{2}$$</p><h2 id="Embedding和softmax"><a href="#Embedding和softmax" class="headerlink" title="Embedding和softmax"></a>Embedding和softmax</h2><p>与其他序列转换模型类似，我们使用已经学习好的Embedding层将源序列和目标序列转换维度是$d_{model}$的向量。同时在Transformer Decoder的最后，使用线性变换和softmax函数将编码器输出转换为预测目标词汇的概率。</p><h2 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码"></a>位置编码</h2><p>由于Transformer模型不包含递归和卷积操作，整个运行过程都是应用self-attention实现计算的平行化，因此Transformer没有考虑输入序列的先后顺序。为了让模型利用序列的顺序，我们需要给模型注入一些关于词汇在序列中相对或绝对位置的信息。为此，Transformer在编码器和解码器的输入加入了位置编码。位置编码和Embedding后的词向量具有相同的维度$d_{model}$，将这两个向量相加，就可以获得序列的位置资讯。</p><p>位置编码计算为：</p><p>$$PE_{(pos,2i)}=sin(pos/10000^{2i/d_{model}})$$</p><p>$$PE_{(pos,2i+1)}=cos(pos/10000^{2i/d_{model}})$$</p><p>式中，$pos\in postion_{inputs},i\in (0,1,…,d_{model}/2)$</p><h2 id="训练和翻译"><a href="#训练和翻译" class="headerlink" title="训练和翻译"></a>训练和翻译</h2><p>假设有一个英文和其对应的中文元组：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'BOS'</span><span class="token punctuation">,</span><span class="token string">'machine'</span><span class="token punctuation">,</span><span class="token string">'learning'</span><span class="token punctuation">,</span><span class="token string">'EOS'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'BOS'</span><span class="token punctuation">,</span><span class="token string">'机器'</span><span class="token punctuation">,</span><span class="token string">'学习'</span><span class="token punctuation">,</span><span class="token string">'EOS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假设我们通过大量的数据训练好了Transformer，数据的格式如下：</p><ul><li>英文部分的输入为：BOS machine learning EOS；</li><li>中文部分的输入为：BOS 机器 学习；</li><li>标签为：机器 学习 EOS                     用于CrossEntropy更新模型参数</li></ul><p>翻译时：</p><ul><li>英文序列作为输入；</li><li>Encoder输出max_output_len个词向量;</li><li>将标志符号BOS作为中文的第一个tokens，结合Encoder的输出输入到Decoder中得到关于目标词汇的概率，取概率最大对应的词汇作为输出结果，再将该词汇对应的词向量作为新的中文输入词向量，这样循环下去一次得到max_output_len个输出结果，即得到输出的中文分词列表；</li><li>顺着列表检查分词，如果出现标志符号<code>EOS</code>就截取前面的分词组成中文结果。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] Vaswani, Ashish, et al. “Attention is all you need.” <em>Advances in neural information processing systems</em> 30 (2017).</p><p>[2] <a href="https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.php">李宏毅 机器学习2021</a></p><p>[3] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Seq2Seq </tag>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seq2Seq代码实现</title>
      <link href="/2022/04/11/seq2seq-dai-ma-shi-xian/"/>
      <url>/2022/04/11/seq2seq-dai-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>在这章节，我们将用RNN搭建一个seq2seq模型(sequences to sequences)，实现英文到中文的翻译，数据集应用的是由<a href="http://www.manythings.org/anki/">Tatoeba项⽬的双语句⼦对114</a>组成的“英-中文”数据集。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>原始语料需要进行预处理，所以导入必要的包和模块。注意初次安装nltk后，进行分词需要依赖punkt，因此需要对其进行下载</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> jieba<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">from</span> opencc <span class="token keyword">import</span> OpenCC<span class="token keyword">import</span> nltk<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>tokenize <span class="token keyword">import</span> word_tokenizenltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">'punkt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[nltk_data] Downloading package punkt to[nltk_data]     C:\Users\kaxim\AppData\Roaming\nltk_data...[nltk_data]   Package punkt is already up-to-date!True</code></pre><h3 id="词元化"><a href="#词元化" class="headerlink" title="词元化"></a>词元化</h3><p>该部分的作用是将数据词元化，用en，cn两个列表分别用来保存源语言（英语）和目标语言（中文）。在这两个列表中，对应列表索引的内容分别表示英语和其对应的中文翻译。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cc <span class="token operator">=</span> OpenCC<span class="token punctuation">(</span><span class="token string">'t2s'</span><span class="token punctuation">)</span>   <span class="token comment"># t2s -繁体转简体； s2t -简体转繁体</span>en<span class="token punctuation">,</span> cn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>data_dir <span class="token operator">=</span> <span class="token string">'./data/cmn-eng/cmn.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>   <span class="token comment"># sentence[0]为英文句子，sentence[1]为中文句子</span>        sentence <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>        en_sentence <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> word_tokenize<span class="token punctuation">(</span>sentence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            en_sentence <span class="token operator">+=</span> word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>        en<span class="token punctuation">.</span>append<span class="token punctuation">(</span>en_sentence<span class="token punctuation">)</span>                cn_sentence <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            word <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[ \n\t\r]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span>            <span class="token keyword">if</span> word <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            cn_sentence <span class="token operator">+=</span> cc<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>        cn<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cn_sentence<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Building prefix dict from the default dictionary ...Loading model from cache C:\Users\kaxim\AppData\Local\Temp\jieba.cacheLoading model cost 0.429 seconds.Prefix dict has been built successfully.</code></pre><p>查看词元化后的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">en<span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cn<span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>('thanks for the memories . ', '感谢 那些 回忆 。 ')</code></pre><h3 id="构建字典"><a href="#构建字典" class="headerlink" title="构建字典"></a>构建字典</h3><p>由于机器翻译数据集由语言对组成，因此我们需分别为源语言和目标语言构建字典，这样就方便之后转为one-hot vector。在该字典中，我们将出现次数少于3的低频率词视为相同未知词元（“&lt;unk&gt;”）。除此之外，我们还指定了额外的特定词元，例如在小批量时⽤于将序列填充到相同⻓度的填充词元（“&lt;pad&gt;”），以及序列的开始词元（“&lt;bos&gt;”）和结束词元（“&lt;eos&gt;”）。这些特殊词元在⾃然语⾔处理任务中⽐较常⽤。<br>构建的字典有以下两种形式：<br>int2word: 将整数转为对应文字<br>word2int: 将文字转为对应整数，该字典和前一个字典是一一对应关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 英文</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> sentence <span class="token keyword">in</span> en<span class="token punctuation">:</span>    _sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[ \n\t\r ]'</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    _sentence <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> _sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> _sentence<span class="token punctuation">:</span>        words<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>words <span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> d<span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#排序</span>words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word<span class="token punctuation">,</span> count <span class="token keyword">in</span> words <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">]</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;BOS&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;EOS&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;UNK&gt;'</span><span class="token punctuation">]</span> <span class="token operator">+</span> wordsword2int_en<span class="token punctuation">,</span> int2word_en <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    word2int_en<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> index    int2word_en<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token comment"># 中文</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> sentence <span class="token keyword">in</span> cn<span class="token punctuation">:</span>    _sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[ \n\t\r ]'</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    _sentence <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> _sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> _sentence<span class="token punctuation">:</span>        words<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>words <span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> d<span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#排序</span>words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word<span class="token punctuation">,</span> count <span class="token keyword">in</span> words <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">]</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;BOS&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;EOS&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;UNK&gt;'</span><span class="token punctuation">]</span> <span class="token operator">+</span> wordsword2int_cn<span class="token punctuation">,</span> int2word_cn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>    word2int_cn<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> index    int2word_cn<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分字典展示，由于字典不支持切片功能，因此我们需构建一个函数，实现切片功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dict_slice</span><span class="token punctuation">(</span>adict<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    keys <span class="token operator">=</span> adict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict_slice <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span> index<span class="token punctuation">]</span><span class="token punctuation">:</span>        dict_slice<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> adict<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token keyword">return</span> dict_slice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>英文字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict_slice<span class="token punctuation">(</span>word2int_en<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict_slice<span class="token punctuation">(</span>int2word_en<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>({'&lt;PAD&gt;': 0,  '&lt;BOS&gt;': 1,  '&lt;EOS&gt;': 2,  '&lt;UNK&gt;': 3,  '.': 4,  'i': 5,  'the': 6,  'to': 7,  'you': 8,  'a': 9,  '?': 10,  'is': 11,  'tom': 12,  "n't": 13,  'he': 14}, {0: '&lt;PAD&gt;',  1: '&lt;BOS&gt;',  2: '&lt;EOS&gt;',  3: '&lt;UNK&gt;',  4: '.',  5: 'i',  6: 'the',  7: 'to',  8: 'you',  9: 'a',  10: '?',  11: 'is',  12: 'tom',  13: "n't",  14: 'he'})</code></pre><p>中文字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict_slice<span class="token punctuation">(</span>word2int_cn<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict_slice<span class="token punctuation">(</span>int2word_cn<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>({'&lt;PAD&gt;': 0,  '&lt;BOS&gt;': 1,  '&lt;EOS&gt;': 2,  '&lt;UNK&gt;': 3,  '。': 4,  '我': 5,  '的': 6,  '了': 7,  '你': 8,  '他': 9,  '？': 10,  '在': 11,  '汤姆': 12,  '是': 13,  '吗': 14}, {0: '&lt;PAD&gt;',  1: '&lt;BOS&gt;',  2: '&lt;EOS&gt;',  3: '&lt;UNK&gt;',  4: '。',  5: '我',  6: '的',  7: '了',  8: '你',  9: '他',  10: '？',  11: '在',  12: '汤姆',  13: '是',  14: '吗'})</code></pre><h3 id="构建训练资料"><a href="#构建训练资料" class="headerlink" title="构建训练资料"></a>构建训练资料</h3><p>将数据划分成训练集，验证集和测试集</p><ul><li>训练集：25000句</li><li>验证集：1000句</li><li>测试集：1965句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">sentences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> en_sentence<span class="token punctuation">,</span> cn_sentence <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>en<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 去除中英文种出现3个未知词汇以上的句子</span>    tokens <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[ \n\t\r  ]'</span><span class="token punctuation">,</span> en_sentence<span class="token punctuation">)</span>    tokens <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>        index <span class="token operator">=</span> word2int_en<span class="token punctuation">.</span>get<span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>        tokens <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[ \n\t\r  ]'</span><span class="token punctuation">,</span> cn_sentence<span class="token punctuation">)</span>    tokens <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>        Index <span class="token operator">=</span> word2int_cn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    sentences<span class="token punctuation">.</span>append<span class="token punctuation">(</span>en_sentence <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> cn_sentence<span class="token punctuation">)</span>    sentences <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>sentences<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 去重</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>sentences<span class="token punctuation">)</span>train_set <span class="token operator">=</span> sentences<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25000</span><span class="token punctuation">]</span>validation_set <span class="token operator">=</span> sentences<span class="token punctuation">[</span><span class="token number">25000</span><span class="token punctuation">:</span><span class="token number">26000</span><span class="token punctuation">]</span>test_set <span class="token operator">=</span> sentences<span class="token punctuation">[</span><span class="token number">26000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1965</code></pre><h2 id="定义dataset"><a href="#定义dataset" class="headerlink" title="定义dataset"></a>定义dataset</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 首先定义一个函数，它可以将句子扩展到相同长度，以便模型训练</span><span class="token keyword">class</span> <span class="token class-name">LabelTransform</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">,</span> pad<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size        self<span class="token punctuation">.</span>pad <span class="token operator">=</span> pad            <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>        label <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>label<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> label<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'constant'</span><span class="token punctuation">,</span> constant_values<span class="token operator">=</span>self<span class="token punctuation">.</span>pad<span class="token punctuation">)</span>        <span class="token keyword">return</span> label<span class="token comment"># dataset</span><span class="token keyword">class</span> <span class="token class-name">EN2CNDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_output_len<span class="token punctuation">,</span> set_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">,</span> self<span class="token punctuation">.</span>int2word_en <span class="token operator">=</span> word2int_en<span class="token punctuation">,</span> int2word_en        self<span class="token punctuation">.</span>word2int_cn<span class="token punctuation">,</span> self<span class="token punctuation">.</span>int2word_cn <span class="token operator">=</span> word2int_cn<span class="token punctuation">,</span> int2word_cn        self<span class="token punctuation">.</span>data <span class="token operator">=</span> set_name                self<span class="token punctuation">.</span>cn_vocab_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2int_cn<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>en_vocab_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> LabelTransform<span class="token punctuation">(</span>max_output_len<span class="token punctuation">,</span> self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">[</span><span class="token string">'&lt;PAD&gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 先将中英文分开</span>        sentences <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        sentences <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[\t\n]'</span><span class="token punctuation">,</span> sentences<span class="token punctuation">)</span>        sentences <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> sentences<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(sentences)</span>        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentences<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>                <span class="token comment"># 预备特殊字符</span>        BOS <span class="token operator">=</span> self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">[</span><span class="token string">'&lt;BOS&gt;'</span><span class="token punctuation">]</span>        EOS <span class="token operator">=</span> self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">[</span><span class="token string">'&lt;EOS&gt;'</span><span class="token punctuation">]</span>        UNK <span class="token operator">=</span> self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">[</span><span class="token string">'&lt;UNK&gt;'</span><span class="token punctuation">]</span>                <span class="token comment"># 在开头添加 &lt;BOS&gt;，在结尾添加 &lt;EOS&gt; ，不在字典里面的 subword （词）用 &lt;UNK&gt; 代替</span>        en<span class="token punctuation">,</span> cn <span class="token operator">=</span> <span class="token punctuation">[</span>BOS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BOS<span class="token punctuation">]</span>        <span class="token comment"># 将句子拆解为 subword ，并用字典对应的整数取代</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> sentences<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(f'en: {sentence}')</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>            en<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2int_en<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> UNK<span class="token punctuation">)</span><span class="token punctuation">)</span>        en<span class="token punctuation">.</span>append<span class="token punctuation">(</span>EOS<span class="token punctuation">)</span>                <span class="token comment"># 中文</span>        sentence <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> sentences<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(f'cn: {sentence}')</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>            cn<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2int_cn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> UNK<span class="token punctuation">)</span><span class="token punctuation">)</span>        cn<span class="token punctuation">.</span>append<span class="token punctuation">(</span>EOS<span class="token punctuation">)</span>                en<span class="token punctuation">,</span> cn <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>cn<span class="token punctuation">)</span>        <span class="token comment"># print(en, cn)</span>                <span class="token comment"># 用 &lt;PAD&gt; 将句子补到相同的长度</span>        en<span class="token punctuation">,</span> cn <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>cn<span class="token punctuation">)</span>        <span class="token comment"># print(en, cn)</span>        en<span class="token punctuation">,</span> cn <span class="token operator">=</span>  torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>cn<span class="token punctuation">)</span>                <span class="token keyword">return</span> en<span class="token punctuation">,</span> cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Encoder-Decoder模型"><a href="#Encoder-Decoder模型" class="headerlink" title="Encoder-Decoder模型"></a>Encoder-Decoder模型</h2><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>seq2seq模型的编码器为RNN。对于每个输入，Encoder会输出一个向量和一个隐状态（hidden state），并将隐状态作为Decoder的输入。换句话说，Encoder会逐步读取输入序列，并输出单个向量（最终隐状态）</p><p>参数：</p><ul><li>en_vocab_size是英文字典的大小，也就是英文的subword的个数</li><li>emb_dim是embedding的维度，主要将one-hot vector的单词向量压缩到指定的维度，主要是为了将维和浓缩资讯的功能，可以使用预先训练好的word embedding</li><li>hid_dim是RNN输出和隐状态的维度</li><li>n_layers是RNN要叠多少层</li><li>dropout是决定有多少的概率会将某个节点变为0，主要是为了防止过拟合，一般来说是在训练时使用，测试时则不适用</li></ul><p>Encoder的输入：</p><ul><li>英文的整数序列</li></ul><p>输出：</p><ul><li>outputs：最上层RNN全部的输出，可以用Attention进行处理</li><li>hidden：每层最后的隐状态，将传递到Decoder进行解码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> en_vocab_size<span class="token punctuation">,</span> emb_dim<span class="token punctuation">,</span> hid_dim<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>en_vocab_size<span class="token punctuation">,</span> emb_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hid_dim <span class="token operator">=</span> hid_dim        self<span class="token punctuation">.</span>n_layers <span class="token operator">=</span> n_layers        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>emb_dim<span class="token punctuation">,</span> hid_dim<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># input = [batch size, sequence len, vocab size]</span>        embedding <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        outputs<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># outputs = [batch size, sequence len, hid dim * directions]</span>        <span class="token comment"># hidden =  [num_layers * directions, batch size  , hid dim]</span>        <span class="token comment"># outputs 是最上层RNN的输出</span>        <span class="token keyword">return</span> outputs<span class="token punctuation">,</span> hidden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>Decoder是另一个RNN，在最简单的seq2seq decoder中， 仅使用Encoder每一层最后的隐状态来进行解码，这个隐状态用作Decoder的初始隐状态，本节先做最简单的Decoder，你也可以尝试将Encoder的输出用于Attention机制加到Decoder的输入中。</p><p>参数：</p><ul><li>cn_vocab_size是中文字典的大小，也就是中文的subword的个数</li><li>emb_dim是embedding的维度，主要将one-hot vector的单词向量压缩到指定的维度，主要是为了将维和浓缩资讯的功能，可以使用预先训练好的word embedding</li><li>hid_dim是RNN输出和隐状态的维度</li><li>n_layers是RNN要叠多少层</li><li>dropout是决定有多少的概率会将某个节点变为0，主要是为了防止过拟合，一般来说是在训练时使用，测试时则不适用</li></ul><p>Decoder的输入：</p><ul><li>前一次解码出来的单词的整数表示</li></ul><p>输出：</p><ul><li>hidden：根据输入和前一次的隐状态，现在的隐状态更新的结果</li><li>output：每个字有多少概率是这次解码的结果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Decoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cn_vocab_size<span class="token punctuation">,</span> emb_dim<span class="token punctuation">,</span> hid_dim<span class="token punctuation">,</span> n_layers<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cn_vocab_size <span class="token operator">=</span> cn_vocab_size        self<span class="token punctuation">.</span>hid_dim <span class="token operator">=</span> hid_dim <span class="token operator">*</span> <span class="token number">2</span>    <span class="token comment"># Encoder使用双向RNN的缘故</span>        self<span class="token punctuation">.</span>n_layers <span class="token operator">=</span> n_layers        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>cn_vocab_size<span class="token punctuation">,</span> emb_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_dim <span class="token operator">=</span> emb_dim        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>input_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hid_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_layers<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding2vocab <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hid_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hid_dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hid_dim <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cn_vocab_size<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># input = [batch size, vocab size]</span>        <span class="token comment"># hidden = [batch size, n layers * directions, hid dim]</span>        <span class="token comment"># Decoder 只会是单向的，所以 directions=1</span>        <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                       <span class="token comment"># input(batch_size, 1, vocab_size)</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># embedded(batch_size, 1, embed_dim)</span>        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>embedded<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>              <span class="token comment"># output(batch_size, 1, hid_dim * 2)  hidden(batch_size, num_layers * 1, hid_dim * 2)</span>                <span class="token comment"># 将 RNN 的输出转为每个词出现的概率</span>        prediction <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding2vocab<span class="token punctuation">(</span>output<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># prediction(batch_size, cn_vocab_size)</span>        <span class="token keyword">return</span> prediction<span class="token punctuation">,</span> hidden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Seq2Seq"><a href="#Seq2Seq" class="headerlink" title="Seq2Seq"></a>Seq2Seq</h3><p>这部分是整个seq2seq模型的构建，实现Encoder和Decoder的联合。简单来说就是Encoder接受输入得到输出，将Encoder的输出传给Decoder，然后将Decoder得到的输出传回Decoder进行解码，解码完成后，将Decoder的输出传回，就这样一直到输出中解码出&lt;EOS&gt;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Seq2Seq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Seq2Seq<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> encoder        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> decoder        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> teacher_forcing_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># input  = [batch size, input len, vocab size]</span>        <span class="token comment"># target = [batch size, target len, vocab size]</span>        <span class="token comment"># teacher_forcing_ratio 是有多少概率使用正确答案来计算</span>        batch_size <span class="token operator">=</span> target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        target_len <span class="token operator">=</span> target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        vocab_size <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>cn_vocab_size                <span class="token comment"># 准备一个储存空间来储存输出</span>        outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> target_len<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 输入进入Encoder</span>        encoder_outputs<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token comment"># Encoder 最后的隐状态（hidden state）用来初始化 Decoder</span>        <span class="token comment"># encoder_outputs 主要是使用在 Attention</span>        <span class="token comment"># 因为 Encoder 是双向的RNN，所以需要将同一层两个方向的 hidden state 连接在一起</span>        <span class="token comment"># hidden =  [num_layers * directions, batch size  , hid dim]  --&gt; [num_layers, directions, batch size  , hid dim]</span>        hidden <span class="token operator">=</span> hidden<span class="token punctuation">.</span>view<span class="token punctuation">(</span>self<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>n_layers<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 取的 &lt;BOS&gt; token</span>        <span class="token builtin">input</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> target_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>            outputs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token operator">=</span> output            <span class="token comment"># 决定是否用正确答案来做训练</span>            teacher_force <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> teacher_forcing_ratio            <span class="token comment"># 取出概率最大的单词</span>            top1 <span class="token operator">=</span> output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 如果是 teacher force 则用正解训练，反之用自己预测的单词训练</span>            <span class="token builtin">input</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token keyword">if</span> teacher_force <span class="token keyword">and</span> t <span class="token operator">&lt;</span> target_len <span class="token keyword">else</span> top1            preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>top1<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputs<span class="token punctuation">,</span> preds        <span class="token keyword">def</span> <span class="token function">inference</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># input  = [batch size, input len, vocab size]</span>        <span class="token comment"># target = [batch size, target len, vocab size]</span>        batch_size <span class="token operator">=</span> target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        target_len <span class="token operator">=</span> target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        vocab_size <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>cn_vocab_size                <span class="token comment"># 准备一个储存空间来储存输出</span>        outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> target_len<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 输入进入Encoder</span>        encoder_outputs<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token comment"># Encoder 最后的隐状态（hidden state）用来初始化 Decoder</span>        <span class="token comment"># encoder_outputs 主要是使用在 Attention</span>        <span class="token comment"># 因为 Encoder 是双向的RNN，所以需要将同一层两个方向的 hidden state 连接在一起</span>        <span class="token comment"># hidden =  [num_layers * directions, batch size  , hid dim]  --&gt; [num_layers, directions, batch size  , hid dim]</span>        hidden <span class="token operator">=</span> hidden<span class="token punctuation">.</span>view<span class="token punctuation">(</span>self<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>n_layers<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        hidden <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 取的 &lt;BOS&gt; token</span>        <span class="token builtin">input</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> target_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>            outputs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span> <span class="token operator">=</span> output            <span class="token comment"># 取出概率最大的单词</span>            top1 <span class="token operator">=</span> output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token builtin">input</span> <span class="token operator">=</span> top1            preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>top1<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputs<span class="token punctuation">,</span> preds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><h3 id="储存模型"><a href="#储存模型" class="headerlink" title="储存模型"></a>储存模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> store_model_path<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>store_model_path<span class="token punctuation">}</span></span><span class="token string">/model_</span><span class="token interpolation"><span class="token punctuation">{</span>step<span class="token punctuation">}</span></span><span class="token string">.ckpt'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="载入模型"><a href="#载入模型" class="headerlink" title="载入模型"></a>载入模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> load_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Load model from </span><span class="token interpolation"><span class="token punctuation">{</span>load_model_path<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>load_model_path<span class="token punctuation">}</span></span><span class="token string">.ckpt'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_model</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> en_vocab_size<span class="token punctuation">,</span> cn_vocab_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 构建模型</span>    encoder <span class="token operator">=</span> Encoder<span class="token punctuation">(</span>en_vocab_size<span class="token punctuation">,</span> config<span class="token punctuation">.</span>emb_dim<span class="token punctuation">,</span> config<span class="token punctuation">.</span>hid_dim<span class="token punctuation">,</span> config<span class="token punctuation">.</span>n_layers<span class="token punctuation">,</span> config<span class="token punctuation">.</span>dropout<span class="token punctuation">)</span>    decoder <span class="token operator">=</span> Decoder<span class="token punctuation">(</span>cn_vocab_size<span class="token punctuation">,</span> config<span class="token punctuation">.</span>emb_dim<span class="token punctuation">,</span> config<span class="token punctuation">.</span>hid_dim<span class="token punctuation">,</span> config<span class="token punctuation">.</span>n_layers<span class="token punctuation">,</span> config<span class="token punctuation">.</span>dropout<span class="token punctuation">)</span>    model <span class="token operator">=</span> Seq2Seq<span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># optimizer</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>config<span class="token punctuation">.</span>learning_rate<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>load_model<span class="token punctuation">:</span>        model <span class="token operator">=</span> load_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> config<span class="token punctuation">.</span>load_model_path<span class="token punctuation">)</span>        model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token punctuation">,</span> optimizer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字转句子"><a href="#数字转句子" class="headerlink" title="数字转句子"></a>数字转句子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tokens2sentence</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> int2word<span class="token punctuation">)</span><span class="token punctuation">:</span>    sentences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> tokens <span class="token keyword">in</span> outputs<span class="token punctuation">:</span>        sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>        word <span class="token operator">=</span> int2word<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> word <span class="token operator">==</span> <span class="token string">'&lt;EOS&gt;'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        sentence<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    sentences<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>    <span class="token keyword">return</span> sentences<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算BLEU-score"><a href="#计算BLEU-score" class="headerlink" title="计算BLEU score"></a>计算BLEU score</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nltk<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>translate<span class="token punctuation">.</span>bleu_score <span class="token keyword">import</span> sentence_bleu<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>translate<span class="token punctuation">.</span>bleu_score <span class="token keyword">import</span> SmoothingFunction<span class="token keyword">def</span> <span class="token function">computebleu</span><span class="token punctuation">(</span>sentences<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentences<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cut_token</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> token <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>            <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">'&lt;UNK&gt;'</span> <span class="token keyword">or</span> token<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>token<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp <span class="token operator">+=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> token<span class="token punctuation">]</span>        <span class="token keyword">return</span> tmp     <span class="token keyword">for</span> sentence<span class="token punctuation">,</span> target <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>sentences<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> cut_token<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>        target <span class="token operator">=</span> cut_token<span class="token punctuation">(</span>target<span class="token punctuation">)</span>        score <span class="token operator">+=</span> sentence_bleu<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> sentence<span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                                              <span class="token keyword">return</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代dataloader"><a href="#迭代dataloader" class="headerlink" title="迭代dataloader"></a>迭代dataloader</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">infinite_iter</span><span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>            <span class="token keyword">yield</span> ret        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>            it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练与测试"><a href="#训练与测试" class="headerlink" title="训练与测试"></a>训练与测试</h2><p>实际工作中，训练一个好的机器翻译模型需要大量的语料，训练的周期长。本次实验数据集简单，训练耗时短，定义的训练和测试函数如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> loss_function<span class="token punctuation">,</span> total_steps<span class="token punctuation">,</span> summary_steps<span class="token punctuation">,</span> train_dataset<span class="token punctuation">,</span> teacher_forcing_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    loss_sum <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>summary_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        sources<span class="token punctuation">,</span> targets <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>train_iter<span class="token punctuation">)</span>        sources<span class="token punctuation">,</span> targets <span class="token operator">=</span> sources<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        outputs<span class="token punctuation">,</span> preds <span class="token operator">=</span> model<span class="token punctuation">(</span>sources<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> teacher_forcing_ratio<span class="token punctuation">)</span>        <span class="token comment"># targets 的第一个 token 是 &lt;BOS&gt; 所以忽略</span>        outputs <span class="token operator">=</span> outputs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> outputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        grad_norm <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_sum <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        loss_sum <span class="token operator">=</span> loss_sum <span class="token operator">/</span> <span class="token number">5</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">"train [{}] loss: {:.3f}, Perplexity: {:.3f} "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_steps <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> loss_sum<span class="token punctuation">,</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>loss_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_sum<span class="token punctuation">)</span>        loss_sum <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">return</span> model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> losses<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> dataloader<span class="token punctuation">,</span> loss_function<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    loss_sum<span class="token punctuation">,</span> bleu_score<span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span>    n <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sources<span class="token punctuation">,</span> targets <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>        sources<span class="token punctuation">,</span> targets <span class="token operator">=</span> sources<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        batch_size <span class="token operator">=</span> sources<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        outputs<span class="token punctuation">,</span> preds <span class="token operator">=</span> model<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>sources<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># targets 的第一個 token 是 &lt;BOS&gt; 所以忽略</span>        outputs <span class="token operator">=</span> outputs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> outputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        loss_sum <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 將預測結果轉為文字</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>view<span class="token punctuation">(</span>sources<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        preds <span class="token operator">=</span> tokens2sentence<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>int2word_cn<span class="token punctuation">)</span>        sources <span class="token operator">=</span> tokens2sentence<span class="token punctuation">(</span>sources<span class="token punctuation">,</span> dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>int2word_en<span class="token punctuation">)</span>        targets <span class="token operator">=</span> tokens2sentence<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> dataloader<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>int2word_cn<span class="token punctuation">)</span>        <span class="token keyword">for</span> source<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> target <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>sources<span class="token punctuation">,</span> preds<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 計算 Bleu Score</span>        bleu_score <span class="token operator">+=</span> computebleu<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        n <span class="token operator">+=</span> batch_size    <span class="token keyword">return</span> loss_sum <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> bleu_score <span class="token operator">/</span> n<span class="token punctuation">,</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h3><p>先训练后测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_process</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 准备训练资料</span>    train_dataset <span class="token operator">=</span> EN2CNDataset<span class="token punctuation">(</span>config<span class="token punctuation">.</span>max_output_len<span class="token punctuation">,</span> train_set<span class="token punctuation">)</span>    train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>config<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    train_iter <span class="token operator">=</span> infinite_iter<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>    <span class="token comment"># 准备验证资料</span>    val_dataset <span class="token operator">=</span> EN2CNDataset<span class="token punctuation">(</span>config<span class="token punctuation">.</span>max_output_len<span class="token punctuation">,</span> validation_set<span class="token punctuation">)</span>    val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 构建模型</span>    model<span class="token punctuation">,</span> optimizer <span class="token operator">=</span> build_model<span class="token punctuation">(</span>config<span class="token punctuation">,</span> train_dataset<span class="token punctuation">.</span>en_vocab_size<span class="token punctuation">,</span> train_dataset<span class="token punctuation">.</span>cn_vocab_size<span class="token punctuation">)</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>ignore_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    train_losses<span class="token punctuation">,</span> val_losses<span class="token punctuation">,</span> bleu_scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    total_steps <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>total_steps <span class="token operator">&lt;</span> config<span class="token punctuation">.</span>num_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 训练模型</span>        model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> loss <span class="token operator">=</span> train<span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> loss_function<span class="token punctuation">,</span> total_steps<span class="token punctuation">,</span> config<span class="token punctuation">.</span>summary_steps<span class="token punctuation">,</span> train_dataset<span class="token punctuation">,</span> config<span class="token punctuation">.</span>teacher_forcing_ratio<span class="token punctuation">)</span>        train_losses <span class="token operator">+=</span> loss        <span class="token comment"># 验证模型</span>        val_loss<span class="token punctuation">,</span> bleu_score<span class="token punctuation">,</span> result <span class="token operator">=</span> test<span class="token punctuation">(</span>model<span class="token punctuation">,</span> val_loader<span class="token punctuation">,</span> loss_function<span class="token punctuation">)</span>        val_losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span>        bleu_scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bleu_score<span class="token punctuation">)</span>        total_steps <span class="token operator">+=</span> config<span class="token punctuation">.</span>summary_steps        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">"val [{}] loss: {:.3f}, Perplexity: {:.3f}, blue score: {:.3f}  "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_steps<span class="token punctuation">,</span> val_loss<span class="token punctuation">,</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">,</span> bleu_score<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 储存模型的结果</span>        <span class="token keyword">if</span> total_steps <span class="token operator">%</span> config<span class="token punctuation">.</span>store_steps <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> total_steps <span class="token operator">&gt;=</span> config<span class="token punctuation">.</span>num_steps<span class="token punctuation">:</span>            save_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> config<span class="token punctuation">.</span>store_model_path<span class="token punctuation">,</span> total_steps<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>config<span class="token punctuation">.</span>store_model_path<span class="token punctuation">}</span></span><span class="token string">/output_</span><span class="token interpolation"><span class="token punctuation">{</span>total_steps<span class="token punctuation">}</span></span><span class="token string">.txt'</span></span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> result<span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> train_losses<span class="token punctuation">,</span> val_losses<span class="token punctuation">,</span> bleu_scores<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_process</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 准备测试资料</span>    test_dataset <span class="token operator">=</span> EN2CNDataset<span class="token punctuation">(</span>config<span class="token punctuation">.</span>max_output_len<span class="token punctuation">,</span> test_set<span class="token punctuation">)</span>    test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 构建模型</span>    model<span class="token punctuation">,</span> optimizer <span class="token operator">=</span> build_model<span class="token punctuation">(</span>config<span class="token punctuation">,</span> test_dataset<span class="token punctuation">.</span>en_vocab_size<span class="token punctuation">,</span> test_dataset<span class="token punctuation">.</span>cn_vocab_size<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Finish build model"</span><span class="token punctuation">)</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>ignore_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 测试模型</span>    test_loss<span class="token punctuation">,</span> bleu_score<span class="token punctuation">,</span> result <span class="token operator">=</span> test<span class="token punctuation">(</span>model<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> loss_function<span class="token punctuation">)</span>    <span class="token comment"># 储存结果</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./log/cmn-eng/test_output.txt'</span></span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> test_loss<span class="token punctuation">,</span> bleu_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><ul><li>实验的参数设定表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">configurations</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>        self<span class="token punctuation">.</span>emb_dim <span class="token operator">=</span> <span class="token number">256</span>        self<span class="token punctuation">.</span>hid_dim <span class="token operator">=</span> <span class="token number">512</span>        self<span class="token punctuation">.</span>n_layers <span class="token operator">=</span> <span class="token number">2</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> <span class="token number">0.5</span>        self<span class="token punctuation">.</span>learning_rate <span class="token operator">=</span> <span class="token number">0.00005</span>        self<span class="token punctuation">.</span>teacher_forcing_ratio <span class="token operator">=</span> <span class="token number">0.8</span>        self<span class="token punctuation">.</span>max_output_len <span class="token operator">=</span> <span class="token number">40</span>              <span class="token comment"># 最后输出句子的最大长度</span>        self<span class="token punctuation">.</span>num_steps <span class="token operator">=</span> <span class="token number">12000</span>                <span class="token comment"># 总训练次数</span>        self<span class="token punctuation">.</span>store_steps <span class="token operator">=</span> <span class="token number">300</span>                <span class="token comment"># 训练多少次后需存模型</span>        self<span class="token punctuation">.</span>summary_steps <span class="token operator">=</span> <span class="token number">300</span>              <span class="token comment"># 训练多少次后需检验是否有过拟合</span>        self<span class="token punctuation">.</span>load_model <span class="token operator">=</span> <span class="token boolean">False</span>               <span class="token comment"># 是否需载入模型</span>        self<span class="token punctuation">.</span>store_model_path <span class="token operator">=</span> <span class="token string">"./log/ckpt"</span>      <span class="token comment"># 储存模型的位置</span>        self<span class="token punctuation">.</span>load_model_path <span class="token operator">=</span> <span class="token string">"./log/ckpt/model_12000"</span>           <span class="token comment"># 载入模型的位置 e.g. "./ckpt/model_{step}" </span>        self<span class="token punctuation">.</span>data_path <span class="token operator">=</span> <span class="token string">"./data/cmn-eng"</span>          <span class="token comment"># 资料存放的位置</span>        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment"># 是否使用 Attention Mechanism</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练模型:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">config <span class="token operator">=</span> configurations<span class="token punctuation">(</span><span class="token punctuation">)</span>train_losses<span class="token punctuation">,</span> val_losses<span class="token punctuation">,</span> bleu_scores <span class="token operator">=</span> train_process<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Seq2Seq(  (encoder): Encoder(    (embedding): Embedding(4397, 256)    (rnn): GRU(256, 512, num_layers=2, batch_first=True, dropout=0.5, bidirectional=True)    (dropout): Dropout(p=0.5, inplace=False)  )  (decoder): Decoder(    (embedding): Embedding(6798, 256)    (rnn): GRU(256, 1024, num_layers=2, batch_first=True, dropout=0.5)    (embedding2vocab): Sequential(      (0): Linear(in_features=1024, out_features=4096, bias=True)      (1): Linear(in_features=4096, out_features=6798, bias=True)    )    (dropout): Dropout(p=0.5, inplace=False)  ))Adam (Parameter Group 0    amsgrad: False    betas: (0.9, 0.999)    eps: 1e-08    lr: 5e-05    weight_decay: 0) train [300] loss: 0.911, Perplexity: 2.488   val [300] loss: 5.124, Perplexity: 168.024, blue score: 0.186   val [600] loss: 4.827, Perplexity: 124.873, blue score: 0.233   val [900] loss: 4.643, Perplexity: 103.901, blue score: 0.278   val [1200] loss: 4.538, Perplexity: 93.484, blue score: 0.291   val [1500] loss: 4.514, Perplexity: 91.273, blue score: 0.288   val [1800] loss: 4.457, Perplexity: 86.216, blue score: 0.307   val [2100] loss: 4.504, Perplexity: 90.364, blue score: 0.313   val [2400] loss: 4.392, Perplexity: 80.830, blue score: 0.333   val [2700] loss: 4.389, Perplexity: 80.539, blue score: 0.329   val [3000] loss: 4.380, Perplexity: 79.800, blue score: 0.342   val [3300] loss: 4.319, Perplexity: 75.126, blue score: 0.357   val [3600] loss: 4.245, Perplexity: 69.757, blue score: 0.358   val [3900] loss: 4.262, Perplexity: 70.927, blue score: 0.371   val [4200] loss: 4.241, Perplexity: 69.500, blue score: 0.375   val [4500] loss: 4.234, Perplexity: 68.983, blue score: 0.387   val [4800] loss: 4.186, Perplexity: 65.791, blue score: 0.385   val [5100] loss: 4.122, Perplexity: 61.675, blue score: 0.396   val [5400] loss: 4.162, Perplexity: 64.201, blue score: 0.399   val [5700] loss: 4.148, Perplexity: 63.323, blue score: 0.410   val [6000] loss: 4.065, Perplexity: 58.286, blue score: 0.404   val [6300] loss: 4.089, Perplexity: 59.695, blue score: 0.410   val [6600] loss: 4.076, Perplexity: 58.931, blue score: 0.417   val [6900] loss: 4.103, Perplexity: 60.544, blue score: 0.423   val [7200] loss: 4.102, Perplexity: 60.452, blue score: 0.426   val [7500] loss: 4.092, Perplexity: 59.838, blue score: 0.429   val [7800] loss: 4.029, Perplexity: 56.186, blue score: 0.433   val [8100] loss: 4.057, Perplexity: 57.809, blue score: 0.440   val [8400] loss: 4.023, Perplexity: 55.880, blue score: 0.440   val [8700] loss: 4.025, Perplexity: 55.962, blue score: 0.445   val [9000] loss: 4.043, Perplexity: 57.014, blue score: 0.450   val [9300] loss: 4.020, Perplexity: 55.690, blue score: 0.453   val [9600] loss: 4.030, Perplexity: 56.256, blue score: 0.460   val [9900] loss: 4.032, Perplexity: 56.365, blue score: 0.465   val [10200] loss: 4.056, Perplexity: 57.730, blue score: 0.454   val [10500] loss: 4.001, Perplexity: 54.639, blue score: 0.465   val [10800] loss: 4.055, Perplexity: 57.664, blue score: 0.461   val [11100] loss: 4.007, Perplexity: 55.003, blue score: 0.470   val [11400] loss: 4.063, Perplexity: 58.153, blue score: 0.468   val [11700] loss: 4.042, Perplexity: 56.917, blue score: 0.474   val [12000] loss: 4.072, Perplexity: 58.686, blue score: 0.475  </code></pre><p>测试模型：</p><p>在执行这步之前，请先去config设定所要载入模型的位置，并将load_model设置为True</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">config<span class="token punctuation">.</span>load_model <span class="token operator">=</span> <span class="token boolean">True</span>test_loss<span class="token punctuation">,</span> bleu_score <span class="token operator">=</span> test_process<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'test loss: </span><span class="token interpolation"><span class="token punctuation">{</span>test_loss<span class="token punctuation">}</span></span><span class="token string">, bleu_score: </span><span class="token interpolation"><span class="token punctuation">{</span>bleu_score<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Seq2Seq(  (encoder): Encoder(    (embedding): Embedding(4397, 256)    (rnn): GRU(256, 512, num_layers=2, batch_first=True, dropout=0.5, bidirectional=True)    (dropout): Dropout(p=0.5, inplace=False)  )  (decoder): Decoder(    (embedding): Embedding(6798, 256)    (rnn): GRU(256, 1024, num_layers=2, batch_first=True, dropout=0.5)    (embedding2vocab): Sequential(      (0): Linear(in_features=1024, out_features=4096, bias=True)      (1): Linear(in_features=4096, out_features=6798, bias=True)    )    (dropout): Dropout(p=0.5, inplace=False)  ))Adam (Parameter Group 0    amsgrad: False    betas: (0.9, 0.999)    eps: 1e-08    lr: 5e-05    weight_decay: 0)Load model from ./log/ckpt/model_12000Finish build modeltest loss: 4.043186987083377, bleu_score: 0.470621067287946</code></pre><h2 id="图形化训练过程"><a href="#图形化训练过程" class="headerlink" title="图形化训练过程"></a>图形化训练过程</h2><h3 id="训练的loss变化趋势"><a href="#训练的loss变化趋势" class="headerlink" title="训练的loss变化趋势"></a>训练的loss变化趋势</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_losses<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'次数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'train loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/11/seq2seq-dai-ma-shi-xian/output_49_1.png" class="">    <h2 id="验证的loss变化趋势"><a href="#验证的loss变化趋势" class="headerlink" title="验证的loss变化趋势"></a>验证的loss变化趋势</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>val_losses<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'次数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'validation loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/11/seq2seq-dai-ma-shi-xian/output_51_0.png" class=""><h2 id="BLEU-score"><a href="#BLEU-score" class="headerlink" title="BLEU score"></a>BLEU score</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>bleu_scores<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'次数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'BLEU score'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'BLEU score'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/11/seq2seq-dai-ma-shi-xian/output_53_0.png" class=""><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://speech.ee.ntu.edu.tw/~hylee/ml/2020-spring.php">李宏毅 机器学习2020</a></p><p>[2] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Seq2Seq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于GAN的多水库径流序列的随机生成</title>
      <link href="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/"/>
      <url>/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="基于GAN的多水库径流序列的随机生成"><a href="#基于GAN的多水库径流序列的随机生成" class="headerlink" title="基于GAN的多水库径流序列的随机生成"></a>基于GAN的多水库径流序列的随机生成</h1><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404135935711-16490728909091.png" class=""><p>该文将DCGAN和WGAN结合起来组成一个新的方法DC-WGAN，并用于径流序列的随机生成。该方法可以同时捕捉径流序列在时间和空间维度上的相关性，解决了传统方法（如Copula等）在径流序列随机生成中时空相关性表现不足的问题。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>隐式随机优化(implicit stochastic optimization, ISO)模型是一种已广泛应用于水库系统中长期优化运行的方法。在实际工程中，水库历史序列的长度只有几十年，难以反映未来径流变化的随机性。因此径流序列的生成是弥补历史径流样本代表性和可靠性差的关键技术，是保证ISO模型准确性的前提。</p><p>对于单个水库，现有径流序列的样本时间长度能满足ISO的操作要求。但对于具有时空相关性的径流序列，当前样本的代表性和可靠性不足以满足。而具有时空相关性的径流序列的产生给水库系统联合优化运行的精细化管理带来了巨大的挑战。然而现有径流序列生成方法并没有体现水库间的时空相关性，它们有以下缺点：</p><ul><li>难以扩展到高维，不适合多时间尺度的多水库系统的径流随机生成</li><li>径流序列的概率分布应事先假定，这在实际中不适用</li><li>难于捕捉高维数据的非线性特点，无法满足水库系统径流生成的要求</li></ul><p>为解决上述问题，作者提出了一种基于GAN的径流序列的随机生成。GAN的特征有：①可以直接学习历史数据的分布，无需预先进行数据概率分布的假定；②无监督学习的模式避免繁琐的人工标注，适用于学习和生成大规模的数据集。作者将GAN的这些特点应用于径流系统的随机生成，创新点有：</p><ul><li>从模型学习能力和泛化能力两个方面探索DC-WGAN在水库系统径流随机生成领域的随机性</li><li>与Copula方法相比，分析DC-WGAN径流样本的时空相关性</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h3><p>生成式对抗网络(Generative adversarial network , GAN)在2014年被Goodfellow提出，已广泛用于计算机视觉和自然语言处理等领域。GAN通过生成器(generator)和判别器(discriminator)的对立实现了很好的生成效果。这两个网络的不同点在于，生成器的输入是一组随机噪音，作用是生成和目标数据分布相似的数据。而判别器的输入有真实数据和生成器生成的数据，输出是一个概率值，表示输入数据是历史数据的置信度。比如输出为1代表输入数据为真实数据，输出为0代表是生成数据。</p><p>假设我们有M个水库，每个水库拥有N年的历史径流数据，每年的径流数据被划分为T个时期。历史径流数据可以表示为</p><p>$${x^{t}_{i,j}},i=1,2,…,M;j=1,2,…,N;t=1,2,…,T$$</p><p>真实数据用$P_{data}(x)$表示，GAN的两个网络结构：生成器$G(z;\theta^{G})$，判别器$D(x;\theta^{D})$，其中$\theta^{G}$和$\theta^{D}$是这两个网络结构的权重参数（需要通过训练得到）,z是一个已知分布的随机噪音。生成器的目标是产生的数据的分布要尽可能和真实数据的分布相似，用于<strong>“欺骗”</strong>判别器。而判别器的目标是区分数据是来源于真实数据还是生成数据。这两个网络在迭代过程中相互竞争以提高模型性能，最终生成的数据与真实数据基本一致。</p><p>在确定网络训练的目标后，我们需要分别为生成器和判别器制定损失函数(loss function)来训练这个模型。生成器的目标是“欺骗”判别器，因此生成器的目标是最大化$D(G(z))$。判别器的目标是区分数据，因此我们最小化$D(G(z))$并最大化$D(x),x\in P_{data}(x)$。因此损失函数$L_{G}和L_{D}$可以表示为：</p><p>$$L_{G}=E_{z\in p_{z}(z)}[log(1-D(G(z)))]$$</p><p>$$L_{D}=-E_{z\in p_{z}(z)}[log(1-D(G(z)))]-E_{x\in p_{data}(x)}[log(D(x))]$$</p><p>结合以上两个式子，则整个模型变成一个minimax游戏，其目标函数变为：</p><p>$$\underset{\theta_{G}}{min}\underset{\theta_{D}}{max}V(G,D)=E_{z\in p_{z}(z)}[log(1-D(G(z)))]+E_{x\in p_{data}(x)}[log(D(x))]$$</p><h3 id="改进的GAN"><a href="#改进的GAN" class="headerlink" title="改进的GAN"></a>改进的GAN</h3><h4 id="原始生成式对抗网络存在的缺点"><a href="#原始生成式对抗网络存在的缺点" class="headerlink" title="原始生成式对抗网络存在的缺点"></a><strong>原始生成式对抗网络存在的缺点</strong></h4><ul><li>很难同时使两个网络同时收敛到最优，这就会影响模型训练的稳定性。举个简单例子，假设判别器的损失函数很短时间就收敛到0，那么生成器的参数就很难更新，这就导致生成器梯度消失的问题。</li><li>通过一定的数学假设，可以用JS散度来表示上面的目标函数，而JS散度存在一个问题，就是真实数据$P_{data}$和生成数据$P_{G}$没有数据重叠的话，不断真实数据和生成数据之间的距离多远，JS散度计算出来的值都是log2，这就导致了生成器梯度消失的问题。</li></ul><p>大部分改进的GAN都是为了解决上述两个问题，其中DCGAN和WGAN是最有效且使用较为广泛的。</p><h4 id="DCGAN"><a href="#DCGAN" class="headerlink" title="DCGAN"></a>DCGAN</h4><p>深度卷积生成式网络(deep convolutional generative adversarial network, DCGAN)在原始GAN模型的基础上，将生成器和判别器的网络结构换成了当时已经十分成熟的卷积神经网络结构，并对卷积神经网络结构进行一定的调整，克服了原始GAN训练不稳定和梯度消失的问题。具体改变有：</p><ul><li>取消所有的pooling层。生成器中使用fractionally strided convolution代替pooling层，判别器中使用strided convolution代替pooling层。</li><li>在生成器和判别器中都使用批量标准化</li><li>去除了全连接层</li><li>生成器中使用ReLU作为激活函数，最后一层使用tanh激活函数</li><li>判别器中使用LeakyReLU作为激活函数</li></ul><p>DCGAN的网络结构如下：</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404182400171-16490728909102.png" class=""><h4 id="WGAN"><a href="#WGAN" class="headerlink" title="WGAN"></a>WGAN</h4><p>Wasserstein生成式对抗网络使用Wasserstein Distance来替换掉JS-Divergence，解决了当生成数据和真实数据没有重叠时，JS散度为log2，从而导致生成器梯度消失的问题。WGAN的优点有：</p><ul><li>判别器训练的越好，生成器就越好，这大大提高了原始GAN的稳定性</li><li>避免了模型在训练过程中崩溃，一定程度上提升了模型的鲁棒性</li></ul><h4 id="DC-WGAN"><a href="#DC-WGAN" class="headerlink" title="DC-WGAN"></a>DC-WGAN</h4><p>结合DCGAN和WGAN，作者提出了DC-WGAN模型，它的结构图如下：</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404183358982-16490728909103.png" class=""><p>DC-WGAN的模型架构和算法流程分别看左图和右图：</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404183813487-16490728909104.png" class=""><h2 id="研究区域"><a href="#研究区域" class="headerlink" title="研究区域"></a>研究区域</h2><p>作者以中国下游金沙江梯级水库和三峡梯级水库为研究案例，包括溪洛渡、向家坝、三峡和葛洲坝四个水库。它们的地理位置如下图所示：</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404184312072-16490728909106.png" class=""><p>DC-WGAN模型的实验数据为这四个水库从1940到2010的径流序列，其中90%的径流序列（64年）被用于模型训练，10%（10年）被用于模型的验证。径流序列的时间尺度为10天，模型经过训练后产生3000个10天径流序列。</p><p>同时，用相同的数据，作者还用copula方法产生对应的径流序列，并将结果与DC_WGAN进行比较。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="学习能力"><a href="#学习能力" class="headerlink" title="学习能力"></a>学习能力</h3><p>为了验证DC-WGAN的学习能力，原始径流序列和DC-WGAN生成的径流序列的频率曲线如下图所示。图中DC-WGAN生成的径流样本是随机从3000个生成样本随机选择了64个（和原始数据数量一样），频率曲线使用对数正态分布函数绘制。从图中可以看出两个频率曲线几乎完全重叠，说明DC-WGAN生成了正确分布的径流序列。</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404190906074-16490728909105.png" class=""><h3 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a>泛化能力</h3><p>为了进一步验证DC-WGAN的泛化能力，作者使用欧几里得距离(Euclidean distance)在DC-WGAN生成的3000条径流数据中找出和7个验证数据最相似的。其中三个径流序列如下图所示。由图可以看出DC-WGAN可以生成与验证集相似形态的样本，说明模型具有很强的泛化能力，图中的自相关系数曲线也验证了DC-WGAN可以捕捉径流序列的时间相关性。</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404191726339-16490728909107.png" class=""><h3 id="时间相关性"><a href="#时间相关性" class="headerlink" title="时间相关性"></a>时间相关性</h3><p>为了验证径流序列的时间相关性，作者分别绘制了原始样本和分别从DC-WGAN和Copula生成样本的相关系数热力图。从下图可以看出Copula生成序列的相关性弱于原始序列和DC-WGAN生成的序列，且基于Copula的生成方法无法捕捉到弱相关性，表明DC-WGAN可以更好地学习序列的时间相关性。</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404192738463-16490728909108.png" class=""><h3 id="空间相关性"><a href="#空间相关性" class="headerlink" title="空间相关性"></a>空间相关性</h3><p>为了验证径流序列的空间相关性，基于原始样本、DC-WGAN和Copula生成样本，计算溪洛渡和三峡水库10天径流的空间相关系数，如下图所示。基于三种样本的平均年径流相关系数分别为0.67、0.65和-0.01。同时可以明显地看出，溪洛渡径流系列与三峡水库径流序列呈现出较强的空间相关性。DC-WGAN可以学习到水库间径流序列的空间相关性，但基于Copula的生成方法无法捕捉到不同水库间径流序列的空间相关性。</p><img src="/2022/04/04/ji-yu-gan-de-duo-shui-ku-jing-liu-xu-lie-de-sui-ji-sheng-cheng/image-20220404194104273-16490728909109.png" class=""><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.sciencedirect.com/science/article/abs/pii/S0022169421013767?via=ihub">Ma Y, Zhong P, Xu B, et al. Stochastic generation of runoff series for multiple reservoirs based on generative adversarial networks[J]. Journal of Hydrology, 2022, 605: 127326.</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
            <tag> 径流序列的随机生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自注意力模型</title>
      <link href="/2022/04/02/zi-zhu-yi-li-mo-xing/"/>
      <url>/2022/04/02/zi-zhu-yi-li-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前面我们学习过LSTM、GRU，它们都可以挖掘序列之间的某种联系。举个简单的例子——I saw a saw（我看见了一把锯子），句中两个saw无论在词义还是词性中都有所不同。如果将这句话简单做词向量处理，然后丢进一个全连接模型的话，那么两个saw输出的结果是一样的。因为对于这种模型而言的话，它是挖掘不出词与词之间的关系。而对于LSTM，GRU来说，它通过一定的机制可以学习到句子和句子之间的联系。</p><p>那么注意力机制是怎么学习这种联系的呢？这还得从我们人类的视觉说起。当我们在看到图片或风景的时候，我们会将注意力集中到我们关注的那些事物上。比如你在绘画的过程中，你会持续地关注你构思到画板上的元素（比如蓝天，白云），而不会太多关注那些其他的元素，比如风，虫鸣，阳光等等。这种有意识的聚焦就被称为注意力机制。那么机器是怎么将这种机制应用到模型中呢？这也是这篇文章要学习的内容。</p><h2 id="注意力模型"><a href="#注意力模型" class="headerlink" title="注意力模型"></a>注意力模型</h2><p>仍然以I saw a saw为例，如下图所示，我们设置一个window，该window只考虑了周围三个输入，此时模型当前的输出就和周围三个输入有关。那么我们将window覆盖整个文本，是不是可以考虑整个句子中单词与单词之间的联系？</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402122749713-16488871089911.png" class=""><p>自注意力机制借鉴了这个想法，用一个结构实现上述Window中的操作，从而可以考虑句中每个单词之间的联系，进而区别出这两个saw。</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402124424005-16488871089922.png" class=""><p>Attention机制通常有Bahdanau Attention（右图）与Luong Attention（左图），两种注意力的理论相似，Luong Attention的使用范围更广泛，因此本文主要讲解Luong Attention。在讲解Luong Attention前，我们先来讲解三个概念——查询、键和值。</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402125443414-16488871089923.png" class=""><h3 id="查询、键和值"><a href="#查询、键和值" class="headerlink" title="查询、键和值"></a>查询、键和值</h3><p>在注意力机制的背景下，我们将自主性提示称为查询（query）。给定任何查询，注意力机制通过注意力汇聚将选择引导至感官输入。在注意力机制中，这些感官输入被称为值（value）。对于每个值都有一个键（key）与之配对，这可以想象成感官输入的非自主提示。通过注意力汇聚，每个查询（自主性提示）都可以与键（非自主性提示）进行匹配，这将引导得出最匹配的值（感官输入）。下面我们来看看查询、键和值是怎样在self-attention中运作的。</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402132249578-16488871089924.png" class=""><p>  假设输入是：${a^{1},a^{2},a^{3},a^{4}}$。每个输入都对应查询、键和值。查询$q^{i}=W^{q}a^{i}$，键$k^{i}=W^{k}a^{i}$以及值$v^{i}=W^{v}a^{i}$。对于查询query，我们需要找所对应的键与之进行匹配，这样就可以得出那些信息比较重要。对应计算$a_{1,i}=q^{1}k^{i}$，再经过softmax层就可以算出每个信息对应的比重:</p><p>$$a_{1,i}^{‘}=exp(a_{1,i}/ \sum_{j}{a_{1,j}})$$</p><p>进而可以求出$a^{1}$对应的输出$b^{1}=\sum_{i}a^{‘}_{1,i}v^{i}$，同理我们可以计算出$b^{2},b^{3},b^{4}$。如果计算机也这样一个接一个计算，那计算效率太低。其实我们可以通过矩阵运算实现平行运算，具体操作如下：</p><p>查询：$$q^{i}=W^{q}a^{i}\Rightarrow (q^{1},q^{2},q^{3},q^{4})=W^{q}(a^{1},a^{2},a^{3},a^{4})$$</p><p>键：$$k^{i}=W^{k}a^{i}\Rightarrow (k^{1},k^{2},k^{3},k^{4})=W^{k}(a^{1},a^{2},a^{3},a^{4})$$</p><p>值：$$v^{i}=W^{v}a^{i}\Rightarrow (v^{1},v^{2},v^{3},v^{4})=W^{v}(a^{1},a^{2},a^{3},a^{4})$$</p><p>对于中间部分的计算可以用下图表示：</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402144505171-16488871089925.png" class=""><p>从而可以得到输出：</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402144618597-16488871089926.png" class=""><p>整理一下可得：</p><p>查询、键和值：$$Q,K,v=W^{q}I,W^{k}I,W^{v}I$$</p><p>注意力矩阵：$$A^{‘}\Leftarrow A=K^{T}Q$$</p><p>输出：$$O=VA^{‘}$$</p><p>由此可以看出 self-attention 需要率定的参数有$W^{q},W^{k},W^{v}$</p><h3 id="多头自注意力模型"><a href="#多头自注意力模型" class="headerlink" title="多头自注意力模型"></a>多头自注意力模型</h3><p>多头注意力（Multi-head Self-attention）模型是建立在自注意力模型的基础上。它模拟的是序列中存在不止一种的联系，这时单靠一个head是无法捕捉序列中的完整信息。以2 head为例，利用两组$W^{q},W^{k},W^{v}$对应输入$a^{i}$分别单独计算出两个输出$b^{i,1},b^{i,2}$，然后通过一个输出矩阵可以得出$b^{i}$：</p><p>$$b^{i}=W^{o}(b^{i,1},b^{i,2})^{T}$$</p><p>由此可以看出2 head带来了两倍以上的参数，虽然模型的准确度得到了提升，但是以损失计算能力为代价。</p><h2 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码"></a>位置编码</h2><p>self-attention虽然考虑了输入序列中每个成分之间的联系，但并没考虑输入序列的先后顺序。这是因为self-attention中的计算是平行计算，无论序列中两个成分相隔多远，对self-attention的整个计算没有什么影响。而对于某些实际应用，序列的顺序对模型影响很大或者可以一定程度上提升模型性能。举个例子，在词性标注中，我们知道动词是很少出现在一个句子的开头。所以当一个单词出现在句子的开头时，我们有很大的把握判断这个单词不是动词。</p><p>为了改进self-attention这个弱点，我们可以对输入进行一定的操作——位置编码，从而使得self-attention考虑到序列的顺序。这个操作其实很简单，我们只需在每个输入对应的位置加一个独一无二的位置向量即可实现：</p><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402153801462-16488871089927.png" class=""><p>这时你就会有一个疑问，位置编码是怎么确定的？具体可以看这篇论文：<a href="https://arxiv.org/abs/2003.09229">Learning to Encode Position for Transformer with Continuous Dynamical Model</a></p><h2 id="Self-attention-vs-RNN"><a href="#Self-attention-vs-RNN" class="headerlink" title="Self-attention vs RNN"></a>Self-attention vs RNN</h2><img src="/2022/04/02/zi-zhu-yi-li-mo-xing/image-20220402155319292-16488871089928.png" class=""><p>上图展示的是循环神经网络和自注意力模型的简易结构，由此可以看出self-attention相对RNN的结构优点：</p><ul><li>self-attention是平行计算，单次迭代计算速度块</li><li>self-attention可以方便地考虑两个相隔较远的单词之间的联系，而RNN虽然也能考虑到，但RNN在传递的过程中，这种联系会消失。因此self-attention在处理序列中含有较大关联的模型中更有优势。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.php">李宏毅 机器学习2021</a></p><p>[2] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seq2Seq</title>
      <link href="/2022/03/29/seq2seq/"/>
      <url>/2022/03/29/seq2seq/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面：</strong>这个部分主要记录一些关于深度学习相关论文的阅读，由于个人还是刚接触深度学习不久，所以前面需要补充一些很早的论文以巩固自己知识的不足。今天记录最近学的一篇论文<a href="https://arxiv.org/abs/1409.3215">Sequence to Sequence Learning with Neural Networks</a>。这篇论文研究的是机器翻译领域，作者使用的方法是利用一个多层的 LSTM 将输入文本编码成一个向量，这个向量可以视为整个输入句子的抽象表示。然后用另一个 LSTM 将前面编码的向量解码成目标句子。作者将其应用在 WMT’14 数据集上英语到法语的翻译任务，并在整个测试集上得到的 BLEU score 为34.8。下面我门结合<a href="https://d2l.ai/">Dive into Deep Learning</a>这本书的相关章节和这篇论文了解 seq2seq 的一般概念，并陈述构建模型时需要用的一些方法。</p><h2 id="seq2seq"><a href="#seq2seq" class="headerlink" title="seq2seq"></a>seq2seq</h2><p>最常用的 seq2seq 模型其实就是encoder-decoder模型。encoder-decoder模型通常使用 RNN 将一段文本作为输入编码（encoder）成一个向量，这个向量可以视为整个输入句子的抽象表示。然后，该向量通过第二个 RNN 解码（decoder），该 RNN 通过一次生成一个单词来学习目标句子（也就是另一种语言的句子）。下图演示了将 seq2seq 模型用于英文到中文的翻译。</p><img src="/2022/03/29/seq2seq/seq2seq.png" class=""><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>图中展示了一个简单的翻译模型，模型中用&lt;bos&gt;和&lt;eos&gt;分别表示开始词元和结束词元。它的输入句子是”good morning“，它首先通过embedding层转换为对应的词向量，然后再进入编码器（encoder）。在每一个时间步，进入编码器RNN含有embedding$x_{t}$和上一时间步隐状态$h_{t-1}$，然后编码器RNN产生新的隐状态$h_{t}$。我们可以抽象地把这个隐状态代表为前面的词元。该时间步的计算可以用以下公式表达：<br>$$h_{t}=EncoderRNN(e(x_{t},h_{t-1}))$$</p><p>在这里，我们通常使用LSTM或GRU这样的term RNN。假设，输入$X={x_{1},x_{2},…,x_{T}}$，式中 $x_{1}$=&lt;bos&gt;，$x_{2}$=good，etc 。编码器初始的隐状态 $h_{0}$ 通常初始化为0或者已经学习好的参数。一旦最后的词元 $x_{T}$ 通过embedding层进入编码器RNN，我们利用最后的隐状态 $h_{T}$ 来作为文本向量，并把它赋值给z :$h_{T}=z$</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>现在我们拥有文本向量z，我们可以开始将其解码成目标句子——”早上好“。同样我们用<sos>和<eos>分别表示目标句子的开始词元和结束词元。在每一个时间步，解码器RNN的输入是当前词元$y_{t}$的embedding $d$和上一时间步的隐状态$s_{t-1}$。在解码器RNN，初始隐状态$s_{0}=z=h_{T}$，即解码器初始隐状态就是编码器的最终隐状态。我们同样用一个公式表示该时间步解码器的操作：<br>$$s_{t}=DecoderRNN(d(y_{t},s_{t-1}))$$<br>在解码器中，我们需要将隐状态转换为对应的单词，因此在每一个时间步，我们通过一个线性层通过$s_{t}$去预测下一个在文本出现的单词$\overset{-}{y_{t}}$<br>$$\overset{-}{y_{t}}=f(s_{t})$$<br>解码器中的单词是随着时间步一个接一个地生成。我们通常使用&lt;bos&gt;作为解码器的第一个输入$y_{1}$，但是对于接下来的输入$y_{t&gt;1}$，我们有时使用在目标句子中下一个单词，有时也会使用经解码器预测的下一个单词$\overset{-}{y_{t}}$，这在机器翻译中被叫做teacher forcing。使用teacher-forcing，在训练过程中，可以加快模型的训练，使得模型会有较好的效果。但是在测试的时候因为不能得到目标句子的支持，存在训练测试偏差，模型会变得脆弱。<br>训练模型时，我们通常知道目标句子有多少单词，一旦解码器输入目标单词，模型就会停止生成单词。但在测试模型时，解码器会不断生成单词，直到模型输出&lt;eos&gt;或生成一定数量的单词之后，模型就停止生成单词。</eos></sos></p><p>一旦模型得到了预测目标句子$\overset{-}{Y}={\overset{-}{y_{1}},\overset{-}{y_{2}},…,\overset{-}{y_{t}}}$，我们将其和目标句子$Y={y_{1},y_{2},…,y_{t}}$进行比较，计算出误差，利用该误差就可以更新模型的所有参数。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><ul><li>将文本词元化，在机器翻译中我们更喜欢单词级词元化。对训练数据的文本序列进行词元，其中每个词元要么是一个词，要么是一个标点符号。</li><li>分别为源语言和目标语言构建两个字典——int2word 和 word2int （这两个字典将单词和整数一一对应）。同时为了减少数据噪声的影响，我们将出现次数少于2次的低频率词元视为未知 &lt;unk&gt; 词元。除此之外，我们还指定一些额外的特定词元，例如在小批量时用于将序列填充到相同长度的填充词元 &lt;pad&gt; ，以及序列的开始词元 &lt;bos&gt; 和结束词元 &lt;eos&gt; 。</li><li>为了提高计算效率，我们可以通过截断和填充方式实现每个序列都具有相同的长度。当文本序列词元数目少于规定数据时，我们将继续在其末尾添加特定的 &lt;pad&gt; 词元。反之，我们将截断文本序列，只取前指定数目个词元，丢弃剩余词元。</li></ul><h3 id="搭建模型"><a href="#搭建模型" class="headerlink" title="搭建模型"></a>搭建模型</h3><p>这一部分可以参考论文</p><img src="/2022/03/29/seq2seq/1.png" class=""><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/1409.3215">Sequence to Sequence Learning with Neural Networks</a></p><p>[2] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>门控循环单元</title>
      <link href="/2022/03/25/men-kong-xun-huan-dan-yuan/"/>
      <url>/2022/03/25/men-kong-xun-huan-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>门控循环单元（gated recurrent units, GRU）于2014被Cho等人提出。GRU和LSTM一样有专门的机制来确定应该何时更新隐状态，以及应该何时重置隐状态，但GRU没有单独的存储单元，即LSTM的记忆元。GRU是LSTM的一个变体，它结构更加简单，却能够提供和LSTM同等的效果，并且计算的速度明显更快。</p><p>现在我们从GRU的内部结构开始解读：</p><h2 id="重置门和更新门"><a href="#重置门和更新门" class="headerlink" title="重置门和更新门"></a>重置门和更新门</h2><p>我们首先介绍重置门（reset gate）和更新门（update gate）。重置门控制着我们还想记住过去状态的数量；更新门决定着新状态保存旧状态信息的程度。这两个门的输入和LSTM一样，是当前时间步的输入和上一时间步的隐状态，它们的输出是由使用sigmoid激活函数的两个全连接层给出。因此它们的数学表达为：</p><p>$$R_{t}=\sigma({X_{t}W_{xr}+H_{t-1}W_{hr}+b_{r}})$$</p><p>$$Z_{t}=\sigma({X_{t}W_{xz}+H_{t-1}W_{hz}+b_{z}})$$</p><p>式中：$X_{t}\in R^{nxd}$是输入（样本个数：n，维度：d）；$H_{t-1}\in R^{nxh}$是上一时间步的隐状态；$R_{t}\in R^{nxd}$和$Z_{t}\in R^{nxd}$分别是重置门和更新门；$W_{xr},W_{xz}\in R^{dxh}$和$W_{hr},W_{hz}\in R^{hxh}$是权重参数，$b_{r},b_{z}\in R^{1xh}$是偏置项。</p><h2 id="候选隐状态"><a href="#候选隐状态" class="headerlink" title="候选隐状态"></a>候选隐状态</h2><p>候选隐状态（candidate hidden state）$\overset{-}{H_{t}}\in R^{nxh}$的计算公式如下：</p><p>$$\overset{-}{H_{t}}=tanh(X_{t}W_{xh}+(R_{t}\bigodot H_{t-1})W_{hh}+b_{h})$$</p><p>式中$W_{xh}\in R^{dxh}$和$W_{hh}\in R^{hxh}$是权重参数，$b_{h}\in R^{1xh}$是偏置项，符号$\bigodot$是Hadamard积（按元素乘积）运算符。</p><p>重置门$R_{t}$可以控制以往状态的影响程度， 当$R_{t}$中所有项接近1时，保留前一隐状态所有影响。当$R_{t}$中所有项接近0时，候选隐状态是以$X_{t}$作为输入的多层感知机的结果。</p><p>以上计算流程可以用下图表示：</p><img src="/2022/03/25/men-kong-xun-huan-dan-yuan/1.png" class=""><h2 id="隐状态"><a href="#隐状态" class="headerlink" title="隐状态"></a>隐状态</h2><p>隐状态$H_{t}\in R^{nxh}$通过更新门$Z_{t}$来确定它多大程度上来自与旧的状态$H_{t-1}$和当前候选状态$\overset{-}{H_{t}}$，它的具体公式为：</p><p>$$H_{t}=Z_{t}\bigodot H_{t-1}+(1-Z_{t})\bigodot \overset{-}{H_{t}}$$</p><p>每当更新门$Z_{t}$中所有项接近1时，模型就倾向于只保存旧状态。此时，来自$X_{t}$的信息基本上被忽略。相反，当$Z_{t}$中所有项接近0时，新的隐状态$H_{t}$就会接近候选隐状态$\overset{-}{H_{t}}$这些设计可以帮助我们处理循环神经⽹络中的梯度消失问题，并更好地捕获时间步距离很⻓的序列的依赖关系。 </p><p>此时GRU一个神经元一个完整的内部结构就可以用下图表示：</p><img src="/2022/03/25/men-kong-xun-huan-dan-yuan/2.png" class=""><p>用LSTM，我们最后将最新的隐状态作为输入进入另一个网络，则可实现分类或回归等模型。</p><h2 id="GRU网络代码"><a href="#GRU网络代码" class="headerlink" title="GRU网络代码"></a>GRU网络代码</h2><p>同LSTM我们可以调用pytorch里面的API实现一个简单的GRU网络</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">GRU_Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> embedding<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_dim<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> fix_embedding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        embedding: 词典        embedding_dim: 词向量的维度        hidden_dim: GRU神经元个数        num_layers: GRU的层数        output_dim: 隐藏层输出的维度(分类的数量)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>GRU_Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 制作 embedding layer</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>weight <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span>        <span class="token comment"># 如果 fix_embedding 为 False，在训练过程中，embedding 也会跟着被训练</span>        self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">if</span> fix_embedding <span class="token keyword">else</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token operator">=</span>num_layers<span class="token punctuation">,</span> bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 句子最后时刻的hidden state</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用LSTM同样的例子，经过这个网络得出在验证集中准确率最高为0.9024，和LSTM模型的准确度差不多，但运行时间个人明显感觉短了很多。</p><h2 id="与LSTM间的异同"><a href="#与LSTM间的异同" class="headerlink" title="与LSTM间的异同"></a>与LSTM间的异同</h2><p>两者相似之处：引用了门结构，并在t-１时刻到ｔ时刻信息的传递引用了新的成分（候选隐状态，在LSTM中是记忆元），不再像传统RNN只利用了当前时刻的输入和上一时刻的隐状态。这个相同之处带来了两个好处：</p><p>①能够保存长期序列中的信息，且不会随时间而清除或因为与预测不相关而移除。</p><p>②有效创建了绕过多个时间步骤的快捷路径。这些捷径允许误差更容易反向传播，不至于像传统RNN那样迅速消散，从而解决了梯度消失的问题。</p><p>两者不同之处：</p><p>①对记忆内容传递程度的控制。LSTM用output gate控制传递程度，传递给下一个unit；而GRU是完全传递给下一个unit，不做任何控制。</p><p>②对候选内容的控制；LSTM计算候选记忆元不对上一信息做任何控制；而GRU计算候选隐状态时利用reset gate对上一时刻的信息进行控制。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/1412.3555">Chung J, Gulcehre C, Cho K H, et al. Empirical evaluation of gated recurrent neural networks on sequence modeling[J]. arXiv preprint arXiv:1412.3555, 2014.</a></p><p>[2] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长短期记忆网络</title>
      <link href="/2022/03/22/chang-duan-qi-ji-yi-wang-luo/"/>
      <url>/2022/03/22/chang-duan-qi-ji-yi-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p><strong>长短期记忆神经网路</strong>（long short-term memory，LSTM）是一种RNN特殊类型，现在我们见到的RNN模型除了特别强调，一般都是LSTM。LSTM的设计灵感来源于计算机的逻辑门，它引入了记忆元（memory cell），记忆元的作用是用于记录附加的信息。为了控制记忆元，我们需要许多门。其中一个门用来从单元中输出条目，我们将其称为输出门（output gate）。另一个门用来决定何时将数据读入单元，我们将其称为输入门（input gate）。我们还需要一个门来决定什么时候记忆或忽略隐状态中的输入，我们将其称为遗忘门（forget gate）。除此之外还有一个候选记忆元（candidate memory cell），它用来控制输入门的状态。现在让我们看看这在实践中是怎么运作的。<br>LSTM当前时间步的输⼊和前⼀个时间步的隐状态作为数据送⼊⻓短期记忆⽹络的⻔中，它们由三个具有sigmiod激活函数的全连接层处理，以计算输入门、输出门和遗忘门的值。候选记忆元的结构与前面三个门相似，只是使用tanh函数来作为激活函数。</p><img src="/2022/03/22/chang-duan-qi-ji-yi-wang-luo/1.png" class=""><p>现在我们来细化一下长短期记忆网络的数学表达。假设输入为$X_{t}\in R^{nxd}$，隐藏单元的个数是h，则前一时间步的隐状态为$H_{t-1}\in R^{nxh}$。相应地，输入门是$I_{t}\in R^{nxh}$，遗忘门是$F_{t}\in R^{nxh}$，输出们是$O_{t}\in R^{nxh}$，候选记忆元是$\overset{-}{C_{t}}\in R^{nxh}$。它们的计算方法如下：<br>$$I_{t}=\sigma(X_{t}W_{xi}+H_{t-1}W_{hi}+b_{i}),$$<br>$$F_{t}=\sigma(X_{t}W_{xf}+H_{t-1}W_{hf}+b_{f}),$$<br>$$O_{t}=\sigma(X_{t}W_{xo}+H_{t-1}W_{ho}+b_{o}),$$<br>$$\overset{-}{C_{t}}=tanh(X_{t}W_{xc}+H_{t-1}W_{hc}+b_{c}),$$<br>式中$W_{xi},W_{xf},W_{xo},W_{xc}\in R^{dxh}$和$W_{hi},W_{hf},W_{ho},W_{hc}\in R^{hxh}$是权重参数，$b_{i},b_{f},b_{o},b_{c}\in R^{1xh}$是偏置参数。<br>在LSTM中，有两个来控制输入或遗忘：输入门$I_{t}$控制采用多少来自$\overset{-}{C_{t}}$的新数据，而遗忘门$F_{t}$控制保留多少过去的记忆元$C_{t-1}\in R^{nxh}$的内容。它们之间使用Hadamard积，有：<br>$$C_{t}=F_{t}\bigodot C_{t-1}+I_{t}\bigodot \overset{-}{C_{t}}$$<br>如果遗忘⻔始终为1且输⼊⻔始终为0，则过去的记忆元$C_{t}$将随时间被保存并传递到当前时间步。引⼊这种设计是为了缓解梯度消失问题，并更好地捕获序列中的⻓距离依赖关系。<br>现在，我们还需要定义如何计算隐状态$H_{t}\in R_{nxh}$，这就是输出门发挥作用的地方。在LSTM中，它将记忆元经过tanh激活函数，并于输出之间做Hadamard积：<br>$$H_{t}=O_{t}\bigodot tanh(C_{t})$$<br>这样我们就得到LSTM一个神经元完整的内部结构：</p><img src="/2022/03/22/chang-duan-qi-ji-yi-wang-luo/2.png" class=""><p>最后只需将最新的隐状态作为输入经过另一个网络，则可实现分类或回归等模型。</p><p>这只是LSTM单个神经元的内部结构，而事实上LSTM可以将多层网络结构堆叠在一起，每层网络结构含有多个神经元结构。通过对几个层进行组合，我们就可以产生一个灵活的网络结构。</p><h2 id="LSTM应用"><a href="#LSTM应用" class="headerlink" title="LSTM应用"></a>LSTM应用</h2><p>现在我们以一个新闻标题分类的例子来实现LSTM，本次实验应用的是清华NLP组提供的THUCNews文本分类数据集，它包含十个新闻主题，分别是财经、房产、股票、教育、科技、社会、时政、体育、游戏。训练集中总共有180000条数据，每个类别有200000条数据。验证集中总共有10000条数据，每个类别有1000条数据。</p><h3 id="分词及去除停用词"><a href="#分词及去除停用词" class="headerlink" title="分词及去除停用词"></a>分词及去除停用词</h3><p>由于训练数据是中文，因此需要对文本进行分词处理，分词采用的是python中的jieba工具。同时为了减少停用词对文本有效信息造成噪音干扰，减少模型复杂程度，我们对文本进行去除停用词处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token comment"># 数据所在路径</span>data_dir <span class="token operator">=</span> <span class="token string">'E:\软件包\Chrome\机器学习数据\THUCNews'</span><span class="token comment"># 停用词表对应路径</span>stopwords_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">'中文停用词库.txt'</span><span class="token punctuation">)</span><span class="token comment"># 将停用词转换为python列表</span>stopwords_list <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>stopwords_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 定义一个函数，用于对文本分词和去除停用词处理</span><span class="token keyword">def</span> <span class="token function">text_preprocessing</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 去除文本额外信息</span>    text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'(图)'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 只保留数字、字母、中文</span>    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[^a-zA-Z0-9\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b\u4e00-\u9fa5]'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>    <span class="token comment"># 分词</span>    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    text_list <span class="token operator">=</span> <span class="token punctuation">[</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stopwords_list <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> text_list<span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 把 training 时需要的资料读进来</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token punctuation">[</span>text_preprocessing<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="word-embedding"><a href="#word-embedding" class="headerlink" title="word embedding"></a>word embedding</h3><p>这里采用的时gensim中word2vec的skip-gram，相关使用请看<a href="https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Text8Corpus">官网</a>，关于Gensim 4.0的相关更新请看<a href="https://github.com/RaRe-Technologies/gensim/wiki/Migrating-from-Gensim-3.x-to-4">这里</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models <span class="token keyword">import</span> word2vec<span class="token keyword">def</span> <span class="token function">train_word2vec</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 训练 word to vector 的 word embedding</span>    model <span class="token operator">=</span> word2vec<span class="token punctuation">.</span>Word2Vec<span class="token punctuation">(</span>x<span class="token punctuation">,</span> vector_size<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> min_count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> sg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading training data ..."</span><span class="token punctuation">)</span>    train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> load_data<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">'train.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading testing data ..."</span><span class="token punctuation">)</span>    test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> load_data<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># model</span>    model <span class="token operator">=</span> train_word2vec<span class="token punctuation">(</span>train_x <span class="token operator">+</span> test_x<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"saving model ..."</span><span class="token punctuation">)</span>    save_path <span class="token operator">=</span> <span class="token string">'./logs/w2v.model'</span>    model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>loading training data ...loading testing data ...saving model ...</code></pre><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">Preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentences<span class="token punctuation">,</span> sen_len<span class="token punctuation">,</span> w2v_path<span class="token operator">=</span><span class="token string">'w2v.model'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>w2v_path <span class="token operator">=</span> w2v_path        self<span class="token punctuation">.</span>sentences <span class="token operator">=</span> sentences        self<span class="token punctuation">.</span>sen_len <span class="token operator">=</span> sen_len        self<span class="token punctuation">.</span>idx2word <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>word2idx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>embedding_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">get_w2v_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 把之前训练好的 word to vector 模型读进来</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> word2vec<span class="token punctuation">.</span>Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w2v_path<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>vector_size            <span class="token keyword">def</span> <span class="token function">add_embedding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 把 word 加进 embedding，并赋予它一个随机生成的具有代表性的 vector</span>        <span class="token comment"># word 只会是 "&lt;PAD&gt;" 或 "&lt;UNK&gt;"</span>        vector <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>embedding_dim<span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>uniform_<span class="token punctuation">(</span>vector<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>word2idx<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2idx<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx2word<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding_matrix <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>embedding_matrix<span class="token punctuation">,</span> vector<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">make_embedding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> load<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Get embedding ..."</span><span class="token punctuation">)</span>        <span class="token comment"># 取出训练好的 Word2vec word embedding</span>        <span class="token keyword">if</span> load<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading word to vec model ..."</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>get_w2v_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotImplementedError                <span class="token comment"># 制作一个 word2idx 的 dictionary</span>        <span class="token comment"># 制作一个 idx2word 的 list</span>        <span class="token comment"># 制作一个 word2vector 的 list</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>wv<span class="token punctuation">.</span>key_to_index<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>word2idx<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2idx<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>idx2word<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>embedding_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>wv<span class="token punctuation">.</span>get_vector<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding_matrix <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding_matrix<span class="token punctuation">)</span>        <span class="token comment"># 将 "&lt;PAD&gt;" 跟 "&lt;UNK&gt;" 加进 embedding 里面</span>        self<span class="token punctuation">.</span>add_embedding<span class="token punctuation">(</span><span class="token string">"&lt;PAD&gt;"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add_embedding<span class="token punctuation">(</span><span class="token string">"&lt;UNK&gt;"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"total words: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>embedding_matrix        <span class="token keyword">def</span> <span class="token function">pad_sequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将每个句子变成一样的长度</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>sen_len<span class="token punctuation">:</span>            sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>sen_len<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            pad_len <span class="token operator">=</span> self<span class="token punctuation">.</span>sen_len <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>pad_len<span class="token punctuation">)</span><span class="token punctuation">:</span>                sentence<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2idx<span class="token punctuation">[</span><span class="token string">"&lt;PAD&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sen_len        <span class="token keyword">return</span> sentence        <span class="token keyword">def</span> <span class="token function">sentence_word2idx</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 把句子里面的字转成对应的 index</span>        sentence_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> sen <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sentences<span class="token punctuation">)</span><span class="token punctuation">:</span>            sentence_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> word <span class="token keyword">in</span> sen<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token keyword">in</span> self<span class="token punctuation">.</span>idx2word<span class="token punctuation">)</span><span class="token punctuation">:</span>                    sentence_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2idx<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    sentence_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>word2idx<span class="token punctuation">[</span><span class="token string">"&lt;UNK&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># 将每个句子变成一样的长度</span>            sentence_idx <span class="token operator">=</span> self<span class="token punctuation">.</span>pad_sequence<span class="token punctuation">(</span>sentence_idx<span class="token punctuation">)</span>            sentence_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sentence_idx<span class="token punctuation">)</span>        <span class="token keyword">return</span> sentence_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">LSTM_Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> embedding<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> num_classes<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> fix_embedding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        embedding: 词典        embedding_dim: 词向量的维度        hidden_dim: GRU神经元个数        num_layers: GRU的层数        output_dim: 隐藏层输出的维度(分类的数量)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>LSTM_Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 制作 embedding layer</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>weight <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span>        <span class="token comment"># 如果 fix_embedding 为 False，在训练过程中，embedding 也会跟着被训练</span>        self<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">if</span> fix_embedding <span class="token keyword">else</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> embedding<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>embedding_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token operator">=</span>num_layers<span class="token punctuation">,</span> bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 句子最后时刻的hidden state</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>制作dataset以便dataloader能够使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">class</span> <span class="token class-name">NewsTitleDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><p>在定义dataloder前我们先定义一些模型超参数，该参数可以自行调节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sen_len <span class="token operator">=</span> <span class="token number">12</span>batch_size <span class="token operator">=</span> <span class="token number">128</span>n_epoch <span class="token operator">=</span> <span class="token number">10</span>lr <span class="token operator">=</span> <span class="token number">0.001</span>train_preprocess <span class="token operator">=</span> Preprocess<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span> sen_len<span class="token punctuation">,</span> w2v_path<span class="token operator">=</span>save_path<span class="token punctuation">)</span>embedding <span class="token operator">=</span> train_preprocess<span class="token punctuation">.</span>make_embedding<span class="token punctuation">(</span>load<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_x <span class="token operator">=</span> train_preprocess<span class="token punctuation">.</span>sentence_word2idx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将 data 划分为 training data 和 validation data</span>X_train<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_val <span class="token operator">=</span> train_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">180000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_x<span class="token punctuation">[</span><span class="token number">180000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">180000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_y<span class="token punctuation">[</span><span class="token number">180000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 将 data 做成 dataset 供 dataloader 使用</span>train_dataset <span class="token operator">=</span> NewsTitleDataset<span class="token punctuation">(</span>X<span class="token operator">=</span>X_train<span class="token punctuation">,</span> y<span class="token operator">=</span>y_train<span class="token punctuation">)</span>val_dataset <span class="token operator">=</span> NewsTitleDataset<span class="token punctuation">(</span>X<span class="token operator">=</span>X_val<span class="token punctuation">,</span> y<span class="token operator">=</span>y_val<span class="token punctuation">)</span><span class="token comment"># 将 data 转成 batch of tensor</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Get embedding ...loading word to vec model ...total words: 30360</code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 加载模型</span>model <span class="token operator">=</span> LSTM_Net<span class="token punctuation">(</span>embedding<span class="token punctuation">,</span> embedding_dim<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> hidden_dim<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> fix_embedding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># criterion</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># optimizer</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span class="token comment"># Training</span>best_acc <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    epoch_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_acc<span class="token punctuation">,</span> train_loss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    val_acc<span class="token punctuation">,</span> val_loss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 训练模式</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 前向传播</span>        train_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 后向传播</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>train_pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                train_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>train_pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>           model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 评估模型</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            val_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>val_pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        val_acc <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>val_pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            val_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 展示结果</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Epoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>n_epoch<span class="token punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>epoch_start_time<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> sec(s) Train Acc: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token punctuation">(</span>train_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> Loss: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token punctuation">(</span>train_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.6f</span><span class="token punctuation">}</span></span><span class="token string"> | Val Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>val_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>val_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.6f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> best_acc<span class="token punctuation">:</span>        best_acc <span class="token operator">=</span> val_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_val<span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">'./logs/lstm_cl.model'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'saving model with acc </span><span class="token interpolation"><span class="token punctuation">{</span>best_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Epoch [1/10] 12.5952 sec(s) Train Acc: 0.8458 Loss: 0.003683 | Val Acc: 0.8786 Loss: 0.003035saving model with acc 0.8786Epoch [2/10] 12.6020 sec(s) Train Acc: 0.8907 Loss: 0.002629 | Val Acc: 0.8906 Loss: 0.002654saving model with acc 0.8906Epoch [3/10] 12.5632 sec(s) Train Acc: 0.8991 Loss: 0.002396 | Val Acc: 0.8902 Loss: 0.002658Epoch [4/10] 12.5930 sec(s) Train Acc: 0.9050 Loss: 0.002251 | Val Acc: 0.8951 Loss: 0.002480saving model with acc 0.8951Epoch [5/10] 12.5931 sec(s) Train Acc: 0.9102 Loss: 0.002110 | Val Acc: 0.8978 Loss: 0.002456saving model with acc 0.8978Epoch [6/10] 12.7861 sec(s) Train Acc: 0.9154 Loss: 0.001967 | Val Acc: 0.8989 Loss: 0.002452saving model with acc 0.8989Epoch [7/10] 12.8262 sec(s) Train Acc: 0.9212 Loss: 0.001838 | Val Acc: 0.9004 Loss: 0.002465saving model with acc 0.9004Epoch [8/10] 12.7670 sec(s) Train Acc: 0.9252 Loss: 0.001716 | Val Acc: 0.9012 Loss: 0.002431saving model with acc 0.9012Epoch [9/10] 14.5936 sec(s) Train Acc: 0.9303 Loss: 0.001590 | Val Acc: 0.9006 Loss: 0.002502Epoch [10/10] 19.8384 sec(s) Train Acc: 0.9358 Loss: 0.001462 | Val Acc: 0.9018 Loss: 0.002567saving model with acc 0.9018</code></pre><p>经过10次迭代后，模型在验证集中的准确度达到0.9018，说明模型还不错，大家可以尝试改动模型参数，看看预测准确度会不会进一步提高。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LSTM </tag>
            
            <tag> 文本分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列模型</title>
      <link href="/2022/03/20/xu-lie-mo-xing/"/>
      <url>/2022/03/20/xu-lie-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>假设某个序列我们可以使用$x_{t-1},…,x_{t-\tau}$而不是$x_{t-1},…,x_{1}$来估计$x_{t}$，我们就说该序列满足马尔可夫条件。用数学公式表示为：<br>$$P(x_{1},…,x_{T})=\underset{t=1}{\overset{T}{\Pi}}P(x_{t}|x_{t-1},…,x_{t-\tau})$$<br>而$\tau=1$，我们就得到一个一阶马尔可夫模型，则上式变为：<br>$$P(x_{1},…,x_{T})=\underset{t=1}{\overset{T}{\Pi}}P(x_{t}|x_{t-1})$$<br>利用这一事实，我们只需要考虑过去观察中的一个非常短的历史：$P(x_{t}|x_{t-1},…,x_{1})=P(x_{t}|x_{t-1})$就能近似得出当前状态。</p><p>现在我们做一个简单的实验，来探讨一下满足马尔可夫条件的模型预测的准确性，以及它的最大预测能力。</p><h2 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h2><p>首先，我们生成一些数据：使用正弦函数和一些可加性噪声来生成序列模型，时间步长为1000。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchT <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token comment"># 总共产生1000个点</span>time_epoch <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> T <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">0.01</span> <span class="token operator">*</span> time_epoch<span class="token punctuation">)</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>T<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绘制图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time_epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/20/xu-lie-mo-xing/output_3_1.png" class=""><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>接下来我们对序列进行一定的处理，使这个序列转换为模型的“特征-标签”对，这里我们使用的$\tau=4$，由于前4个数据没有历史数据来描述它们，因此我们将其舍去。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> Dataset<span class="token keyword">class</span> <span class="token class-name">DigitDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">=</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>y<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token keyword">return</span> X<span class="token punctuation">,</span> Y    tau <span class="token operator">=</span> <span class="token number">4</span>features <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>T <span class="token operator">-</span> tau<span class="token punctuation">,</span> tau<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>tau<span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">:</span> T <span class="token operator">-</span> tau <span class="token operator">+</span> i<span class="token punctuation">]</span>labels <span class="token operator">=</span> y<span class="token punctuation">[</span>tau<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># print(features.shape, labels.shape)</span>batch_size<span class="token punctuation">,</span> n_train <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">600</span>          <span class="token comment"># 仅使用前600个数据进行模型训练</span>train_set <span class="token operator">=</span> DigitDataset<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token punctuation">:</span> n_train<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span> n_train<span class="token punctuation">]</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h2><p>在这里我们构建一个十分简单的网络来训练模型：一个拥有两个全连接层的多层感知机，ReLU激活函数，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token comment"># 初始化网络权重参数</span><span class="token keyword">def</span> <span class="token function">init_weights</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">:</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>xavier_uniform_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MLP</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MLP<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>init_weights<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>设置超参数以及optimizer， criterion，并进行训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 模型</span>model <span class="token operator">=</span> MLP<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>n_epoch <span class="token operator">=</span> <span class="token number">10</span>lr <span class="token operator">=</span> <span class="token number">0.01</span><span class="token comment"># optimizer</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span class="token comment"># criterion</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Training</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    total_loss <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 前向传播</span>        y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 后向传播</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                total_loss <span class="token operator">+=</span> loss <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment"># 结果展示</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Epoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>n_epoch<span class="token punctuation">:</span><span class="token format-spec">02d</span><span class="token punctuation">}</span></span><span class="token string">] Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>total_loss <span class="token operator">/</span> n_train<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Epoch [1/10] Loss: 0.054475486278533936Epoch [2/10] Loss: 0.015365694649517536Epoch [3/10] Loss: 0.011502934619784355Epoch [4/10] Loss: 0.006994950119405985Epoch [5/10] Loss: 0.007959885522723198Epoch [6/10] Loss: 0.008115933276712894Epoch [7/10] Loss: 0.009392841719090939Epoch [8/10] Loss: 0.008084502071142197Epoch [9/10] Loss: 0.0074587250128388405Epoch [10/10] Loss: 0.006592489313334227</code></pre><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>由训练误差可知，模型运行的效果不错，现在让我们检验模型的预测能力，首先检验模型预测下一个时间步的能力</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">onestep_preds <span class="token operator">=</span> model<span class="token punctuation">(</span>features<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">[</span>tau<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> onestep_preds<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time_epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'1-step preds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/20/xu-lie-mo-xing/output_11_1.png" class=""><p>由图可以看出。单步预测效果不错。即使预测的时间步超过了600+4（n_train + tau)，其预测结果看起来仍然不错。但如果数据观察序列只到了604，后面的都需要我们进行预测，那么这个模型的结果将会成为什么样子？还会有这么好的预测效果吗？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">multistep_preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>T<span class="token punctuation">)</span>multistep_preds<span class="token punctuation">[</span><span class="token punctuation">:</span> n_train <span class="token operator">+</span> tau<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span> n_train <span class="token operator">+</span> tau<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_train <span class="token operator">+</span> tau<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span>    multistep_preds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">(</span>multistep_preds<span class="token punctuation">[</span>i <span class="token operator">-</span> tau<span class="token punctuation">:</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 绘图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">[</span>tau<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> onestep_preds<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">,</span> multistep_preds<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time_epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'1-step preds'</span><span class="token punctuation">,</span> <span class="token string">'multistep preds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/20/xu-lie-mo-xing/output_13_1.png" class=""><p>由图可以看出绿线的预测显然不是很理想，经过几个预测步骤之后，预测的结果很快就会衰减到一个常数。这其实是错误累积的结果，因此后面误差会相当快地偏离真实的观测结果。<br>现在我们将预测步数分别设置为1，4，16，64，通过对比比较，看看k步预测的困难。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">max_steps <span class="token operator">=</span> <span class="token number">64</span>features <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>T <span class="token operator">-</span> tau <span class="token operator">-</span> max_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tau <span class="token operator">+</span> max_steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 列i（i&lt;tau）是来⾃x的观测，其时间步从（i+1）到（i+T-tau-max_steps+1）</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>tau<span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i <span class="token punctuation">:</span> T <span class="token operator">-</span> tau <span class="token operator">-</span>max_steps <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token comment"># 列i（i&gt;=tau）是来⾃（i-tau+1）步的预测，其时间步从（i+1）到（i+T-tau-max_steps+1）</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>tau<span class="token punctuation">,</span> tau <span class="token operator">+</span> max_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i <span class="token operator">-</span> tau<span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>steps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 绘图</span><span class="token keyword">for</span> i <span class="token keyword">in</span> steps<span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>time_epoch<span class="token punctuation">[</span>tau <span class="token operator">+</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> T <span class="token operator">-</span> max_steps <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token punctuation">,</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> tau <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time_epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">-step preds'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> steps<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/20/xu-lie-mo-xing/output_15_1.png" class=""><p>以上例子清楚地说明随着预测步数的增加，预测的结果逐渐变坏。虽然“4步预测”看起来仍然不错，但超过这个跨度的任何预测几乎都是无用的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据操作</title>
      <link href="/2022/03/18/shu-ju-cao-zuo/"/>
      <url>/2022/03/18/shu-ju-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>首先，我们介绍n维数组，也称为张量（tensor）。在python中数组通过调用Numpy计算包实现，但在pyTorch中为Tensor。虽然这两者相似，但Tensor比Numpy多一些重要的功能：①GPU算力比CPU高，而Numpy仅支持CPU计算；②Tensor类支持自动微分，更适合深度学习。</p><h2 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h2><p>这节主要介绍一个基本数值计算工具torch的一些操作，首先我们导入torch，并使用arange创建一个行向量。这个⾏向量包含以0开始的前12个整数，它们默认创建为整数。张量中的每个值都称为张量的 元素（element）。例如，张量 x 中有 12 个元素。除⾮额外指定，新的张量将存储在内存中，并采⽤基于CPU的计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</code></pre><p>可以通过张量的shape属性来访问张量的形状。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>torch.Size([12])</code></pre><p>下面通过numel()函数获取张量中元素的数量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>12</code></pre><p>在一些场景中，我们需要改变一个张量的形状而不改变元素数量和元素值，这可以通过reshape()函数实现。例如，可以把张量x从形状为(12,)的行向量转换为形状为(3,4)的矩阵。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11]])</code></pre><p>如果在改变张量形状前，我们知道目标矩阵的行数或列数，那么可以通过-1来调用reshape()函数自动计算出维度的功能。即我们可以⽤x.reshape(-1,4)或x.reshape(3,-1)来取x.reshape(3,4)。</p><p>有时，我们希望使⽤全0、全1、其他常量，或者从特定分布中随机采样的数字来初始化矩阵。我们可以创建⼀个形状为（2,3,4）的张量，其中所有元素都设置为0。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[[0., 0., 0., 0.],         [0., 0., 0., 0.],         [0., 0., 0., 0.]],        [[0., 0., 0., 0.],         [0., 0., 0., 0.],         [0., 0., 0., 0.]]])</code></pre><p>同样，我们可以创建⼀个形状为(2,3,4)的张量，其中所有元素都设置为1。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]],        [[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]]])</code></pre><p>有时我们想通过从某个特定的概率分布中随机采样来得到张量中每个元素的值，可以通过randn()函数实现。如以下代码创建⼀个形状为（3,4）的张量，其中的每个元素都从均值为0、标准差为1的标准正态分布中随机采样。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[ 1.1445,  0.5344,  1.7990,  0.1128],        [-0.5328,  0.4657,  0.7276,  0.2435],        [ 0.0553,  0.2340,  0.8917, -0.5017]])</code></pre><p>我们还可以通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[2, 1, 4, 3],        [1, 2, 3, 4],        [4, 3, 2, 1]])</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>常⻅的标准算术运算符（+、 -、 *、 /和**），该运算符用于任意具有相同形状的张量间的计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> y<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span> x <span class="token operator">**</span> y <span class="token comment"># **运算符是求幂运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([ 3.,  4.,  6., 10.]), tensor([-1.,  0.,  2.,  6.]), tensor([ 2.,  4.,  8., 16.]), tensor([0.5000, 1.0000, 2.0000, 4.0000]), tensor([ 1.,  4., 16., 64.]))</code></pre><p>“按元素”⽅式可以应⽤更多的计算，包括像求幂这样的⼀元运算符torch.exp(x)，求正弦值torch.sin(x)等等。</p><p>除按元素计算外，还可以执行线性代数运算，包括向量点积和矩阵乘法。我们也可以把多个张量连接（concatenate）在一起形成一个更大的张量。我们只需要提供张量列表，并给出沿哪个轴连接（沿行轴用dim=0，沿列轴用dim=1），这里需要注意张量的形状。下面我们用代码实现张量连接操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[ 0.,  1.,  2.,  3.],         [ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.],         [ 2.,  1.,  4.,  3.],         [ 1.,  2.,  3.,  4.],         [ 4.,  3.,  2.,  1.]]), tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],         [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],         [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))</code></pre><p>通过sum()函数对张量中的所有元素进⾏求和，会产⽣⼀个单元素张量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor(66.)</code></pre><h2 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h2><p>在上⾯的部分中，我们看到了如何在相同形状的两个张量上执⾏按元素操作。在某些情况下，即使形状不同，我们仍然可以通过调⽤ ⼴播机制（broadcasting mechanism）来执⾏按元素操作。这种机制的⼯作⽅式如下：⾸先，通过适当复制元素来扩展⼀个或两个数组，以便在转换之后，两个张量具有相同的形状。其次，对⽣成的数组执⾏按元素操作。如下：a和b分别是3 × 1和1 × 2矩阵，如果让它们相加，它们的形状不匹配。我们将两个矩阵⼴播为⼀个更⼤的3 × 2矩阵，矩阵a将复制列，矩阵b将复制⾏，然后再按元素相加。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[0],         [1],         [2]]), tensor([[0, 1]]))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[0, 1],        [1, 2],        [2, 3]])</code></pre><h2 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h2><p>就像python数组一样，张量中的元素可以通过索引访问。与python数组一样，张量中第一个元素的索引是0，最后一个元素的索引是-1。<br>如下所⽰，我们可以⽤[-1]选择最后⼀个元素，可以⽤[1:3]选择第⼆个和第三个元素（对于矩阵是默认对行进行操作）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(tensor([ 8.,  9., 10., 11.]), tensor([[ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.]]))</code></pre><p>如果你想实现矩阵中列的索引，可以通过X[:, a:b]实现，同样对行索引可以通过X[a:b, :]实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(tensor([[ 1.,  2.],         [ 5.,  6.],         [ 9., 10.]]), tensor([[ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.]]))</code></pre><p>除读取外，我们还可以通过指定索引来将元素写入矩阵</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  9.,  7.],        [ 8.,  9., 10., 11.]])</code></pre><h2 id="转换为其他python对象"><a href="#转换为其他python对象" class="headerlink" title="转换为其他python对象"></a>转换为其他python对象</h2><p>将深度学习框架定义的张量转换为Numpy很容易，反之也同样容易。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> X<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>B <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(numpy.ndarray, torch.Tensor)</code></pre><p>要将⼤小为1的张量转换为Python标量，我们可以调⽤item函数或Python的内置函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> a<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>(tensor([3.5000]), 3.5, 3.5, 3)</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://d2l.ai/">Dive into Deep Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入图片</title>
      <link href="/2022/03/17/hexo-cha-ru-tu-pian/"/>
      <url>/2022/03/17/hexo-cha-ru-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h2><p>打开typora，选择：文件 - 偏好设置 - 图像 - 插入图片，做如下更改：</p><img src="/2022/03/17/hexo-cha-ru-tu-pian/image-20220331152841489.png" class=""><p>该设置会使得当你插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。</p><h2 id="Hexo设置"><a href="#Hexo设置" class="headerlink" title="Hexo设置"></a>Hexo设置</h2><ul><li>更换插件</li></ul><p>用插件 <code>Hexo-renderer-markdown-it</code> （推荐）代替 <code>Hexo-renderer-marked</code>，执行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall hexo-renderer-marker --save  #卸载 markednpm install hexo-renderer-markdown-it --save  #安装markdown-it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更改根目录下的_config.yml 配置</li></ul><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装插件<code>hexo-image-link</code></li></ul><pre class="line-numbers language-none"><code class="language-none">npm install hexo-image-link --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该插件可以实现路径转换，假设：</p><p>文件名: <code>./test.md</code></p><p>图片路径: <code>./test/test.jpg</code></p><p>当插入图片 test.jpg 到 test.md 中时，typora 的引用路径为：</p><pre class="line-numbers language-none"><code class="language-none">![](test/test.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在Hexo发布后的引用路径为：</p><pre class="line-numbers language-none"><code class="language-none">![](test.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，typora的md文件引入hexo时，应转换路径，即删掉图片路径中的 <code>"test/"</code>部分。若在md文件做上述操作，则md文件不能正常显示图片，而</p><p>hexo部署后可正常显示。为了书写方便，引入插件<code>hexo-image-link</code>即可帮助实现了这种路径转换。实现typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。</p>]]></content>
      
      
      <categories>
          
          <category> 生命在于折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成式对抗网络</title>
      <link href="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/"/>
      <url>/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GAN的全称为Generative Adversarial Network，翻译成中文就是生成式对抗网络。 在github有个<a href="https://github.com/hindupuravinash/the-gan-zoo">GAN Zoo</a>，它记录了GAN的发展并提供了相关GAN的论文来源和部分GAN模型的实现。下图为GAN的论文数量随时间的变化，由图可以看出自2014年第一篇GAN的论文问世，GAN的数量就以指数增长形式迅速壮大。虽然GAN的种类千变万化，但它们的结构类似，都含有一个生成器（generator）和一个判别器（discriminator）。</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313134629440.jpg" class=""><p>判别器和生成器都是一个神经网络结构，也就是一个黑箱模型。判别器相对比较好理解，就像一个二分类模型，有一个判别界限去区分样本，从概率的角度分析就是获得样本x属于类别y的概率，是一个条件概率P(y|x)。而生成器是需要生成数据的概率分布，就像高斯分布一样，需要去拟合整个分布，从概率角度分析就是样本x在整个分布中对应的概率。</p><h2 id="GAN的相关理论"><a href="#GAN的相关理论" class="headerlink" title="GAN的相关理论"></a>GAN的相关理论</h2><p>GAN本质上是在做什么事情呢？</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313134650100.png" class=""><p>以图像生成为例，我们假设吧每一个图片看作二维空间中的一个点，并且现有图片会满足于某个数据分布，我们记作$P_{data}(x)$。那么在这个图像分布空间中，实际上只有很小一部分的区域是人脸图像。如上图所示，只有在蓝色区域采样出的点才会看起来像人脸，而在蓝色区域外采样出来的点就不是人脸。而在GAN中我们需要做的就是让机器找到人脸的分布函数，这也是GAN本质上做的事情。</p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>如下图所示，我们需要训练出这样一个生成器，对于一个已知分布的数据z，我们可以通过生成器把数据转化成一个高维向量，它可以表示为一个图片、文本、声音等。只要我们随机输入多个z，就可以生成一个关于数据x的分布，我们把它称作$P_{G}(x)$。而真实数据也对应一个分布$P_{data}(x)$，生成器的目标是使$P_{G}(x)$和$P_{data}(x)$这两个分布越相似越好。我们知道对于回归和分类模型，都有对应的目标函数，我们只需使这个目标函数达到最优，即可得出一个比较好的回归或分类模型。那么对于两个分布，我们可以利用散度（Divergence，简称Div）这个评价指标来衡量两个分布之间的相似性。Div越小就表示两个分布越相似。那么我们可以将Div作为训练G的目标函数，我们的目标是使Div最小。</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135023130.png" class=""><h2 id="Discriminator"><a href="#Discriminator" class="headerlink" title="Discriminator"></a>Discriminator</h2><p>现在有一个最关键的问题是，两个分布之间的Div要如何计算出来呢？理论上来说我们不知道$P_{G}(x)$和$P_{data}(x)$是什么，因此Div我们是无法计算的。因此我们需要构建一个新的网络，它的作用是衡量$P_{G}(x)$和$P_{data}(x)$之间的Div，因此我们有了这样一个网络——判别器。</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135053706.png" class=""><p>图中，蓝色星星是从$P_{data}$（真实数据）中采样出的数据，黄色星星是从$P_{G}$（生成的数据）中采样出的数据，现在我们将这两组数据交给判别器，判别器的功能是判别读入的数据是来自$P_{data}$还是$P_{G}$。如果输入数据是$P_{data}$，那么经过判别器后就输出一个较大的值（可以近似理解为输出1）。如果输入数据是$P_{G}$，那么经过判别器后就输出一个较小的值（可以近似理解为输出0）。熟悉分类模型的同学可能就会说判别器不就相当于是一个二分类模型吗？而前面不是说我们是以Div的大小来判断两个分布之间的相似程度。现在我们就用公式推导出Div和二分类模型的目标函数之间的相关性。<br>我们先来看一下判别器的目标函数：</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135121210.png" class=""><p>从式子本身理解的话，数据来源于$P_{data}$，D(x)要尽可能大，数据来源于$P_{G}$，D(x)要尽可能小。这样的话$V(G,D)$就越大。以最大化$V(G,D)$为目标函数，就可以使得输入数据是$P_{G}$，经过判别器后就输出一个较小的值，相反则输入一个较大的值。这样就达到了区分读入的数据是来自$P_{data}$还是$P_{G}$的目的。接下来我们将目标函数展开：</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135206860.png" class=""><p>假设判别器十分强大，它模拟出的D(x)可以表示任何函数，给定一个x，都有一个D(x)使得表达式$P_{data}(x)logD(x)+P_{G}(x)log(1-D(x))$最大，求导令其为0可以得出：<br>$$D^{<em>}(x)=\frac{P_{data}(x)}{P_{data}(x)+P_{G}(x)}$$<br>现在把$D^{</em>}(x)$带入到目标函数中得到：</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135318679.png" class=""><p>将表达式中分子分母都除于2可得：</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135338407.png" class=""><p>这个表达式等价为：</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135404583.png" class=""><p>至此我们可以得知通过一定的假设，得出散度的计算类似于二分类器的目标函数的计算。因此可以看出判别器的本质就是一个二分类器，这样就有利于我们后面代码的实现。<br>现在我们再回到生成器，生成器的目的是让生成数据$P_{G}$和真实数据$P_{data}$之间的Div最小，本来Div是没办法计算的，但是现在有了判别器之后，Div变得可以计算了，于是生成器新的目标函数变为：<br> $$G^{*}=arg\underset{G}{min}\underset{D}{V(G,D)}$$<br>至此，GAN就变成了一个求解最小最大值的问题，接下来就可以用最基本的梯度下降法求解这个问题。<br>下面我们用一个完整的伪算法来回顾一下GAN模型训练的整个流程。</p><img src="/2022/03/16/sheng-cheng-shi-dui-kang-wang-luo/image-20220313135516142.png" class=""><p>这段伪代码的意思是，首先我们初始化生成器和判别器的参数，接下来规定一个总迭代次数，每轮训练的迭代次数也确定（这个根据数据量大小确定，一般是3-5次为一轮），在每轮训练中，我们先训练判别器，先从真实数据分布$P_{data}(x)$中抽样x，然后从先验分布中抽样z，并通过生成器产生数据$\overset{-}{x}$，接着把x和$\overset{-}{x}$丢入判别器中训练，使得目标函数$\overset{-}{V}$最大；接下来我们训练生成器，从先验分布中抽样新的z，接下来把z丢进生成器中训练，使得目标函数$\overset{-}{V}$最小，其实这一步就是让这一轮训练好的判别器认为生成器生成的是真实的数据。这样循环交替，最终生成器产生的数据$\overset{-}{x}$就会越来越接近真实数据x。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://arxiv.org/abs/1406.2661">Goodfellow, Ian, et al. “Generative adversarial nets.”Advances in neural information processing systems27 (2014).</a></p><p>[2] <a href="https://www.youtube.com/watch?v=DMA4MrNieWo">李宏毅youtube课程</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
